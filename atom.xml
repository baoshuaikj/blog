<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mycpen&#39;s Blog</title>
  
  
  <link href="https://mycpen.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://mycpen.github.io/blog/"/>
  <updated>2022-09-10T04:00:01.000Z</updated>
  <id>https://mycpen.github.io/blog/</id>
  
  <author>
    <name>Mycpen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01_PHP-CentOS8.2 编译安装 PHP8.1.10</title>
    <link href="https://mycpen.github.io/blog/posts/8c0cadef35a1.html"/>
    <id>https://mycpen.github.io/blog/posts/8c0cadef35a1.html</id>
    <published>2022-09-10T04:00:00.000Z</published>
    <updated>2022-09-10T04:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>PHP</code> + <code>编译安装</code> + <code>图床迁移</code><span id="more"></span></p><h1 id="01-PHP-CentOS8-2-编译安装-PHP8-1-10"><a href="#01-PHP-CentOS8-2-编译安装-PHP8-1-10" class="headerlink" title="01_PHP-CentOS8.2 编译安装 PHP8.1.10"></a>01_PHP-CentOS8.2 编译安装 PHP8.1.10</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>因 <a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a> 失效，博主打算将 GitHub 托管的图床备份到其他平台。</p><p>网上看到 <a href="https://github.com/lsky-org/lsky-pro">兰空图床</a> 萌生了自建图床的念头，搭建环境要求 PHP &gt;= 8.0.2，于是打算编译安装 PHP。</p><p>最终因服务器配置太低（1核1G 带宽1Mbps）编译失败而放弃。转而投身之前已经搭建好环境的又拍云平台。</p><p>博文内容：<code>PHP-CentOS8.2 编译安装 PHP8.1.10</code> + <code>编写GitHub图床迁移至又拍云的脚本（ftp）</code> + <code>编写批量修改文章内容的脚本</code></p><h2 id="二-正文"><a href="#二-正文" class="headerlink" title="二. 正文"></a>二. 正文</h2><h3 id="2-1❤-CentOS8-2-编译安装-PHP8-1-10"><a href="#2-1❤-CentOS8-2-编译安装-PHP8-1-10" class="headerlink" title="2.1❤ CentOS8.2 编译安装 PHP8.1.10"></a>2.1❤ CentOS8.2 编译安装 PHP8.1.10</h3><p><strong>2.1.1</strong> PHP8 和 oniguruma 源码下载并上传至服务器 /mnt 目录</p><p><a href="https://www.php.net/distributions/php-8.1.10.tar.gz">https://www.php.net/distributions/php-8.1.10.tar.gz</a></p><p><a href="https://codeload.github.com/kkos/oniguruma/tar.gz/refs/tags/v6.9.4">https://codeload.github.com/kkos/oniguruma/tar.gz/refs/tags/v6.9.4</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf oniguruma-6.9.4.tar.gz</span><br><span class="line">tar xzf php-8.1.10.tar.gz</span><br></pre></td></tr></table></figure><p><strong>2.1.2</strong> 安装 PHP8 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2 安装 PHP8 依赖包</span></span><br><span class="line">yum -y install autoconf freetype gd libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel net-snmp-devel libjpeg-devel php-ldap openldap-devel openldap-clients freetype-devel gmp-devel libzip libzip-devel sqlite-devel automake libtool</span><br></pre></td></tr></table></figure><p><strong>2.1.3</strong> 编译 PHP8 依赖包 oniguruma</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.1 生成 configure</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/oniguruma-6.9.4</span><br><span class="line">./autogen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 生成编译配置文件</span></span><br><span class="line">./configure --prefix=/usr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>2.1.4</strong> 编译 PHP8 主包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.1 生成编译配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/php-8.1.10</span><br><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --enable-mysqlnd --with-mysqli --with-pdo-mysql --enable-opcache --with-pcre-jit --enable-gd --with-jpeg --with-freetype --with-gettext --with-curl --with-openssl --enable-sockets --enable-mbstring --enable-xml --with-zip --with-zlib --with-snmp --with-mhash --enable-ftp --enable-bcmath --enable-soap --enable-shmop --enable-sysvsem --enable-pcntl --with-gmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>因为配置过低，编译失败。</p><p><strong>2.1.5</strong> 编译安装后目录</p><p>/usr/local/php</p><p><strong>参考</strong></p><p><a href="https://www.bilibili.com/read/cv9248283/">https://www.bilibili.com/read/cv9248283/</a></p><p><a href="https://www.bilibili.com/video/BV13U4y1T7VS">https://www.bilibili.com/video/BV13U4y1T7VS</a></p><h3 id="2-2-基于-FTP-将GitHub图床迁移至又拍云"><a href="#2-2-基于-FTP-将GitHub图床迁移至又拍云" class="headerlink" title="2.2 基于 FTP 将GitHub图床迁移至又拍云"></a>2.2 基于 FTP 将GitHub图床迁移至又拍云</h3><p><strong>参考</strong></p><p><a href="https://techs.upyun.com/videos/cdnpage/creating_storage.html">官方视频教程 - 创建存储服务和使用 FTP 上传</a>    可以得到用户名和密码</p><p>默认已经完成了又拍云云存储服务的申请 + 绑定自定义域名 <a href="https://help.upyun.com/knowledge-base/quick_start/">https://help.upyun.com/knowledge-base/quick_start/</a></p><p><strong>2.2.1</strong> 编写 Python 脚本 实现批量</p><p>源码来自    <a href="http://blog.csdn.net/ouyang_peng/article/details/79271113">http://blog.csdn.net/ouyang_peng/article/details/79271113</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFTP</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        ftp自动下载、自动上传脚本，可以递归目录操作</span></span><br><span class="line"><span class="string">        作者：欧阳鹏</span></span><br><span class="line"><span class="string">        博客地址：http://blog.csdn.net/ouyang_peng/article/details/79271113</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, port=<span class="number">21</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 初始化 FTP 客户端</span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">                 host:ip地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 port:端口号</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(&quot;__init__()---&gt; host = %s ,port = %s&quot; % (host, port))</span></span><br><span class="line"></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.ftp = FTP()</span><br><span class="line">        <span class="comment"># 重新设置下编码方式</span></span><br><span class="line">        <span class="comment">#self.ftp.encoding = &#x27;gbk&#x27;</span></span><br><span class="line">        self.ftp.encoding = <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">        <span class="comment"># self.log_file = open(&quot;python-ftp/log.txt&quot;, &quot;a&quot;)</span></span><br><span class="line">        self.file_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 初始化 FTP 客户端</span></span><br><span class="line"><span class="string">            参数:</span></span><br><span class="line"><span class="string">                  username: 用户名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 password: 密码</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            timeout = <span class="number">60</span></span><br><span class="line">            socket.setdefaulttimeout(timeout)</span><br><span class="line">            <span class="comment"># 0主动模式 1 #被动模式</span></span><br><span class="line">            self.ftp.set_pasv(<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 打开调试级别2，显示详细信息</span></span><br><span class="line">            <span class="comment"># self.ftp.set_debuglevel(2)</span></span><br><span class="line"></span><br><span class="line">            self.debug_print(<span class="string">&#x27;开始尝试连接到 %s&#x27;</span> % self.host)</span><br><span class="line">            self.ftp.connect(self.host, self.port)</span><br><span class="line">            self.debug_print(<span class="string">&#x27;成功连接到 %s&#x27;</span> % self.host)</span><br><span class="line"></span><br><span class="line">            self.debug_print(<span class="string">&#x27;开始尝试登录到 %s&#x27;</span> % self.host)</span><br><span class="line">            self.ftp.login(username, password)</span><br><span class="line">            self.debug_print(<span class="string">&#x27;成功登录到 %s&#x27;</span> % self.host)</span><br><span class="line"></span><br><span class="line">            self.debug_print(self.ftp.welcome)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            self.deal_error(<span class="string">&quot;FTP 连接或登录失败 ，错误描述为：%s&quot;</span> % err)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_same_size</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断远程文件和本地文件大小是否一致</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string">             local_file: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_file: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            remote_file_size = self.ftp.size(remote_file)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="comment"># self.debug_print(&quot;is_same_size() 错误描述为：%s&quot; % err)</span></span><br><span class="line">            remote_file_size = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            local_file_size = os.path.getsize(local_file)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="comment"># self.debug_print(&quot;is_same_size() 错误描述为：%s&quot; % err)</span></span><br><span class="line">            local_file_size = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.debug_print(<span class="string">&#x27;local_file_size:%d  , remote_file_size:%d&#x27;</span> % (local_file_size, remote_file_size))</span><br><span class="line">        <span class="keyword">if</span> remote_file_size == local_file_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从ftp下载文件</span></span><br><span class="line"><span class="string">            参数:</span></span><br><span class="line"><span class="string">                local_file: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                remote_file: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.debug_print(<span class="string">&quot;download_file()---&gt; local_path = %s ,remote_path = %s&quot;</span> % (local_file, remote_file))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.is_same_size(local_file, remote_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;%s 文件大小相同，无需下载&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.debug_print(<span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;下载文件 %s ... ...&#x27;</span> % local_file)</span><br><span class="line">                buf_size = <span class="number">1024</span></span><br><span class="line">                file_handler = <span class="built_in">open</span>(local_file, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">                self.ftp.retrbinary(<span class="string">&#x27;RETR %s&#x27;</span> % remote_file, file_handler.write, buf_size)</span><br><span class="line">                file_handler.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                self.debug_print(<span class="string">&#x27;下载文件出错，出现异常：%s &#x27;</span> % err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file_tree</span>(<span class="params">self, local_path, remote_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从远程目录下载多个文件到本地目录</span></span><br><span class="line"><span class="string">                       参数:</span></span><br><span class="line"><span class="string">                         local_path: 本地路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                         remote_path: 远程路径</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;download_file_tree()---&gt;  local_path = %s ,remote_path = %s&quot;</span> % (local_path, remote_path))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(remote_path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            self.debug_print(<span class="string">&#x27;远程目录%s不存在，继续...&#x27;</span> % remote_path + <span class="string">&quot; ,具体错误描述为：%s&quot;</span> % err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(local_path):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;本地目录%s不存在，先创建本地目录&#x27;</span> % local_path)</span><br><span class="line">            os.makedirs(local_path)</span><br><span class="line"></span><br><span class="line">        self.debug_print(<span class="string">&#x27;切换至目录: %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line"></span><br><span class="line">        self.file_list = []</span><br><span class="line">        <span class="comment"># 方法回调</span></span><br><span class="line">        self.ftp.<span class="built_in">dir</span>(self.get_file_list)</span><br><span class="line"></span><br><span class="line">        remote_names = self.file_list</span><br><span class="line">        self.debug_print(<span class="string">&#x27;远程目录 列表: %s&#x27;</span> % remote_names)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> remote_names:</span><br><span class="line">            file_type = item[<span class="number">0</span>]</span><br><span class="line">            file_name = item[<span class="number">1</span>]</span><br><span class="line">            local = os.path.join(local_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> file_type == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;download_file_tree()---&gt; 下载目录： %s&quot;</span> % file_name)</span><br><span class="line">                self.download_file_tree(local, file_name)</span><br><span class="line">            <span class="keyword">elif</span> file_type == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;download_file()---&gt; 下载文件： %s&quot;</span> % file_name)</span><br><span class="line">                self.download_file(local, remote_path+file_name)</span><br><span class="line">            self.ftp.cwd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">            self.debug_print(<span class="string">&#x27;返回上层目录 %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从本地上传文件到ftp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string">             local_path: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_path: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(local_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;%s 不存在&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.is_same_size(local_file, remote_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;跳过相等的文件: %s&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        buf_size = <span class="number">1024</span></span><br><span class="line">        file_handler = <span class="built_in">open</span>(local_file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        self.ftp.storbinary(<span class="string">&#x27;STOR %s&#x27;</span> % remote_file, file_handler, buf_size)</span><br><span class="line">        file_handler.close()</span><br><span class="line">        self.debug_print(<span class="string">&#x27;上传: %s&#x27;</span> % local_file + <span class="string">&quot;成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file_tree</span>(<span class="params">self, local_path, remote_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从本地上传目录下多个文件到ftp</span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             local_path: 本地路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_path: 远程路径</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(local_path):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;本地目录 %s 不存在&#x27;</span> % local_path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.ftp.cwd(remote_path)</span><br><span class="line">        self.debug_print(<span class="string">&#x27;切换至远程目录: %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line"></span><br><span class="line">        local_name_list = os.listdir(local_path)</span><br><span class="line">        <span class="keyword">for</span> local_name <span class="keyword">in</span> local_name_list:</span><br><span class="line">            src = os.path.join(local_path, local_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(src):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.ftp.mkd(local_name)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                    self.debug_print(<span class="string">&quot;目录已存在 %s ,具体错误描述为：%s&quot;</span> % (local_name, err))</span><br><span class="line">                self.debug_print(<span class="string">&quot;upload_file_tree()---&gt; 上传目录： %s&quot;</span> % local_name)</span><br><span class="line">                self.upload_file_tree(src, local_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.debug_print(<span class="string">&quot;upload_file_tree()---&gt; 上传文件： %s&quot;</span> % local_name)</span><br><span class="line">                self.upload_file(src, local_name)</span><br><span class="line">        self.ftp.cwd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 退出ftp</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.debug_print(<span class="string">&quot;close()---&gt; FTP退出&quot;</span>)</span><br><span class="line">        self.ftp.quit()</span><br><span class="line">        <span class="comment"># self.log_file.close()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug_print</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 打印日志</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.write_log(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_error</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 处理错误异常</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                e：异常</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        log_str = <span class="string">&#x27;发生错误: %s&#x27;</span> % e</span><br><span class="line">        self.write_log(log_str)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_log</span>(<span class="params">self, log_str</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 记录日志</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                log_str：日志</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time_now = time.localtime()</span><br><span class="line">        date_now = time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time_now)</span><br><span class="line">        format_log_str = <span class="string">&quot;%s ---&gt; %s \n &quot;</span> % (date_now, log_str)</span><br><span class="line">        <span class="built_in">print</span>(format_log_str)</span><br><span class="line">        <span class="comment"># self.log_file.write(format_log_str)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file_list</span>(<span class="params">self, line</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 获取文件列表</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                line：</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        file_arr = self.get_file_name(line)</span><br><span class="line">        <span class="comment"># 去除  . 和  ..</span></span><br><span class="line">        <span class="keyword">if</span> file_arr[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;..&#x27;</span>]:</span><br><span class="line">            self.file_list.append(file_arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file_name</span>(<span class="params">self, line</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 获取文件名</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                line：</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pos = line.rfind(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> (line[pos] != <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (line[pos] == <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        file_arr = [line[<span class="number">0</span>], line[pos:]]</span><br><span class="line">        <span class="keyword">return</span> file_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_ftp = MyFTP(<span class="string">&quot;v0.ftp.upyun.com&quot;</span>)</span><br><span class="line">    my_ftp.login(<span class="string">&quot;用户名xxx/xxx&quot;</span>, <span class="string">&quot;密码xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载单个文件</span></span><br><span class="line">    <span class="comment"># my_ftp.download_file(&quot;G:/ftp_test/XTCLauncher.apk&quot;, &quot;/App/AutoUpload/ouyangpeng/I12/Release/XTCLauncher.apk&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传单个文件</span></span><br><span class="line">    <span class="comment"># my_ftp.upload_file(&quot;G:/ftp_test/Release/XTCLauncher.apk&quot;, &quot;/App/AutoUpload/ouyangpeng/I12/Release/XTCLauncher.apk&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载目录</span></span><br><span class="line">    <span class="comment"># image.cpen.top/image/* → 本地 E:/code_zone/tools/test/    (本地图床目录, 又拍云路径)</span></span><br><span class="line">    <span class="comment">#my_ftp.download_file_tree(&quot;E:/code_zone/tools/python-ftp/test/&quot;, &quot;/image/&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传目录</span></span><br><span class="line">    <span class="comment"># 本地 E:/code_zone/tools/test/* → image.cpen.top/image/    (本地图床目录, 又拍云路径)</span></span><br><span class="line">    <span class="keyword">if</span> os.sep == <span class="string">&quot;\\&quot;</span>:</span><br><span class="line">        my_ftp.upload_file_tree(<span class="string">&quot;E:/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)    <span class="comment"># Windows</span></span><br><span class="line">        my_ftp.close()</span><br><span class="line">    <span class="keyword">elif</span> os.sep == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        my_ftp.upload_file_tree(<span class="string">&quot;/root/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)  <span class="comment"># aliyun</span></span><br><span class="line">        my_ftp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="comment"># python E:/code_zone/tools/python-ftp/ftp.py</span></span><br><span class="line"><span class="comment"># python3 /root/code_zone/tools/python-ftp/ftp.py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.2.2</strong> 说明</p><p><code>my_ftp.login(&quot;用户名xxx/xxx&quot;, &quot;密码xxx&quot;)</code> 参考 <a href="https://techs.upyun.com/videos/cdnpage/creating_storage.html">https://techs.upyun.com/videos/cdnpage/creating_storage.html</a></p><p>后期又将脚本传到云服务器上，通过计划任务，每15分钟 将本地GitHub图床仓库里的图片同步至 又拍云</p><p>（因为实际中还是习惯用 GitHub图床 + 开代理，一段时间后再批量更新图片链接至又拍云）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ CentOS in ~ [18:05:59]</span></span><br><span class="line">$ crontab -l</span><br><span class="line">*/15 * * * *  <span class="built_in">cd</span> /root/code_zone/image_bed/; git pull; python3 /root/code_zone/tools/python-ftp/ftp.py</span><br></pre></td></tr></table></figure><p>迁移好图床后，博客中调用图片资源时 浏览器自动 http 跳 https，因为没有证书导致图片失效，于是又申请了 ssl 证书，上传至又拍云。</p><blockquote><p><img src="https://image.cpen.top/image/image-20220910180219146.png" alt="image-20220910180219146"></p></blockquote><h3 id="2-3-编写批量修改文章内容的脚本"><a href="#2-3-编写批量修改文章内容的脚本" class="headerlink" title="2.3 编写批量修改文章内容的脚本"></a>2.3 编写批量修改文章内容的脚本</h3><p>源码参考    <a href="https://blog.csdn.net/qq_38150250/article/details/118026219">https://blog.csdn.net/qq_38150250/article/details/118026219</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源码参考  https://blog.csdn.net/qq_38150250/article/details/118026219</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件查找 find . -name file_name -type f</span></span><br><span class="line"><span class="comment"># 查找函数：search_path 查找根路径 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文章路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">search_path, search_result</span>):</span><br><span class="line">    <span class="comment"># 获取当前路径下地所有文件</span></span><br><span class="line">    all_file = os.listdir(search_path)</span><br><span class="line">    <span class="comment"># 对于每一个文件</span></span><br><span class="line">    <span class="keyword">for</span> each_file <span class="keyword">in</span> all_file:</span><br><span class="line">        <span class="comment"># 若文件为一个文件夹</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(search_path + each_file):</span><br><span class="line">            <span class="comment"># 递归查找</span></span><br><span class="line">            search(search_path + each_file + <span class="string">&#x27;/&#x27;</span>, search_result)</span><br><span class="line">        <span class="comment"># 如果是需要被查找的文件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> re.findall(<span class="string">&#x27;.*\.md$&#x27;</span>, each_file) == [each_file]:</span><br><span class="line">            <span class="comment"># 输出路径</span></span><br><span class="line">                search_result.append(search_path + each_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 sed -i &#x27;s/old_str/new_str/&#x27;</span></span><br><span class="line"><span class="comment"># 文本替换 replace_file_name 需要替换的文件路径，replace_old_str 要替换的字符，replace_new_str 替换的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">replace_file_name, replace_old_str, replace_new_str</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(replace_file_name, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f1: </span><br><span class="line">        content = f1.read()</span><br><span class="line">        f1.close()</span><br><span class="line">        t = content.replace(replace_old_str, replace_new_str)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(replace_file_name, <span class="string">&quot;w&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        f2.write(t)</span><br><span class="line">    f2.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要改的地方</span></span><br><span class="line"><span class="comment">#path = &#x27;E:/code_zone/.history/20220831_blog/source/_posts/&#x27;</span></span><br><span class="line">path_list = [</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source/source/_posts/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source-butterfly/source/_posts/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source-diary/source/_posts/&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">old_str = <span class="string">&#x27;https://image.cpen.top/image/&#x27;</span></span><br><span class="line">new_str = <span class="string">&#x27;https://image.cpen.top/image/&#x27;</span></span><br><span class="line">search_result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = []                 <span class="comment"># 存放文件路径</span></span><br><span class="line">    <span class="comment"># 默认当前目录</span></span><br><span class="line">    <span class="comment"># path = os.getcwd()</span></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> path_list:</span><br><span class="line">        search(path, result)    <span class="comment"># 获取文章路径</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> result:</span><br><span class="line">        replace(file_name, old_str, new_str)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; done  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_name, count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="comment"># python E:/code_zone/tools/python-replace/replace.py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.3.1</strong> 说明</p><p><code>search</code>    函数指定文件类型为 .md，可获得文章的完整路径；</p><p><code>path_list</code>    列表存放需要修改的文章父目录路径，可以递归查询子目录；</p><p><code>old_str</code>    需要替换的内容</p><p><code>new_str</code>    新内容</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;PHP&lt;/code&gt; + &lt;code&gt;编译安装&lt;/code&gt; + &lt;code&gt;图床迁移&lt;/code&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://mycpen.github.io/blog/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://mycpen.github.io/blog/tags/PHP/"/>
    
    <category term="脚本" scheme="https://mycpen.github.io/blog/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>10_Python-CSDN_内存管理</title>
    <link href="https://mycpen.github.io/blog/posts/428d25f2bb32.html"/>
    <id>https://mycpen.github.io/blog/posts/428d25f2bb32.html</id>
    <published>2022-09-01T09:10:00.000Z</published>
    <updated>2022-09-01T09:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="10-Python-内存管理"><a href="#10-Python-内存管理" class="headerlink" title="10_Python-内存管理"></a>10_Python-内存管理</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python内存管理三大块</span><br><span class="line">○ 引用计数</span><br><span class="line">○ 垃圾回收</span><br><span class="line">○ 内存池</span><br><span class="line">Python的内存管理以引用计数为主，垃圾回收为辅，还有个内存池</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="一-引用机制"><a href="#一-引用机制" class="headerlink" title="一. 引用机制"></a>一. 引用机制</h2><blockquote><p>● 引用机制</p><p>Python动态类型</p><p>○ ==对象==是储存在内存中的实体。</p><p>○ 我们在程序中写的==对象名==，只是指向这一对象的引用(reference)</p><p>○ ==引用和对象分离==，是动态类型的核心</p><p>○ 引用可以随时指向一个新的对象（内存地址会不一样）</p></blockquote><hr><h2 id="二-引用计数"><a href="#二-引用计数" class="headerlink" title="二. 引用计数"></a>二. 引用计数</h2><blockquote><p>● 引用计数</p><p><strong>在Python中，每个对象都有存有指向该对象的引用总数，即引用计数(reference count)</strong></p><p>引用计数器原理</p><p>○ 每个对象维护一个 ob_ref 字段，用来记录该对象当前被引用的次数 每当<strong>新的引用指向该对象</strong>时，它的<strong>引用计数ob_ref加1</strong></p><p>○ 每当该对象的<strong>引用失效时计数ob_ref减1</strong></p><p>○ <strong>一旦对象的引用计数为0</strong>，该<strong>对象可以被回收，对象占用的内存空间将被释放</strong>。 它的缺点是需要额外的空间维护引用计数，这个问题是其次的</p><p>○ 最主要的问题是它不能解决对象的“循环引用”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># a = 1 , b = 1 ，1的引用计数为2（保存它被引用的次数）</span></span><br><span class="line"><span class="comment"># a = 2 , b = 3 , 1的引用计数为0（内存里面不需要它了，回收销毁，这块对象被回收了，对象占用的内存空间将被释放）</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取引用计数: getrefcount()</span><br><span class="line">○ 当使用某个引用作为参数，传递给getrefcount()时，参数实际上创建了一个临时的引用。因此，</span><br><span class="line">getrefcount()所得到的结果，会比期望的多<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount<span class="comment"># 导入模块</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(getrefcount(a))   <span class="comment"># 获取对象a的引用计数 ， 结果为2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">增加引用计数</span><br><span class="line">○ 当一个对象A被另一个对象B引用时，A的引用计数将增加<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">减少引用计数</span><br><span class="line">○ <span class="keyword">del</span>删除或重新引用时，引用计数会变化（<span class="keyword">del</span>只是删除引用）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment"># 真实引用计数：1</span></span><br><span class="line">b = a<span class="comment"># 真实引用计数：2</span></span><br><span class="line">c = [a,a]<span class="comment"># 真实引用计数：4</span></span><br><span class="line"><span class="keyword">del</span> c[<span class="number">0</span>]            <span class="comment"># del删除引用引用计数 - 1 ； 真实引用计数: 3</span></span><br><span class="line"><span class="built_in">print</span>(c)            <span class="comment"># c 是列表对象输出为 [[1, 2, 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getrefcount(a))   <span class="comment"># 引用计数为4，真实引用计数为3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">循环引用的情况</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line">x.append(y)  y.append(x)</span><br><span class="line">○ 对于上面相互引用的情况,如果不存在其他对象对他们的引用,这两个对象所占用的内存也还是无法回收,从而导致内存泄漏</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.append(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">2</span>, [<span class="number">1</span>, [...]]]<span class="comment"># 注：发生死循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="string">&quot;y&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(y)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(y)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.append(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, [<span class="string">&#x27;y&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;y&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;y&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y<span class="comment"># del x;del y引用删除，这块内存区域获取不到了</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">引用计数机制的优点：</span><br><span class="line">○ 简单</span><br><span class="line">○ 实时性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">引用计数机制的缺点：</span><br><span class="line">○ 维护引用计数消耗资源</span><br><span class="line">○ 循环引用时，无法回收</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-垃圾回收"><a href="#三-垃圾回收" class="headerlink" title="三. 垃圾回收"></a>三. 垃圾回收</h2><blockquote><p><strong>● 垃圾回收</strong></p><p><strong>回收原则</strong></p><p>○ 当Python的某个对象的引用计数降为0时，==可以==被垃圾回收</p><p><strong>gc机制</strong></p><p>○ GC作为现代编程语言的自动内存管理机制，专注于两件事</p><p>○ 找到内存中无用的垃圾资源</p><p>○ 清除这些垃圾并把内存让出来给其他对象使用</p><p>GC彻底把程序员从资源管理的重担中解放出来，让他们有更多的时间放在业务逻辑上。但这并不意味着码农就可以不去了解GC，毕竟多了解GC知识还是有利于我们写出更健壮的代码</p><p><strong>效率问题</strong></p><p>○ 垃圾回收时，Python不能进行其它的任务。频繁的垃圾回收将大大降低Python的工作效率</p><p>○ 当Python运行时，会记录其中分配对象(object allocation)和取消分配对象(object deallocation)的次数。当两者的差值高于某个阈值时，垃圾回收才会启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> gc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(gc.get_threshold())</span><br><span class="line">(<span class="number">700</span>, <span class="number">10</span>, <span class="number">10</span>)<span class="comment"># 注：默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect()</span><br><span class="line"><span class="number">2</span><span class="comment"># 删除了2个循环引用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x1 xx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x1 xx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三种情况触发垃圾回收</span><br><span class="line">○ 调用gc.collect()</span><br><span class="line">○ GC达到阀值时</span><br><span class="line">○ 程序退出时</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分代(generation)回收</span><br><span class="line">这一策略的基本假设是：存活时间越久的对象，越不可能在后面的程序中变成垃圾</span><br><span class="line">○ Python将所有的对象分为0，1，2三代</span><br><span class="line">○ 所有的新建对象都是0代对象</span><br><span class="line">○ 当某一代对象经历过垃圾回收，依然存活，那么它就被归入下一代对象</span><br><span class="line">○ 垃圾回收启动时，一定会扫描所有的0代对象</span><br><span class="line">○ 如果0代经过一定次数垃圾回收，那么就启动对0代和1代的扫描清理</span><br><span class="line">○ 当1代也经历了一定次数的垃圾回收后，那么会启动对0，1，2，即对所有对象进行扫描</span><br></pre></td></tr></table></figure><p>标记清除</p><p>​        标记-清除机制，顾名思义，首先标记对象（垃圾检测），然后清除垃圾（垃圾回收）。</p><p>​        主要用于解决==循环引用==。</p><p>○ 1.标记：活动（有被引用）, 非活动（可被删除）</p><p>○ 2.清除：清除所有非活动的对象</p></blockquote><hr><h2 id="四-缓冲池"><a href="#四-缓冲池" class="headerlink" title="四. 缓冲池"></a>四. 缓冲池</h2><blockquote><p>● 缓冲池</p><p><strong>整数对象缓冲池</strong></p><p>○ 对于==[-5,256]== 这样的<strong>小整数</strong>，系统已经初始化好，可以直接拿来用。而对于其他的大整数，系统则提前申请了一块内存空间，等需要的时候在这上面创建大整数对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：小整数而言 id都是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">777</span><span class="comment"># a和b不是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545530064</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545530384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = b = <span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545530480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545530480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span><span class="comment"># a和b是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span><span class="comment"># python的整数对象缓冲池</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133544871840</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133544871840</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(a)</span><br><span class="line"><span class="number">801</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">字符串缓存</span><br><span class="line">○ 为了检验两个引用指向同一个对象，我们可以用<span class="keyword">is</span>关键字。<span class="keyword">is</span>用于判断两个引用所指的对象是否相同。</span><br><span class="line">当触发缓存机制时，只是创造了新的引用，而不是对象本身</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx &quot;</span><span class="comment"># 注：特殊字符不能放到缓冲区</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760672</span><span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760728</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx_&quot;</span><span class="comment"># 注：数字、字母、下划线的组合 放在字符串缓冲区</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx_&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760616</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="number">140133545242928</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545242992</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="number">140133545243120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545243120</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140612691332856</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140612688894592</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：对于乘法创建的字符  只会缓冲20个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x&quot;</span>*<span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x&quot;</span>*<span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="number">140133545742176</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545742248</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x&quot;</span>*<span class="number">20</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x&quot;</span>*<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545246768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545246768</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>○ 这对于经常使用的数字和字符串来说也是一种优化的方案</p><p><strong>字符串的intern机制</strong></p><p>○ python对于短小的，只含有==字母数字==的字符串自动触发缓存机制。其他情况不会缓存</p></blockquote><hr><h2 id="五-深拷贝与浅拷贝"><a href="#五-深拷贝与浅拷贝" class="headerlink" title="五. 深拷贝与浅拷贝"></a>五. 深拷贝与浅拷贝</h2><blockquote><p><strong>● 深拷贝与浅拷贝</strong></p><p><strong>浅拷贝</strong></p><p>○ 拷贝第一层数据（地址）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;first&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.copy()<span class="comment"># 拷贝第一层数据（地址）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># a、b引用变了</span></span><br><span class="line"><span class="number">140133410603584</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545741768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;second&quot;</span>] = <span class="string">&quot;No.2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;first&quot;</span>].append(<span class="number">4</span>)<span class="comment"># a、b里面的”first”引用 没有改变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 拷贝第一层数据（地址）</span></span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a[<span class="string">&quot;first&quot;</span>])<span class="comment"># 第一层数据（地址） 内存地址相同</span></span><br><span class="line"><span class="number">140133413100296</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b[<span class="string">&quot;first&quot;</span>])</span><br><span class="line"><span class="number">140133413100296</span></span><br></pre></td></tr></table></figure><p><strong>深拷贝</strong></p><p>○ 递归拷贝所有层的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;first&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy<span class="comment"># 导入模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545248160</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133410604736</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;second&quot;</span>] = <span class="string">&quot;No.2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;first&quot;</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;<span class="comment"># 递归拷贝所有层的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;<span class="comment"># 递归拷贝所有层的数据</span></span><br></pre></td></tr></table></figure><p>小结</p><p>○ 数字和字符串、元组，不能改变对象本身，只能改变引用的指向，称为==不可变数据对象==(immutable  object)</p><p>○ 列表、字典、集合可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为==可变数据对象==(mutable object)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">4</span>,<span class="number">5</span>]]<span class="comment"># 可变数据对象，有影响</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment"># 不可变数据对象，没有影响</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b[:]</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="内存管理" scheme="https://mycpen.github.io/blog/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>09_Python-CSDN_上下文管理器</title>
    <link href="https://mycpen.github.io/blog/posts/8c5f09830765.html"/>
    <id>https://mycpen.github.io/blog/posts/8c5f09830765.html</id>
    <published>2022-09-01T09:00:00.000Z</published>
    <updated>2022-09-01T09:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="09-Python-上下文管理器"><a href="#09-Python-上下文管理器" class="headerlink" title="09_Python-上下文管理器"></a>09_Python-上下文管理器</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h2><blockquote><p>● 介绍</p><p>上下文管理器是装饰器的近亲，与装饰器类似的，它们都是包装其他代码的工具</p><p>○ 装饰器：包装用于定义的代码块</p><p>○ 上下文管理器：可以包装任意格式的代码块</p><p><strong>上下文管理器是一个包装任意代码块的对象，上下文管理器保证:</strong></p><p>○ 进入上下文管理器时，每次代码执行的一致性</p><p>○ 当退出上下文管理器时，相关的资源会被正确地回收（即使内部代码出错，退出步骤也执行）</p><p><strong>上下文管理器的应用</strong></p><p>○ 上下文管理器被用到最多的就是——作为确保资源正确清理的一种方式</p></blockquote><hr><h2 id="二-语法"><a href="#二-语法" class="headerlink" title="二. 语法"></a>二. 语法</h2><blockquote><p><strong>with语句</strong></p><p>○ python2.5中加入的关键字with</p><p>○ with语句仅仅能对支持上下文管理协议的对象使用。</p><p>○ with语句的表达式的作用是返回一个遵循特定协议的对象，具体来说，该对象必须定义一个==__enter__==方法和==__exit__==方法</p><p><strong>with语句执行的解析</strong></p><p>○ 语法：with context_expr as cm:  do_sth()</p><p>○ 当with语句执行时，便执行上下文表达式（context_expr）来获得一个上下文管理器对象，上下文管理器的职责是提供一个上下文对象，用于在with语句块中处理细节：</p><p>​        ○ 一旦获得了上下文对象，就会调用它的__enter__()方法</p><p>​        ○ 将完成with语句块执行前的所有准备工作</p><p>​        ○ 如果with语句后面跟了as语句，==方法返回的结果==会被赋值给as关键字后面的变量</p><p>​        ○ 除了self参数，__enter__方法不接受任何其他参数。</p><p>​        ○ __enter__方法一般负责执行一些配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：上下文管理器 基本语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、普通方法打开文件对象</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)  <span class="comment"># a+ 追加写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(fp))</span><br><span class="line"><span class="comment">#结果为 [ …&#x27;__enter__&#x27;, …, &#x27;__exit__&#x27;…]</span></span><br><span class="line"><span class="comment">#注：有__enter__、__exit__方法，是上下文管理器</span></span><br><span class="line">fp.write(<span class="string">&quot;this is test&quot;</span>)</span><br><span class="line">fp.close()  <span class="comment">#注：处理结束后，把它关掉，不然占资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、用with语句执行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:    <span class="comment">#注：赋给f对象</span></span><br><span class="line">    f.write(<span class="string">&quot;write test&quot;</span>)</span><br><span class="line">    <span class="comment">#退出语句执行之后 with自动回收对象</span></span><br><span class="line">    <span class="comment">#因为打开的文件对象是上下文管理器</span></span><br><span class="line">    <span class="comment">#注：open(&quot;test.txt&quot;,&quot;a+&quot;):上下文表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>语句执行的解析</span><br><span class="line">○ 当<span class="keyword">with</span>语句块结束时，无论是正常结束，还是由于异常，都会调用上下文对象的__exit__()方法</span><br><span class="line">○ __exit__()方法有<span class="number">3</span>个参数</span><br><span class="line">○ 如果<span class="keyword">with</span>语句正常结束，三个参数全部都是 <span class="literal">None</span></span><br><span class="line">○ 如果发生异常，三个参数的值分别等于调用sys.exc_info()函数返回的三个值：类型（异常类）、值（异常实例）和跟踪记录（traceback），相应的跟踪记录对象。</span><br><span class="line">○ 因为上下文管理器主要作用于共享资源，__enter__()和__exit__()方法基本是完成的是分配和释放资源的低层次工作，比如：数据库连接、锁分配、信号量加/减、状态管理、文件打开/关闭、异常处理等</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-异常处理"><a href="#三-异常处理" class="headerlink" title="三. 异常处理"></a>三. 异常处理</h2><blockquote><p>● 异常处理</p><p><strong>上下文管理器必须定义__exit__方法，该方法可以选择性地处理包装代码块中出现的异常，或者处理其他需要关闭上下文状态的事情</strong></p><p><strong>__exit__方法接收了异常信息，就有处理这个异常的义务，通常可以做以下几件：</strong></p><p>○ 传播异常</p><p>○ 中止异常</p><p>○ 抛出不同异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：__exit__</span></span><br><span class="line"><span class="comment">#__exit__ 接受三个参数  异常类，异常值，回溯信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上下文管理器  传播异常  终止异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> exc_val: <span class="comment">#注：如果有异常发生</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;My exception: <span class="subst">&#123;exc_val&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># return False   #注：传播异常，给解释器识别</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>     <span class="comment">#注：中止异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyException():<span class="comment">#使用上下文管理器</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)  <span class="comment">#注：没有异常，输出为2</span></span><br><span class="line"><span class="keyword">with</span> MyException():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)  <span class="comment">#注：False时 有异常</span></span><br><span class="line"><span class="comment">#False时 结果为 My exception: division by zero</span></span><br><span class="line"><span class="comment">#True时 结果为</span></span><br><span class="line"><span class="comment"># My exception: division by zero#注：True时  不报错，程序不中断</span></span><br><span class="line"><span class="comment">#注：True时 把异常传递出去，给解释器知道</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end......&quot;</span>)</span><br><span class="line"><span class="comment">#注：return False 不会执行 end......</span></span><br><span class="line"><span class="comment">#注：return True  执行了   end......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：如果是ValueError异常，终止异常；如果不是，传播异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">issubclass</span>(exc_type, ValueError): <span class="comment">#注：如果是ValueError异常及子类异常</span></span><br><span class="line">        <span class="comment"># if exc_type == ValueError:  #注：exc_type是类，所以判断条件ValueError类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment">#终止异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment">#传播异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyException():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;test value error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：issubclass(exc_type, ValueError) 如果是ValueError异常及子类异常</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="四-contextlib模块"><a href="#四-contextlib模块" class="headerlink" title="四. contextlib模块"></a>四. contextlib模块</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● contextlib模块</span><br><span class="line"></span><br><span class="line">contextlib模块介绍</span><br><span class="line">○ contextlib模块实现上下文自动管理</span><br><span class="line">○ 这个生成器可以用更简单的方法创建上下文管理器</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：contextlib实现上下文管理器</span></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mycontext</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;enter context&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span>   <span class="comment">#注：生成器函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;exit context&quot;</span>)</span><br><span class="line"></span><br><span class="line">c1 = mycontext()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(c1))</span><br><span class="line"><span class="comment">#结果为 […&#x27;__enter__&#x27;,  &#x27;__exit__&#x27;…]</span></span><br><span class="line"><span class="comment">#注：使用装饰器后 就是上下文管理器了。不使用装饰器，只是生成器对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> c1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xxxxxxxxxx&quot;</span>)</span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line"><span class="comment"># enter context</span></span><br><span class="line"><span class="comment"># xxxxxxxxxx</span></span><br><span class="line"><span class="comment"># exit context</span></span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="上下文管理器" scheme="https://mycpen.github.io/blog/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>08_Python-CSDN_面向对象练习</title>
    <link href="https://mycpen.github.io/blog/posts/a708fe9e2814.html"/>
    <id>https://mycpen.github.io/blog/posts/a708fe9e2814.html</id>
    <published>2022-09-01T08:50:00.000Z</published>
    <updated>2022-09-01T08:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="08-Python-面向对象练习"><a href="#08-Python-面向对象练习" class="headerlink" title="08_Python-面向对象练习"></a>08_Python-面向对象练习</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><p><a href="https://www.runoob.com/python3/python3-class.html">菜鸟教程：面向对象<br>https://www.runoob.com/python3/python3-class.html</a></p><hr><h2 id="一-回合制对战游戏"><a href="#一-回合制对战游戏" class="headerlink" title="一. 回合制对战游戏"></a>一. 回合制对战游戏</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● ①、回合制对战游戏</span><br><span class="line"></span><br><span class="line"> ○回合制对战游戏</span><br><span class="line"> ●创建角色：名字、性别、血量、装备  ●战斗</span><br><span class="line"> ●创建房间：                          ●装备-防弹衣</span><br><span class="line"> ●角色可加入房间                      ●血量默认100</span><br><span class="line"> ●房间内的人可互打                    ●正常被攻击-10滴血</span><br><span class="line"> ●房间上限2人                        ●有防弹衣-5滴血</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,blood=<span class="number">100</span>,body_armor=<span class="literal">None</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.blood = blood</span><br><span class="line">        self.body_armor = body_armor</span><br><span class="line">        self.room = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.room == other.room:<span class="comment"># 注：同一房间</span></span><br><span class="line">            <span class="keyword">if</span> self != other:<span class="comment"># 注：不同的人</span></span><br><span class="line">                <span class="keyword">if</span> self.blood &gt; <span class="number">0</span> <span class="keyword">and</span> other.blood &gt; <span class="number">0</span>:</span><br><span class="line">                    reduce_blood = <span class="number">5</span> <span class="keyword">if</span> other.body_armor <span class="keyword">else</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 注：body_armor为假 返回10(没有设置防弹衣)</span></span><br><span class="line">                    other.blood -= reduce_blood</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>攻击<span class="subst">&#123;other.name&#125;</span> <span class="subst">&#123;reduce_blood&#125;</span>点血量\t<span class="subst">&#123;self.name&#125;</span>当前血量：<span class="subst">&#123;self.blood&#125;</span>\t<span class="subst">&#123;other.name&#125;</span>当前血量：<span class="subst">&#123;other.blood&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;其中一方已死亡，不能攻击&quot;</span>)</span><br><span class="line">                    exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你不能攻击自己&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;攻击对象，不在同一个房间&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.member = []</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">join</span>(<span class="params">self,role</span>):</span><br><span class="line">        <span class="keyword">if</span> role.room == <span class="literal">None</span>:</span><br><span class="line"><span class="comment"># 注：在角色的类里定义的属性room</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.member) &lt; <span class="number">2</span>:</span><br><span class="line">                self.member.append(role)</span><br><span class="line"><span class="comment"># 注：member房间的属性，房间只能加2个人 所以&lt;2</span></span><br><span class="line">                role.room = self.name</span><br><span class="line"><span class="comment"># 注：达到条件，定义角色加入到 某个房间</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;此房间已满&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此角色已经加入房间了&quot;</span>)</span><br><span class="line"></span><br><span class="line">role_dict = &#123;&#125;  <span class="comment"># 存放初始化实例# 注：存放名字和对象的关系</span></span><br><span class="line">room_dict = &#123;&#125;  <span class="comment"># 存放初始化实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建角色\t2.创建房间\t3.加入房间\t4.开始战斗\t5.退出&quot;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                name, sex = <span class="built_in">input</span>(<span class="string">&quot;请输入角色的姓名与性别，空格隔开\n&quot;</span>).split()</span><br><span class="line"><span class="comment">#注：split()是为了 分割 将字符 赋给2个变量</span></span><br><span class="line">                role_dict[name] = Role(name, sex)</span><br><span class="line">                def_blood = <span class="built_in">input</span>(<span class="string">&quot;输入自定义血量\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> def_blood.isdigit():</span><br><span class="line">                    role_dict[name].blood = <span class="built_in">int</span>(def_blood)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;自定义成功，用户<span class="subst">&#123;name&#125;</span>当前血量<span class="subst">&#123;role_dict[name].blood&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;自定义失败，用户<span class="subst">&#123;name&#125;</span>当前血量<span class="subst">&#123;role_dict[name].blood&#125;</span>&quot;</span>)</span><br><span class="line">                wear_body_armor = <span class="built_in">input</span>(<span class="string">&quot;输入y装备防弹衣\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> wear_body_armor == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                    role_dict[name].body_armor = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入房间的名字\n&quot;</span>)</span><br><span class="line">                room_dict[name] = Room(name)</span><br><span class="line"><span class="comment"># 注：创建好的对象(实例化对象) 保存在字典里</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;当前角色有<span class="subst">&#123;role_dict.keys()&#125;</span>，当前房间有<span class="subst">&#123;room_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                role_name, room_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要加入的角色和房间名，空格隔开\n&quot;</span>).split()</span><br><span class="line"><span class="comment"># 注：这里可以做1个判断 (考虑到各种情况)</span></span><br><span class="line">                room_dict[room_name].join(role_dict[role_name])</span><br><span class="line"><span class="comment"># 注：从字典 取出房间对象，调用房间对象的join()方法</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;当前房间有<span class="subst">&#123;room_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                room_name = <span class="built_in">input</span>(<span class="string">&quot;请输入房间的名字\n&quot;</span>)<span class="comment"># 注：选择房间</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(room_dict[room_name].member) == <span class="number">2</span>:</span><br><span class="line"><span class="comment"># 注：len()==2 这是保证房间里有2个人  才能对打</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        room_dict[room_name].member[<span class="number">0</span>].attack(room_dict[room_name].member[<span class="number">1</span>])</span><br><span class="line">                        room_dict[room_name].member[<span class="number">1</span>].attack(room_dict[room_name].member[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 注：通过字典获取房间实例对象，member是房间的属性</span></span><br><span class="line"><span class="comment"># 注：为什么房间实例能获取到创建角色类的对象？因为选项3 是角色类属性 加入 房间member属性，保证了这一步能调用成功实例化对象</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;房间<span class="subst">&#123;room_name&#125;</span>人数不足2人，对战失败！&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出对战&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20220505044926926.png" alt="image-20220505044926926"></p></blockquote><hr><h2 id="二-模拟ATM"><a href="#二-模拟ATM" class="headerlink" title="二. 模拟ATM"></a>二. 模拟ATM</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">● ②、模拟ATM</span><br><span class="line"></span><br><span class="line">○模拟ATM</span><br><span class="line">●1、创建ATM</span><br><span class="line">    ○ATM里的总金额</span><br><span class="line">    ○ATM可向里面加钱</span><br><span class="line">    ○ATM里的钱取出来</span><br><span class="line"></span><br><span class="line">●2、创建账户去取钱</span><br><span class="line">    ○账户属性   名称、余额、密码</span><br><span class="line">    ○账户要选择1台ATM进行操作</span><br><span class="line">    ○可以取钱、存钱、查询余额</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Atm</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,atm_total</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.atm_total = atm_total</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,money</span>):</span><br><span class="line">        self.atm_total += money</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;机器<span class="subst">&#123;self.name&#125;</span>增加金额<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前总金额为<span class="subst">&#123;self.atm_total&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrease</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.atm_total &lt; money:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>余额不足，取钱失败&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.atm_total -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;机器<span class="subst">&#123;self.name&#125;</span>取出金额<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前总金额为<span class="subst">&#123;self.atm_total&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,balance,passwd</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.passwd = passwd</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self,atm,money</span>):</span><br><span class="line">        <span class="keyword">if</span> money &lt;= self.balance:</span><br><span class="line">            <span class="keyword">if</span> money &lt;= atm.atm_total:</span><br><span class="line">                self.balance -= money</span><br><span class="line">                atm.atm_total -= money</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功取款<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ATM机 <span class="subst">&#123;atm.name&#125;</span>余额不足，取款失败！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;您输入的金额大于您的账户余额，取款失败！&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self,atm,money</span>):</span><br><span class="line">        self.balance += money</span><br><span class="line">        atm.atm_total += money</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功存款<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">look</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">atm_os</span>():</span><br><span class="line">    <span class="comment"># 管理员登录验证</span></span><br><span class="line">    name, paaswd = <span class="built_in">input</span>(<span class="string">&quot;请输入管理员账号和密码，空格隔开\n&quot;</span>).split()</span><br><span class="line">    <span class="keyword">if</span> (name, paaswd) <span class="keyword">in</span> admin_dict.items():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;管理员账号出错&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建ATM\t2.ATM加钱\t3.ATM取钱\t4.返回上一级&quot;</span>)</span><br><span class="line">        enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">            enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 1、创建ATM</span></span><br><span class="line">                <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                    name, atm_total = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称，总金额，空格隔开\n&quot;</span>).split()</span><br><span class="line">                    atm_total = <span class="built_in">int</span>(atm_total)</span><br><span class="line">                    atm_dict[name] = Atm(name,atm_total)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;创建ATM机 <span class="subst">&#123;name&#125;</span>成功，<span class="subst">&#123;name&#125;</span>当前总金额<span class="subst">&#123;atm_total&#125;</span>元&quot;</span>)</span><br><span class="line">                <span class="comment"># 2、ATM加钱</span></span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前存在的ATM机器：<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm_name = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> atm_name <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入金额\n&quot;</span>))</span><br><span class="line">                        atm_dict[atm_name].add(money)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm_name&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="comment"># 3、ATM取钱</span></span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前存在的ATM机器：<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm_name = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> atm_name <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入金额\n&quot;</span>))</span><br><span class="line">                        <span class="keyword">if</span> money &gt; <span class="number">0</span>:</span><br><span class="line">                            atm_dict[atm_name].decrease(money)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;取出的金额不能为负&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm_name&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;退出ATM操作&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-4选择操作&quot;</span>)</span><br><span class="line"><span class="comment"># 账户操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_os</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建账户\t2.取钱\t3.存钱\t4.查询余额\t5.返回上一级&quot;</span>)</span><br><span class="line">        enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">            enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 1、创建账户</span></span><br><span class="line">                <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                    name, balance, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入账户名称、余额和密码进行创建，空格分割\n&quot;</span>).split()</span><br><span class="line">                    balance = <span class="built_in">int</span>(balance)</span><br><span class="line">                    account_dict[name] = Account(name,balance,passwd)</span><br><span class="line">                    account_passwd[name] = passwd</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;创建用户 <span class="subst">&#123;name&#125;</span>成功，余额为<span class="subst">&#123;balance&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">2</span> <span class="keyword">or</span> enter_number == <span class="number">3</span> <span class="keyword">or</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前的ATM机有<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm, name, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入您选择的ATM机、您的账户名称和密码进行登陆，空格分割\n&quot;</span>).split()</span><br><span class="line">                    <span class="comment"># 验证ATM是否存在</span></span><br><span class="line">                    <span class="keyword">if</span> atm <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        <span class="comment"># 验证账户</span></span><br><span class="line">                        <span class="keyword">if</span> (name, passwd) <span class="keyword">in</span> account_passwd.items():</span><br><span class="line">                            atm = atm_dict[atm]</span><br><span class="line">                            <span class="comment"># 2、取钱</span></span><br><span class="line">                            <span class="keyword">if</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                                money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入取款金额\n&quot;</span>))</span><br><span class="line">                                account_dict[name].draw(atm, money)</span><br><span class="line">                            <span class="comment"># 3、存钱</span></span><br><span class="line">                            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                                money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入存款金额\n&quot;</span>))</span><br><span class="line">                                account_dict[name].save(atm, money)</span><br><span class="line">                            <span class="comment"># 4、查询余额</span></span><br><span class="line">                            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                                account_dict[name].look()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;账户错误&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;退出账户操作&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作&quot;</span>)</span><br><span class="line"></span><br><span class="line">admin_dict = &#123;<span class="string">&quot;admin&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125; <span class="comment"># 管理员信息</span></span><br><span class="line">account_passwd = &#123;&#125; <span class="comment"># 账户信息</span></span><br><span class="line">atm_dict = &#123;&#125;       <span class="comment"># 存放初始化实例</span></span><br><span class="line">account_dict = &#123;&#125;   <span class="comment"># 存放初始化实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择：1.ATM操作\t2.账户操作\t3.退出&quot;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># 1、ATM操作</span></span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                atm_os()</span><br><span class="line">            <span class="comment"># 2、账户操作</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                account_os()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出操作！&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-3选择操作&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-3选择操作&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20220505045128067.png" alt="image-20220505045128067"></p></blockquote><hr><h2 id="三-Linux用户管理类"><a href="#三-Linux用户管理类" class="headerlink" title="三. Linux用户管理类"></a>三. Linux用户管理类</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">● ③、Linux用户管理类</span><br><span class="line"></span><br><span class="line"> Linux用户管理类</span><br><span class="line"> ●基类：实现往linux系统里添加用户</span><br><span class="line"> ●子类A：</span><br><span class="line">   ○能够查看、修改uid和gid、shell等信息   ●子类C(A,B)：</span><br><span class="line"> ●子类B：                                  ○1.可以单独新建组</span><br><span class="line">   ○1.能删除用户                           ○2.可以将某个用户的gid修改为新建的组的gid</span><br><span class="line">   ○2.能删除组                             ○3.加入异常机制，异常的名字需要自己定义</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,name,passwd</span>):</span><br><span class="line">        subprocess.Popen(<span class="string">f&#x27;useradd <span class="subst">&#123;name&#125;</span> -p <span class="subst">&#123;passwd&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;<span class="subst">&#123;name&#125;</span>创建成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">look</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;cut -d &quot;:&quot; -f 1,3,4,7 /etc/passwd|grep -E ^<span class="subst">&#123;name&#125;</span>:&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">self,name,uid,gid,shell</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;usermod -u <span class="subst">&#123;uid&#125;</span> -g <span class="subst">&#123;gid&#125;</span> -s <span class="subst">&#123;shell&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;修改成功&quot; ||echo &quot;修改失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_user</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;userdel -r <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;删除成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_group</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;groupdel <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;删除成功&quot; ||echo &quot;删除失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line">    group_member = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">group_add</span>(<span class="params">self,gid,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;groupadd -g <span class="subst">&#123;gid&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;创建成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        C.group_member.append(gid)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gid_modify</span>(<span class="params">self,gid,name</span>):</span><br><span class="line">        <span class="keyword">if</span> gid <span class="keyword">in</span> C.group_member:</span><br><span class="line">            p = subprocess.Popen(<span class="string">f&#x27;usermod -g <span class="subst">&#123;gid&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;修改成功&quot; ||echo &quot;修改失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;修改失败，<span class="subst">&#123;gid&#125;</span>不是新建的组id&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefinedError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是自定义异常&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;请选择：</span></span><br><span class="line"><span class="string">1.添加用户\t2.查看uid、gid和shell信息\t3.修改uid、gid和shell信息</span></span><br><span class="line"><span class="string">4.删除用户\t5.删除组\t6.新建组\t7.修改用户gid\t8.触发异常\t9.退出&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                sample = Base()</span><br><span class="line">                name, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名和密码，空格分割\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.add(name, passwd)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                sample = A()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名\n&quot;</span>)</span><br><span class="line">                sample.look(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                sample = A()</span><br><span class="line">                name,uid,gid,shell = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名，修改后的uid、gid和shell，空格分割\n(4个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.modify(name,uid,gid,shell)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                sample = B()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名\n&quot;</span>)</span><br><span class="line">                sample.del_user(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                sample = B()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入组名\n&quot;</span>)</span><br><span class="line">                sample.del_group(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">6</span>:</span><br><span class="line">                sample = C()</span><br><span class="line">                name, gid = <span class="built_in">input</span>(<span class="string">&quot;请输入组名、指定的gid，空格分割\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.group_add(gid,name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">7</span>:</span><br><span class="line">                sample = C()</span><br><span class="line">                name, gid = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名、gid\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.gid_modify(gid,name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">raise</span> DefinedError</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出系统&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="OOP" scheme="https://mycpen.github.io/blog/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>07_Python-CSDN_高阶函数</title>
    <link href="https://mycpen.github.io/blog/posts/1b6c5e3fa07f.html"/>
    <id>https://mycpen.github.io/blog/posts/1b6c5e3fa07f.html</id>
    <published>2022-09-01T08:40:00.000Z</published>
    <updated>2022-09-01T08:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="07-Python-高阶函数"><a href="#07-Python-高阶函数" class="headerlink" title="07_Python-高阶函数"></a>07_Python-高阶函数</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">高阶函数：把函数作为参数传入，这样的函数称为高阶函数。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func01</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func02</span>(<span class="params">func,a,b</span>):   <span class="comment"># 注：把函数作为参数传递;func02称为高阶函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start func......&quot;</span>)</span><br><span class="line">    func(a,b)</span><br><span class="line"></span><br><span class="line">func02(func01,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>● map</p><p><strong>用Python-map代码实现：f(x)=x*x</strong></p><p>●内置函数map，map()函数接收两个参数，一个是==函数==，一个是==Iterable（可多个）。==</p><p>●map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><p>●map()传入的第一个参数是f，即函数对象本身。</p><p>●由于结果r是一个Iterator，Iterator是惰性序列。</p><p>●可通过list()函数让它把整个序列都计算出来并返回一个list。</p><p>●map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x**2，还可以计算任意复杂的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：map 映射</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">item</span>):         <span class="comment"># 接收1个参数item</span></span><br><span class="line">    <span class="keyword">return</span> item*item    <span class="comment"># 返回数的平方</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]       <span class="comment"># 注：a是可迭代对象</span></span><br><span class="line">result = <span class="built_in">map</span>(func, a)</span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment"># 注：返回 map对象</span></span><br><span class="line"><span class="comment">#结果为 &lt;map object at 0x0000020EDE156970&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 4, 9, 16, 25, 36]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：保留2位小数</span></span><br><span class="line">b = [<span class="number">1.239865</span>,<span class="number">4.56</span>,<span class="number">3.2</span>,<span class="number">9.82356</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">round</span>(x,<span class="number">2</span>), b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1.24, 4.56, 3.2, 9.82]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：转化为百分数，并且保留2位小数</span></span><br><span class="line">c = [<span class="number">0.000564</span>, <span class="number">0.456723</span>, <span class="number">0.5</span>, <span class="number">0.71345</span>]</span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">format</span>(x,<span class="string">&#x27;.2%&#x27;</span>), c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [&#x27;0.06%&#x27;, &#x27;45.67%&#x27;, &#x27;50.00%&#x27;, &#x27;71.34%&#x27;]</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>○ filter</p><p><strong>用Python-filter代码实现：在一个list中，删掉偶数，只保留奇数</strong></p><p>○Python内建的filter()函数用于过滤序列。和map()类似，filter()也接收一个函数和一个序列。</p><p>○filter()把传入的函数依次作用于每个元素，然后==根据返回值是True还是False决定保留还是丢弃==该元素。</p><p>○注意到filter()函数返回的是一个Iterator，也就是一个惰性序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：保留奇数</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func01</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span>   <span class="comment"># 注：保留奇数；返回结果true\false</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(func01, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 3, 5, 7]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：返回100以内的回数</span></span><br><span class="line">b = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>) <span class="comment"># 注：字符串反向切片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func02</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(x) == <span class="built_in">str</span>(x)[::-<span class="number">1</span>]</span><br><span class="line">result = <span class="built_in">filter</span>(func02, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：过滤出 1-100 以内 开平方根 是整数的数</span></span><br><span class="line"><span class="comment"># 方法：开平方后还在原列表里</span></span><br><span class="line"><span class="comment"># 过滤出 1-100 以内 开平方根 是整数的数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">c = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:sqrt(x) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>) , <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result)) <span class="comment"># 注：开平方后的数还在 c 里面</span></span><br><span class="line"><span class="comment">#结果为 [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><blockquote><p>● sorted</p><p><strong>用Python-sorted代码实现：按绝对值大小排序</strong></p><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序。</p><p>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p><p>对比原始的list和经过key=abs处理过的list：</p><p>●执行语句：==sorted([36, 5, -12, 9, -21], key=abs)==</p><ol><li><p>原始字符：list = [36, 5, -12, 9, -21]</p></li><li><p>经过key-abs对应得到：[36, 5, 12, 9, 21]</p></li><li><p>按照keys-abs排序结果：[5, 9, 12, 21, 36]</p></li><li><p>原始字符串最终结果：[5, 9, -12, -21, 36]</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：sorted(a)和a.sort()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>]<span class="comment"># 注：不会改变a的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)<span class="comment"># 注：从小到大排序</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()<span class="comment"># 注：会改变a的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：全为布尔型，可以排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="literal">True</span>,<span class="number">0</span>,<span class="literal">False</span>,<span class="string">&quot;c&quot;</span>==<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[<span class="number">0</span>, <span class="literal">False</span>, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：按照字符串长度排序</span></span><br><span class="line"><span class="comment"># 注：按照首字母的ASCII码排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;defg&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;sbbbfg&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;defg&#x27;</span>, <span class="string">&#x27;sbbbfg&#x27;</span>]</span><br><span class="line"><span class="comment"># 注：按照字符串长度排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a,key=<span class="built_in">len</span>)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;defg&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;sbbbfg&#x27;</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例4：元组排序</span></span><br><span class="line"><span class="comment"># 元组的排序，先比较第一个值，再比较第二个，依次类推</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="literal">True</span>,<span class="literal">False</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">0</span>), (<span class="literal">True</span>, <span class="literal">False</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a,reverse=<span class="literal">True</span>)<span class="comment"># 注：反序 reverse=True</span></span><br><span class="line">[(<span class="number">2</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="literal">True</span>, <span class="literal">False</span>)]</span><br></pre></td></tr></table></figure></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>○ reduce</p><p><strong>用Python-reduce代码实现：将列表[1,3,5,7,9]，变成整数13579</strong></p><p>○reduce把一个函数作用在一个序列[x1, x2, x3, …]上</p><p>○这个函数必须接收两个参数</p><p>○reduce把结果继续和序列的下一个元素做累积计算</p><p>○==reduce(f, [x1, x2, x3, x4]) =&gt; f(f(f(x1, x2), x3), x4)==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：[1,2,3,4] --&gt; 转化成1234</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce<span class="comment"># 注：导入模块</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x,y</span>):<span class="comment"># 注：这个函数接收2个参数</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line"><span class="built_in">print</span>(reduce(func1,a))</span><br><span class="line"><span class="comment">#结果为 1234</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：reduce 实现python的int功能</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;输入想要转化的数字：&quot;</span>)</span><br><span class="line">b = &#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;4&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;5&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>:<span class="number">6</span>,<span class="string">&#x27;7&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;8&#x27;</span>:<span class="number">8</span>,<span class="string">&#x27;9&#x27;</span>:<span class="number">9</span>,<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i:b.get(i),a))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">result = reduce(func,c)</span><br><span class="line"><span class="built_in">print</span>(result,<span class="built_in">type</span>(result))</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：实现阶乘</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入&quot;</span>))</span><br><span class="line">redu =reduce(<span class="keyword">lambda</span> x,y:x*y,<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(redu)</span><br><span class="line"><span class="comment">#结果为 输入:4</span></span><br><span class="line"><span class="comment">#24</span></span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="函数" scheme="https://mycpen.github.io/blog/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>06_Python-CSDN_psutil模块</title>
    <link href="https://mycpen.github.io/blog/posts/3b057ef47def.html"/>
    <id>https://mycpen.github.io/blog/posts/3b057ef47def.html</id>
    <published>2022-09-01T08:30:00.000Z</published>
    <updated>2022-09-01T08:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="06-Python-psutil模块"><a href="#06-Python-psutil模块" class="headerlink" title="06_Python-psutil模块"></a>06_Python-psutil模块</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">介绍</span><br><span class="line">● process and system utilities</span><br><span class="line">● 能够轻松的实现获取系统运行的进程和系统利用率（CPU、内存、磁盘、网络等）信息，主要应用于系统监控</span><br><span class="line">● 实现了同等命令命令行实现的功能：ps、top、lsof、netstat、ifconfig、who、df、kill、free、nice、ionice、iostat、iotop、uptime、pidof、tty、taskset、pmap等</span><br><span class="line">● 跨平台：linux、windows、OS X、FreeBSD和Sun Solaris等</span><br><span class="line">● 主要功能包含：CPU、磁盘、内存、网络、进程</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="二-安装"><a href="#二-安装" class="headerlink" title="二. 安装"></a>二. 安装</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">● 源码安装：git <span class="built_in">clone</span> https://github.com/giampaolo/psutil.git</span><br><span class="line"><span class="built_in">cd</span> psutil</span><br><span class="line">python3 setup.py install</span><br><span class="line">● 先安装相关库：yum install python3-devel,(用yum list |grep python|grep dev  找到包名)， pip3 install psutil</span><br><span class="line">● 导入使用模块： import psutil</span><br><span class="line"></span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum list |grep python |grep dev</span></span><br><span class="line">python36-devel.x86_64                                3.6.8-2.module_el8.1.0+245+c39af44f              @AppStream</span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum install python36-devel.x86_64</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># pip3 install psutil</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-获取系统基本信息"><a href="#三-获取系统基本信息" class="headerlink" title="三. 获取系统基本信息"></a>三. 获取系统基本信息</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、cpu</span><br><span class="line">● psutil.cpu_count(,[logical]):默认返回逻辑CPU的个数,当设置logical的参数为<span class="literal">False</span>时，返回物理CPU的个数</span><br><span class="line">● psutil.cpu_percent(,[percpu],[interval])：返回CPU的利用率,percpu为<span class="literal">True</span>时显示所有物理核心的利用率,interval不为<span class="number">0</span>时,则阻塞时显示interval执行的时间内的平均利用率</span><br><span class="line">● psutil.cpu_times(,[percpu])：以命名元组(namedtuple)的形式返回cpu的时间花费,percpu=<span class="literal">True</span>表示获取每个CPU的时间花费</span><br><span class="line">user：执行用户进程的时间</span><br><span class="line">system：执行内核进程时间</span><br><span class="line">idle：闲置的时间</span><br><span class="line">iowait：等待io操作的时间</span><br><span class="line">irp：硬中断时间</span><br><span class="line">softirq：软中断时间</span><br><span class="line">● psutil.cpu_times_percent(,[percpu])：功能和cpu_times大致相同，返回耗时比例</span><br><span class="line">● psutil.cpu_stats(): 以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数</span><br><span class="line">ctx_switches:上下文切换次数</span><br><span class="line">interrupts：中断次数</span><br><span class="line">soft_interrupts：软中断次数</span><br><span class="line">syscalls：系统调用次数，linux上始终为<span class="number">0</span></span><br><span class="line">● psutil.cpu_freq(): 返回cpu频率</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：返回CPU个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count()<span class="comment"># 注：返回逻辑CPU个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count(logical=<span class="literal">False</span>)<span class="comment"># 注：返回物理CPU个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># 示例2：CPU使用率 百分比利用率</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_percent()                                                                                                        </span><br><span class="line"><span class="number">0.1</span></span><br><span class="line"><span class="comment"># 示例3：cpu_times</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times()<span class="comment"># 注：花费的时间占用总时间的百分比</span></span><br><span class="line">scputimes(user=<span class="number">105.27</span>, nice=<span class="number">0.1</span>, system=<span class="number">81.87</span>, idle=<span class="number">69229.05</span>, iowait=<span class="number">11.17</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">5.25</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br><span class="line"><span class="comment"># 示例4：返回每个核的利用率</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_percent(percpu = <span class="literal">True</span>)</span><br><span class="line">[<span class="number">0.1</span>, <span class="number">0.1</span>]</span><br></pre></td></tr></table></figure></blockquote><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、memory</span><br><span class="line">● virtual_memory():以命名元组的形式返回内存使用情况,单位为字节</span><br><span class="line">total:总物理内存</span><br><span class="line">available:可用内存，available ～free + buffers + cached</span><br><span class="line">percent:使用率： percent = (total - available) / total * <span class="number">100</span></span><br><span class="line">used：使用的内存： used  =  total - free - buffers - cache</span><br><span class="line">free：完全没用使用内存</span><br><span class="line">active：最近被访问的内存</span><br><span class="line">inactive：长时间未被访问的内存</span><br><span class="line">buffers：缓存</span><br><span class="line">cached：缓存</span><br><span class="line">slab：内核数据结构缓存的内存</span><br><span class="line">● swap_memory：以命名元组的形式返回swap/memory使用情况，包含swap中页的换入和换出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：virtual_memory</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.virtual_memory()</span><br><span class="line">svmem(total=<span class="number">3953979392</span>, available=<span class="number">3447025664</span>, percent=<span class="number">12.8</span>, used=<span class="number">249577472</span>, free=<span class="number">3045027840</span>, active=<span class="number">350208000</span>, inactive=<span class="number">329723904</span>, buffers=<span class="number">2162688</span>, cached=<span class="number">657211392</span>, shared=<span class="number">12365824</span>, slab=<span class="number">117297152</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="disk"><a href="#disk" class="headerlink" title="disk"></a>disk</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、disk（linux命令：iostat，df）</span><br><span class="line">● psutil.disk_io_counters([perdisk])：以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等</span><br><span class="line">● psutil.disk_partitions(）:磁盘挂载分区信息</span><br><span class="line">device：分区</span><br><span class="line">mountpoint：挂载点</span><br><span class="line">fstype：文件系统格式（fat、ext4、 xfs）</span><br><span class="line">opts：挂载参数</span><br><span class="line">● disk_usage：磁盘使用情况，需要传入一个路径参数</span><br><span class="line">&gt;&gt;&gt; psutil.disk_usage(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">sdiskusage(total=<span class="number">250685575168</span>, used=<span class="number">103938019328</span>, free=<span class="number">134242258944</span>, percent=<span class="number">43.6</span>)</span><br><span class="line">● iostat   ：  %util 数值越大越忙碌，到达了io瓶颈（安装包：yum install sysstat）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：磁盘挂载分区信息 disk_partitions</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_partitions()                                                                                                                </span><br><span class="line">[sdiskpart(device=<span class="string">&#x27;/dev/mapper/centos-root&#x27;</span>, mountpoint=<span class="string">&#x27;/&#x27;</span>, fstype=<span class="string">&#x27;xfs&#x27;</span>, opts=<span class="string">&#x27;rw,relatime,attr2,inode64,noquota&#x27;</span>), sdiskpart(device=<span class="string">&#x27;/dev/sda1&#x27;</span>, mountpoint=<span class="string">&#x27;/boot&#x27;</span>, fstype=<span class="string">&#x27;xfs&#x27;</span>, opts=<span class="string">&#x27;rw,relatime,attr2,inode64,noquota&#x27;</span>)]</span><br><span class="line"><span class="comment"># 示例2：磁盘使用情况 disk_usage</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_usage(<span class="string">&quot;/&quot;</span>)<span class="comment"># 注：需要接挂载点</span></span><br><span class="line">sdiskusage(total=<span class="number">18238930944</span>, used=<span class="number">2300264448</span>, free=<span class="number">15938666496</span>, percent=<span class="number">12.6</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、Network（linux命令：ifconfig、who、uptime，netstat）</span><br><span class="line">● psutil.net_io_counters([pernic])：以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为<span class="literal">True</span>时，则列出所有网卡的统计信息</span><br><span class="line">● psutil.net_connections([kind])：以列表的形式返回每个网络连接的详细信息(namedtuple)</span><br><span class="line">fd：文件描述符</span><br><span class="line">family：地址簇，ipv4（AF_INET），ipv6</span><br><span class="line"><span class="built_in">type</span>：SOCK_STREAM（tcp）、udp</span><br><span class="line">laddr:本地ip地址</span><br><span class="line">raddr</span><br><span class="line">status</span><br><span class="line">pid</span><br><span class="line">● psutil.net_if_addrs()：以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址</span><br><span class="line">● psutil.net_if_stats()：返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu</span><br><span class="line">mtu：最大传输单元</span><br><span class="line">● psutil.users()：以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端</span><br><span class="line">● psutil.boot_time()：以时间戳的形式返回系统的启动时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：psutil.users 以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.users()<span class="comment"># 注：w、who命令</span></span><br><span class="line">[suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;tty1&#x27;</span>, host=<span class="string">&#x27;&#x27;</span>, started=<span class="number">1606217600.0</span>, pid=<span class="number">708</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/0&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606361216.0</span>, pid=<span class="number">5921</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/2&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606361216.0</span>, pid=<span class="number">5942</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/6&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606354816.0</span>, pid=<span class="number">5239</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/7&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606357120.0</span>, pid=<span class="number">5312</span>)]</span><br><span class="line"><span class="comment"># 示例2：net_if_addrs</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.net_if_addrs()<span class="comment"># 注：lo本地回环地址 127.0.0.1</span></span><br><span class="line">&#123;<span class="string">&#x27;lo&#x27;</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">&#x27;127.0.0.1&#x27;</span>, netmask=<span class="string">&#x27;255.0.0.0&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">&#x27;::1&#x27;</span>, netmask=<span class="string">&#x27;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">&#x27;00:00:00:00:00:00&#x27;</span>, netmask=<span class="literal">None</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)], <span class="string">&#x27;ens33&#x27;</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">&#x27;192.168.0.21&#x27;</span>, netmask=<span class="string">&#x27;255.255.255.0&#x27;</span>, broadcast=<span class="string">&#x27;192.168.0.255&#x27;</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">&#x27;fe80::22d8:5740:d6d7:d1ff%ens33&#x27;</span>, netmask=<span class="string">&#x27;ffff:ffff:ffff:ffff::&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">&#x27;00:0c:29:d1:80:fa&#x27;</span>, netmask=<span class="literal">None</span>, broadcast=<span class="string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>, ptp=<span class="literal">None</span>)]&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>、进程管理（linux命令：ps、kill）</span><br><span class="line">● psutil.pids()：以列表的形式返回当前正在运行的进程</span><br><span class="line">● psutil.pid_exists(<span class="number">1</span>)：判断给点定的pid是否存在</span><br><span class="line">● psutil.Process(<span class="number">1</span>)：对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号</span><br><span class="line">● psutil.process_iter()：迭代当前正在运行的进程，返回的是每个进程的Process对象</span><br><span class="line">name：获取进程的名称</span><br><span class="line">cmdline：获取启动进程的命令行参数</span><br><span class="line">create_time：获取进程的创建时间</span><br><span class="line">uids：进程uid信息</span><br><span class="line">num_threads：开启的线程数</span><br><span class="line">exe：进程工作的绝对路径</span><br><span class="line">kill：发送SIGKILL信号结束进程</span><br><span class="line"></span><br><span class="line">示例：process_iter 迭代当前正在运行的进程</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.process_iter()                                                                                                                   </span><br><span class="line">&lt;generator <span class="built_in">object</span> process_iter at <span class="number">0x7f56eb912888</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = psutil.process_iter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(p)</span><br><span class="line">psutil.Process(pid=<span class="number">1</span>, name=<span class="string">&#x27;systemd&#x27;</span>, status=<span class="string">&#x27;sleeping&#x27;</span>, started=<span class="string">&#x27;01:52:52&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="模块" scheme="https://mycpen.github.io/blog/tags/%E6%A8%A1%E5%9D%97/"/>
    
    <category term="psutil" scheme="https://mycpen.github.io/blog/tags/psutil/"/>
    
  </entry>
  
  <entry>
    <title>05_Python-CSDN_排序算法</title>
    <link href="https://mycpen.github.io/blog/posts/18b38ad7d56b.html"/>
    <id>https://mycpen.github.io/blog/posts/18b38ad7d56b.html</id>
    <published>2022-09-01T08:20:00.000Z</published>
    <updated>2022-09-01T08:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="05-Python-排序算法"><a href="#05-Python-排序算法" class="headerlink" title="05_Python-排序算法"></a>05_Python-排序算法</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-顺序查找"><a href="#一-顺序查找" class="headerlink" title="一. 顺序查找"></a>一. 顺序查找</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">● 顺序查找</span><br><span class="line">顺序查找：也叫线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span><br><span class="line">时间复杂度：O(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Linear_search</span>(<span class="params">li, val</span>):     <span class="comment"># 注：li列表 ；val待查找的元素</span></span><br><span class="line">    <span class="keyword">for</span> ind, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):       <span class="comment"># 注：因为要返回个下标 所以用 enumerate index和值都需要</span></span><br><span class="line">        <span class="keyword">if</span> v == val:    <span class="comment"># 注：如果v == 我们要找的那个值 那就返回 它的index</span></span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 如果for循环结束后还没有找到 返回None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=7">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=7</a><br><a href="https://www.runoob.com/python3/python-linear-search.html">菜鸟教程 Python线性查找<br>https://www.runoob.com/python3/python-linear-search.html</a></p></blockquote><hr><h2 id="二-二分查找"><a href="#二-二分查找" class="headerlink" title="二. 二分查找"></a>二. 二分查找</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">● 二分查找</span><br><span class="line">二分查找：又叫折半查找，从有序列表的初始候选区li[<span class="number">0</span>:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。</span><br><span class="line"></span><br><span class="line">时间复杂度：O(logn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val</span>): <span class="comment"># li 列表  val待查找的值</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:    <span class="comment"># 注：循环条件 说明候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span>   <span class="comment"># 注：中间值(下标) 是整除2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:  <span class="comment"># 注：== 找到的情况   每次对比都是对比的li[mid]</span></span><br><span class="line">            <span class="keyword">return</span> mid      <span class="comment"># 注：返回下标 mid</span></span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:  <span class="comment"># 注：代表 待查找的值val在 mid左边</span></span><br><span class="line">            right = mid - <span class="number">1</span>  <span class="comment"># 注：更新候选区了 这种情况就可以继续循环</span></span><br><span class="line">        <span class="keyword">else</span>:               <span class="comment"># 注：第3种情况 li[mid] &lt; val  待查找的值在mid右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span>   <span class="comment"># 注：更新候选区  继续循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>         <span class="comment"># 注：如果找不到的情况 即不满足 left &lt;= right 时</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(li,<span class="number">3</span>))       <span class="comment"># 注：调用二分查找 查3</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=8">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=8</a><br><a href="https://www.runoob.com/python3/python-binary-search.html">菜鸟教程 Python二分查找<br>https://www.runoob.com/python3/python-binary-search.html</a></p></blockquote><hr><h2 id="三-冒泡排序"><a href="#三-冒泡排序" class="headerlink" title="三. 冒泡排序"></a>三. 冒泡排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序：列表每两个相邻的数，如果前面比后面大，则交换这两个数。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort2</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line"></span><br><span class="line">改进：如果冒泡排序中的一趟排序没有发生交换，则说明列表已经有序，可以直接结束算法。</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_1</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span>        <span class="comment"># 在第i趟那加标志位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span> <span class="comment"># 注：如果有交换 把它识成True  交换这里也是1个标志位</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:    <span class="comment"># 注：如果每1趟结束后 exchange没有发生交换 (这个在for里面)</span></span><br><span class="line">            <span class="keyword">return</span>          <span class="comment"># 注：就直接结束掉这个函数</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=12">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=12</a><br><a href="https://www.runoob.com/python3/python-bubble-sort.html">菜鸟教程 Python冒泡排序<br>https://www.runoob.com/python3/python-bubble-sort.html</a></p></blockquote><hr><h2 id="四-选择排序"><a href="#四-选择排序" class="headerlink" title="四. 选择排序"></a>四. 选择排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">选择排序：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        <span class="keyword">if</span> min_loc != i:</span><br><span class="line">            li[i], li[min_loc] = li[min_loc], li[i]</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=14">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=14</a><br><a href="https://www.runoob.com/python3/python-selection-sort.html">菜鸟教程 Python选择排序<br>https://www.runoob.com/python3/python-selection-sort.html</a></p></blockquote><hr><h2 id="五-插入排序"><a href="#五-插入排序" class="headerlink" title="五. 插入排序"></a>五. 插入排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入排序：它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        li[j + <span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=15">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=15</a><br><a href="https://www.runoob.com/python3/python-insertion-sort.html">菜鸟教程 Python插入排序<br>https://www.runoob.com/python3/python-insertion-sort.html</a></p></blockquote><hr><h2 id="六-快速排序"><a href="#六-快速排序" class="headerlink" title="六. 快速排序"></a>六. 快速排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">快速排序：快速排序使用分治法（Divide <span class="keyword">and</span> conquer）策略来把一个序列（<span class="built_in">list</span>）分为较小和较大的<span class="number">2</span>个子序列，然后递归地排序两个子序列。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序-partition函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp: <span class="comment"># 从右边找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>          <span class="comment"># 往右走一步</span></span><br><span class="line">        li[left] = li[right]    <span class="comment"># 把右边的值写到左边空位上</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]    <span class="comment"># 把左边的值写到右边空位上</span></span><br><span class="line">    li[left] = tmp              <span class="comment"># 把tmp归位</span></span><br><span class="line">    <span class="keyword">return</span> left     <span class="comment"># mid 是 这个函数返回left值的目的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序-框架</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:    <span class="comment"># 至少2个元素</span></span><br><span class="line">        mid = partition(li, left, right)    <span class="comment"># 这个函数返回left值的目的</span></span><br><span class="line">        quick_sort(li, left, mid - <span class="number">1</span>)   <span class="comment"># 左边部分</span></span><br><span class="line">        quick_sort(li, mid + <span class="number">1</span>, right)  <span class="comment"># 右边部分</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br><span class="line">quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li)-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=16">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=16</a><br><a href="https://www.runoob.com/python3/python-quicksort.html">菜鸟教程 Python快速排序<br>https://www.runoob.com/python3/python-quicksort.html</a></p></blockquote><hr><h2 id="七-堆排序"><a href="#七-堆排序" class="headerlink" title="七. 堆排序"></a>七. 堆排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">堆排序：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):   <span class="comment"># 向下调整函数</span></span><br><span class="line">    <span class="comment"># li：列表</span></span><br><span class="line">    <span class="comment"># low: 堆的根节点位置</span></span><br><span class="line">    <span class="comment"># high: 堆的最后一个元素的位置</span></span><br><span class="line">    i = low <span class="comment"># i最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>   <span class="comment"># j开始是左孩子</span></span><br><span class="line">    tmp = li[low]   <span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:    <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]: <span class="comment"># 如果有孩子有并且比较大</span></span><br><span class="line">            j = j + <span class="number">1</span>   <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j       <span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment"># tmp更大，把tmp放到i的位置上</span></span><br><span class="line">            li[i] = tmp <span class="comment"># 该语句可省 # 把tmp放到某一级领导位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):    <span class="comment"># 建堆函数</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n-<span class="number">1</span>)    <span class="comment"># 这里不是递归</span></span><br><span class="line">    <span class="comment">#建堆完成了</span></span><br><span class="line"><span class="comment">#---------------------这一步 挨个出数的步骤</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>)  <span class="comment"># i-1是新的high</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=22">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=22</a><br><a href="https://www.runoob.com/python3/python-heap-sort.html">菜鸟教程 Python堆排序<br>https://www.runoob.com/python3/python-heap-sort.html</a></p></blockquote><hr><h2 id="八-归并排序"><a href="#八-归并排序" class="headerlink" title="八. 归并排序"></a>八. 归并排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">归并排序：创建在归并操作上的一种有效的排序算法。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i&lt;=mid <span class="keyword">and</span> j&lt;=high:   <span class="comment"># 只要左右两边都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while执行完，肯定有一部分没数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有2个元素，递归</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=30">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=30</a><br><a href="https://www.runoob.com/python3/python-merge-sort.html">菜鸟教程 Python归并排序<br>https://www.runoob.com/python3/python-merge-sort.html</a></p></blockquote><hr><h2 id="九-希尔排序"><a href="#九-希尔排序" class="headerlink" title="九. 希尔排序"></a>九. 希尔排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">希尔排序：希尔排序(Shell Sort)是一种分组插入排序算法。</span><br><span class="line">时间复杂度讨论比较复杂，并且和选取的gap序列有关。</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort_gap</span>(<span class="params">li, gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):   <span class="comment"># i 表示摸到的牌的下标</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap <span class="comment"># j指的是手里牌的下标</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j = j - gap</span><br><span class="line">        li[j+gap] = tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=34">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=34</a><br><a href="https://www.runoob.com/python3/python-shellsort.html">菜鸟教程 Python希尔排序<br>https://www.runoob.com/python3/python-shellsort.html</a></p></blockquote><hr><h2 id="十-计数排序"><a href="#十-计数排序" class="headerlink" title="十. 计数排序"></a>十. 计数排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">计数排序：计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。</span><br><span class="line">时间复杂度：O(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li, max_count=<span class="number">100</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=36">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=36</a><br><a href="https://www.runoob.com/python3/python-counting-sort.html">菜鸟教程 Python计数排序<br>https://www.runoob.com/python3/python-counting-sort.html</a></p></blockquote><hr><h2 id="十一-桶排序"><a href="#十一-桶排序" class="headerlink" title="十一. 桶排序"></a>十一. 桶排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">桶排序：首先将元素分在不同的桶中，在对每个桶中的元素排序。</span><br><span class="line">时间复杂度 取决于数据的分布</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li, n=<span class="number">100</span>, max_num=<span class="number">10000</span></span>):</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]    <span class="comment"># 创建桶</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var // (max_num // n), n-<span class="number">1</span>) <span class="comment"># i表示var放到几号桶里</span></span><br><span class="line">        buckets[i].append(var)  <span class="comment"># 把var加到桶里面</span></span><br><span class="line">        <span class="comment"># 保持桶内的顺序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">                buckets[i][j], buckets[i][j-<span class="number">1</span>] = buckets[i][j-<span class="number">1</span>], buckets[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    sorted_li = []</span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        sorted_li.extend(buc)</span><br><span class="line">    <span class="keyword">return</span> sorted_li</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=37">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=37</a><br><a href="https://www.runoob.com/w3cnote/bucket-sort.html">菜鸟教程 桶排序<br>https://www.runoob.com/w3cnote/bucket-sort.html</a></p></blockquote><hr><h2 id="十二-基数排序"><a href="#十二-基数排序" class="headerlink" title="十二. 基数排序"></a>十二. 基数排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">基数排序：基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。</span><br><span class="line">时间复杂度：O(kn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_buckets</span>(<span class="params">li, base, iteration</span>):</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(base)]</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> li:</span><br><span class="line">        digit = (number // (base ** iteration)) % base</span><br><span class="line">        buckets[digit].append(number)</span><br><span class="line">    <span class="keyword">return</span> buckets</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buckets_to_list</span>(<span class="params">buckets</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets <span class="keyword">for</span> x <span class="keyword">in</span> bucket]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li, base=<span class="number">10</span></span>):</span><br><span class="line">    maxval = <span class="built_in">max</span>(li)</span><br><span class="line">    it = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> base ** it &lt;= maxval:</span><br><span class="line">        li = buckets_to_list(list_to_buckets(list_to_buckets(li, base, it)))</span><br><span class="line">        it += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=39">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=39</a><br><a href="https://www.runoob.com/w3cnote/radix-sort.html">菜鸟教程 基数排序<br>https://www.runoob.com/w3cnote/radix-sort.html</a></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="算法" scheme="https://mycpen.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>04_Python-CSDN_mail模块</title>
    <link href="https://mycpen.github.io/blog/posts/312a4c8f922d.html"/>
    <id>https://mycpen.github.io/blog/posts/312a4c8f922d.html</id>
    <published>2022-09-01T08:10:00.000Z</published>
    <updated>2022-09-01T08:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="04-Python-mail模块"><a href="#04-Python-mail模块" class="headerlink" title="04_Python-mail模块"></a>04_Python-mail模块</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-理论"><a href="#一-理论" class="headerlink" title="一. 理论"></a>一. 理论</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mail模块作用</span><br><span class="line">1、邮件报警</span><br><span class="line">2、发送报表</span><br><span class="line"></span><br><span class="line">邮件协议</span><br><span class="line">1、smtp (simple mail transfer protocol) 简单邮件传输协议，主要用来发送文件  默认端口 25号</span><br><span class="line">2、pop3  主要用来接收邮件   默认端口 110    客户端的操作不会反馈到服务器端</span><br><span class="line">3、imap  主要用来接收邮件   默认端口 143    客户端的操作会反馈到服务器端</span><br><span class="line"></span><br><span class="line">[参考：菜鸟教程 https://www.runoob.com/python3/python3-smtp.html</span><br><span class="line">](https://www.runoob.com/python3/python3-smtp.html)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="二-步骤"><a href="#二-步骤" class="headerlink" title="二. 步骤"></a>二. 步骤</h2><h3 id="QQ邮箱获取授权码"><a href="#QQ邮箱获取授权码" class="headerlink" title="QQ邮箱获取授权码"></a>QQ邮箱获取授权码</h3><blockquote><p>○ QQ邮箱获取授权码</p><p>[参考：获取授权码]</p><p>(<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</a>)</p><p>先进入设置 －&gt; 帐户页面找到入口</p><p>（1）点击“开启”</p><p>（2）验证密保</p><p>（3）获取授权码</p><p><img src="https://image.cpen.top/image/image-20220505035438263.png" alt="image-20220505035438263"></p><p><img src="https://image.cpen.top/image/image-20220505035449933.png" alt="image-20220505035449933"></p><p><img src="https://image.cpen.top/image/image-20220505035503147.png" alt="image-20220505035503147"></p><p>或者开启IMAP/SMTP服务，同理</p><p><img src="https://image.cpen.top/image/image-20220505035521956.png" alt="image-20220505035521956"></p></blockquote><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">○ 代码部分</span><br><span class="line">□ 示例<span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP    <span class="comment"># 导入smtplib模块的SMTP类</span></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 发件人邮箱账号、授权码</span></span><br><span class="line">tolist = [<span class="string">&quot;1533431376@qq.com&quot;</span>]      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line">msg = <span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string">From: 848723505@qq.com@qq.com</span></span><br><span class="line"><span class="string">TO: 1533431376@qq.com</span></span><br><span class="line"><span class="string">Subject: mail module study</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this is cPen test</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">s.sendmail(<span class="string">&quot;848723505@qq.com&quot;</span>,tolist, msg)</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035651514.png" alt="image-20220505035651514"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">□ 示例<span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方smtp服务设置</span></span><br><span class="line">mail_host = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">mail_user = <span class="string">&quot;848723505@qq.com&quot;</span>  <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">mail_pass = <span class="string">&quot;hopo**secret**bbdj&quot;</span>  <span class="comment"># 发件人授权码</span></span><br><span class="line"></span><br><span class="line">recv = <span class="string">&quot;1533431376@qq.com&quot;</span>      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造邮件内容</span></span><br><span class="line"><span class="comment"># 正文内容、正文内容类型、正文内容编码</span></span><br><span class="line">message = MIMEText(<span class="string">&quot;Hello World ~ cPen&quot;</span>, <span class="string">&quot;plain&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># plain是普通的文本</span></span><br><span class="line"></span><br><span class="line">message[<span class="string">&quot;From&quot;</span>] = mail_user <span class="comment"># 把对象像字典一样传参</span></span><br><span class="line">message[<span class="string">&quot;To&quot;</span>] = recv</span><br><span class="line">message[<span class="string">&quot;Subject&quot;</span>] = <span class="string">&quot;I Love Coding&quot;</span></span><br><span class="line"></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 登录</span></span><br><span class="line">s.sendmail(mail_user,recv,message.as_string())    <span class="comment"># 文件内容需要转换成字符型</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035746706.png" alt="image-20220505035746706"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">□ 示例<span class="number">3</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方smtp服务设置</span></span><br><span class="line">mail_host = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">mail_user = <span class="string">&quot;848723505@qq.com&quot;</span>  <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">mail_pass = <span class="string">&quot;hopo**secret**bbdj&quot;</span>  <span class="comment"># 发件人授权码</span></span><br><span class="line"></span><br><span class="line">recv = <span class="string">&quot;1533431376@qq.com&quot;</span>      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把内容识别成网页传送</span></span><br><span class="line">html_msg = <span class="string">&quot; &lt;p&gt;Python mail module test&lt;/p&gt;&lt;p&gt;&lt;a href=&#x27;https://www.baidu.com&#x27;&gt;点击进入百度&lt;/a&gt;&lt;/p&gt;&quot;</span></span><br><span class="line">message = MIMEText(html_msg,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">message[<span class="string">&quot;From&quot;</span>] = mail_user <span class="comment"># 把对象像字典一样传参</span></span><br><span class="line">message[<span class="string">&quot;To&quot;</span>] = recv</span><br><span class="line">message[<span class="string">&quot;Subject&quot;</span>] = <span class="string">&quot;cPen mail&quot;</span></span><br><span class="line"></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 登录</span></span><br><span class="line">s.sendmail(mail_user,recv,message.as_string())    <span class="comment"># 文件内容转换成字符型</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035846092.png" alt="image-20220505035846092"></p></blockquote><h3 id="Foxmail登录"><a href="#Foxmail登录" class="headerlink" title="Foxmail登录"></a>Foxmail登录</h3><blockquote><p>○ Foxmail登录</p><p>[下载Foxmail客户端](<a href="https://www.foxmail.com/">https://www.foxmail.com/</a>)</p><p>先进入设置 －&gt; 新建账号，填入E-mail地址和授权码</p><p>□ 使用POP3协议登录</p><p><img src="https://image.cpen.top/image/image-20220505040116717.png" alt="image-20220505040116717"></p><p>□ 使用IMAP协议登录</p><p><img src="https://image.cpen.top/image/image-20220505040144841.png" alt="image-20220505040144841"></p><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505040202531.png" alt="image-20220505040202531"></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="模块" scheme="https://mycpen.github.io/blog/tags/%E6%A8%A1%E5%9D%97/"/>
    
    <category term="mail" scheme="https://mycpen.github.io/blog/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>03_Python-CSDN_数据类型2</title>
    <link href="https://mycpen.github.io/blog/posts/a22fdeba9b09.html"/>
    <id>https://mycpen.github.io/blog/posts/a22fdeba9b09.html</id>
    <published>2022-09-01T08:00:00.000Z</published>
    <updated>2022-09-01T08:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="03-Python-数据类型2"><a href="#03-Python-数据类型2" class="headerlink" title="03_Python-数据类型2"></a>03_Python-数据类型2</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><p>==容器类型==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4种内置数据结构（容器类型）</span><br><span class="line">列表：list=&gt;[val1,val2,val3,val4]</span><br><span class="line">元组：tuple=&gt;(val1,val2,val3,val4)</span><br><span class="line">字典：dict=&gt;&#123;key1:val1,key2:val2&#125;</span><br><span class="line">集合：set=&gt;&#123;key1,key2,key3,key4&#125;</span><br></pre></td></tr></table></figure><h2 id="一-列表（list）"><a href="#一-列表（list）" class="headerlink" title="一. 列表（list）"></a>一. 列表（list）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">列表是处理一组有序项目的数据结构</span><br><span class="line">列表是python中最具灵活性的有序集合对象类型</span><br><span class="line">列表可以包含任何类型的对象：字符串、数字甚至其他列表</span><br><span class="line">列表是可变的数据类型，即这种类型的值是可以被修改的</span><br><span class="line">Example:表示一个购物清单</span><br><span class="line">goods=[&#x27;牛奶&#x27;、&#x27;运动鞋&#x27;、&#x27;咖啡&#x27;、&#x27;手机&#x27;、&#x27;羊肉&#x27;、&#x27;葡萄&#x27;、&#x27;桔子&#x27;]</span><br><span class="line"></span><br><span class="line">列表通过方括号中用逗号分割的项目定义</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(lst)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = <span class="built_in">list</span>()<span class="comment"># 注：工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(lst2)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="comment"># 列表可装入python的任何对象：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst3 = <span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment"># 注：字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst3 </span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="number">2.5</span>,<span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="number">2.5</span>,<span class="literal">True</span>,lst3]<span class="comment"># 注：其他列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">2.5</span>, <span class="literal">True</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br></pre></td></tr></table></figure><h3 id="列表基本操作"><a href="#列表基本操作" class="headerlink" title="列表基本操作"></a>列表基本操作</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>​    通过下标访问列表中的元素，下标从0开始计数，可取出一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst += [<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span><span class="comment"># 注：内存地址不变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span><span class="comment"># 注：改变列表里的元素值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span></span><br><span class="line"><span class="comment"># 下标不能越界（Index Error:list index out of range）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">4</span>]<span class="comment"># 注：下标越界 会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切片是通过下标访问列表中的元素，切片可以取出一个子列表</span><br><span class="line">起止区间：[ start,end )</span><br><span class="line">step:默认=&gt;1</span><br><span class="line">start:默认=&gt;step为正时，start为0；step为负时,start为-1</span><br><span class="line">end:默认=&gt;step为正时，end为列表结尾；step为负时,end为列表开始</span><br><span class="line">注意：三个值都为选填项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：正切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">4</span>]<span class="comment"># 注：切片，前4个</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>[<span class="number">0</span>:<span class="number">4</span>]<span class="comment"># 注：切片，前4个</span></span><br><span class="line"><span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]<span class="comment"># 注：效果一样</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：负切片，步长为-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:<span class="number">3</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6， 3指向4，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:-<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6，-4指向3，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:-<span class="number">44</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6，-44越界，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6,  4指向5，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">3</span>:<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-3指向4， 4指向5，4向左取不到5</span></span><br><span class="line">[]<span class="comment"># 注：为空  起始位置有误时，切出来会是空(不会报错)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">切片对象(slice函数)</span><br><span class="line">slice函数的用途：生成一个slice对象，相当于可以给要切的内容取个名字。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>)<span class="comment"># 注：引用时需要传参进去</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;ee&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="string">&#x27;xx&#x27;</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">增加列表元素的方式</span><br><span class="line">append:在末尾，作为整体追加，类型不限</span><br><span class="line">insert:在index位置插入元素</span><br><span class="line">extend:扩展列表</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># append</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="number">123</span>, <span class="number">0.1111</span>, <span class="string">&quot;cali&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">&quot;test&quot;</span>)<span class="comment"># 注：追加字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="number">123</span>, <span class="number">0.1111</span>, <span class="string">&#x27;cali&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append(lst2)<span class="comment"># 注：追加的类型是数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]<span class="comment"># 注：追加的类型是数组</span></span><br><span class="line"><span class="comment"># insert</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.insert(<span class="number">1</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment"># 注：在第2个元素前插入数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment"># extend</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(<span class="built_in">str</span>)<span class="comment"># 注：扩展字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extend与+</span><br><span class="line">注意：只限可转为list的类型(str,list,tuple)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(a2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + [<span class="string">&quot;5&quot;</span>]<span class="comment"># 注：+ 法只能list 和 list 相加</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]<span class="comment"># 注：+ 法 运行结束后 数组a没有变化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a + [<span class="string">&quot;5&quot;</span>]<span class="comment"># 注：赋值给数组b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b<span class="comment"># 注：可以通过 赋值给数组b的方法来保存 变化</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273972677768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += [<span class="string">&quot;6&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273972677768</span><span class="comment"># 注：a += [&quot;6&quot;] 内存地址不变   对象不变，内容改变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a + [<span class="string">&quot;7&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273837551816</span><span class="comment"># 注：a = a + [&quot;7&quot;]内存地址改变</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除列表元素的方式</span><br><span class="line">pop：删除元素，默认最后一个（指定index删除）</span><br><span class="line">remove：删除指定的元素（要删除的数据不存在时，会出错）</span><br><span class="line">del：根据下标删除</span><br><span class="line">del是python的一个关键字，用于删除变量(的引用)</span><br><span class="line">clear：清空列表</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()<span class="comment"># 注：默认删除最后1个</span></span><br><span class="line"><span class="string">&#x27;7&#x27;</span><span class="comment"># 注：返回值，删除的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">2</span>)<span class="comment"># 注：指定索引2 删除第3个元素</span></span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;xx&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">&quot;xx&quot;</span>)<span class="comment"># 注：删除指定元素，只删除第1个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">&quot;zz&quot;</span>)<span class="comment"># 注：要删除的数据不存在时，会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;zz&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">3</span>]<span class="comment"># 注：删除索引3  第4个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>:<span class="number">2</span>]<span class="comment"># 注：切片删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c<span class="comment"># 注：del删除变量的引用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;c&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]<span class="comment"># 注：clear清空</span></span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>修改元素主要是利用下标和切片来修改或增加、删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 示例</span><br><span class="line">&gt;&gt;&gt; a = [1,2,3,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a[2] = &quot;x&quot;# 注：修改元素</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a[1:1]# 注：[1,1)</span><br><span class="line">[]# 注：为空</span><br><span class="line">&gt;&gt;&gt; a[1:1] = &quot;abc&quot;# 注：在起始位置 索引为1 处之前 增加列表 str类型转换为列表</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 2, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">&gt;&gt;&gt; b[2:2] = [&quot;x&quot;,&quot;y&quot;]# 注：索引为2处之前  增加列表</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[2:4] = [&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]# 注：索引2、3 的值 替换</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[1:5] = &quot;12&quot;# 注：切出来后，再转换为列表。str类型转换为列表</span><br><span class="line">&gt;&gt;&gt; b# 注：索引1、2、3、4 的值 替换 为 ‘1’‘2’</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[5:-3]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; b[3:-3]# 注：获取不到</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; b[3:-3] = &quot;xy&quot;# 注：这个位置开始(start位置开始)，替换成其他的list</span><br><span class="line">&gt;&gt;&gt; b# 注：看 找出的元素是否为空</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; c = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;1&quot;]</span><br><span class="line">&gt;&gt;&gt; c[1:4] = &quot;hello&quot;# 注：找出b c d  把bcd 替换成h e l l o</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br><span class="line">&gt;&gt;&gt; c = [&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br><span class="line">&gt;&gt;&gt; c[5:3]# 注：获取不到</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; c[5:3] = [&quot;x&quot;,&quot;y&quot;]# 注：c[5:3]为空，在 o (下标5)处插入x y</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br></pre></td></tr></table></figure><h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><p>​    反转列表-reverse 或 切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 1.负切片 实现反转，输出的值反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]<span class="comment"># 注：负切片</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身的值 没有反转</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 2.reverse 字符串的反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身的值 反转</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>​    列表排序-sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]<span class="comment"># 注：排序后  a本身的值发生改变</span></span><br><span class="line"><span class="comment"># 反向排序</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse=<span class="literal">True</span>)<span class="comment"># 注：反向排序，升序变成降序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]<span class="comment"># 注：从大到小排序</span></span><br><span class="line"><span class="comment"># 不支持int和str混合 的排序：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&lt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="comment"># 按 编码排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p>​    len、count、index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># len 总长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment"># count统计元素出现的次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># index返回元素所在的索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;z&quot;</span>)<span class="comment"># 注：index通过元素找索引，如果没有会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="string">&#x27;z&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>​    遍历：依次取出对象中的每一项数据</p><p>​    list是一个可迭代对象（iterable），可以直接用for遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.for i in a:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;item is ---&gt;<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">item <span class="keyword">is</span> ---&gt;x</span><br><span class="line">item <span class="keyword">is</span> ---&gt;y</span><br><span class="line">item <span class="keyword">is</span> ---&gt;x</span><br><span class="line">item <span class="keyword">is</span> ---&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.enumerate()函数  </span></span><br><span class="line"><span class="comment"># 特点：会返回元组，元组里包含每一个下标和值</span></span><br><span class="line"><span class="comment"># 注：用1个i去遍历，获取的是元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;item is ---&gt;<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">2</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 用2个临时变量，获取enumerate(a)元组的返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>--&gt;<span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span>--&gt;x</span><br><span class="line"><span class="number">1</span>--&gt;y</span><br><span class="line"><span class="number">2</span>--&gt;x</span><br><span class="line"><span class="number">3</span>--&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="判断成员关系"><a href="#判断成员关系" class="headerlink" title="判断成员关系"></a>判断成员关系</h4><p>​    判断列表中是否有某个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s, <span class="string">&#x27;在&#x27;</span> <span class="keyword">if</span> s <span class="keyword">in</span> lst <span class="keyword">else</span> <span class="string">&#x27;不在&#x27;</span>,<span class="string">&#x27;列表里&#x27;</span>)</span><br><span class="line">a 在 列表里</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>​    字符串(str)转列表(list)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;abc 123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="二-元组（tuple）"><a href="#二-元组（tuple）" class="headerlink" title="二. 元组（tuple）"></a>二. 元组（tuple）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元组是处理一组有序项目的数据结构</span><br><span class="line">元组和字符串一样是不可变的,即你不能修改元组</span><br><span class="line">元组可以包含任何类型的对象：字符串、数字甚至其他列表</span><br><span class="line">适应场景：性别选择，数据库的查询结果</span><br><span class="line">Example:表示一个购物清单</span><br><span class="line">goods=(&#x27;牛奶&#x27;、&#x27;运动鞋&#x27;、&#x27;咖啡&#x27;、&#x27;手机&#x27;、&#x27;羊肉&#x27;、&#x27;葡萄&#x27;、&#x27;桔子&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 元组通过圆括号中用逗号分割的项目定义</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>)<span class="comment"># 注：括号还可以代表集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="comment"># 元组中只有一个元素的时候，需要在元素后面加个，区分这个括号是表示结合还是表示元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,)<span class="comment"># 注：元组中只有1个元素时，需要加逗号(,)表示元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">tuple</span>()<span class="comment"># 注：定义空元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">()</span><br><span class="line"><span class="comment"># 元组可装入python的任何对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">1.2</span>, <span class="literal">True</span>, &lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;)</span><br></pre></td></tr></table></figure><h3 id="元组基本操作"><a href="#元组基本操作" class="headerlink" title="元组基本操作"></a>元组基本操作</h3><h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><p>​    通过下标访问列表中的元素，下标从0开始计数，可取出一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 下标不能越界，越界会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">tuple</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切片是通过下标访问元组中的元素，切片可以取出一个子元组</span><br><span class="line">起止区间：[start,end)</span><br><span class="line">step:默认=&gt;1</span><br><span class="line">start:默认=&gt;step为正时，start为0；step为负时,start为-1</span><br><span class="line">end:默认=&gt;step为正时，end为列表结尾；step为负时,end为列表开始</span><br><span class="line">注意：三个值都为选填项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">1.2</span>)</span><br></pre></td></tr></table></figure><h4 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">1.2</span>, <span class="literal">True</span>, &lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">1</span><span class="comment"># 注：报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu1 = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu2 = (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu3 = tu1 + tu2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu3</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="统计-1"><a href="#统计-1" class="headerlink" title="统计"></a>统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>)<span class="comment"># 注：返回值 是 元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>---<span class="subst">&#123;j&#125;</span>&quot;</span>)<span class="comment"># 注：用两个参数 来接收 返回值</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span>---<span class="number">1</span></span><br><span class="line"><span class="number">1</span>---<span class="number">2</span></span><br><span class="line"><span class="number">2</span>---<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="成员关系"><a href="#成员关系" class="headerlink" title="成员关系"></a>成员关系</h4><p>​    成员关系： in , not in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;a&quot;</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;d&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="三-字典（dict）"><a href="#三-字典（dict）" class="headerlink" title="三. 字典（dict）"></a>三. 字典（dict）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字典是Python中一个键值映射的数据结构</span><br><span class="line">字典是无序的</span><br><span class="line">字典是可变对象</span><br><span class="line">key必须是唯一的,so天生去重</span><br><span class="line">example:</span><br><span class="line">singer=&#123;key1:value,key2:value&#125;</span><br><span class="line">singer=&#123;&quot;李圣杰&quot;:&#x27;痴心绝对&#x27;,&#x27;张韶涵&#x27;:&#x27;阿刁&#x27;,&#x27;汪峰&#x27;:&#x27;普通迪斯高&#x27;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字典的定义</span><br><span class="line">字典的key必须是可hash对象</span><br><span class="line">python中所有字符串、数字、元组、布尔值、None都是可hash对象</span><br><span class="line">字典的value可以是任何值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;<span class="comment"># 注：定义空字典</span></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">dict</span>()<span class="comment"># 注：定义空字典，工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(c)<span class="comment"># 注：列表转换成字典  工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;root&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(e)<span class="comment"># 注：转换的对象要有 键值映射 的格式</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: cannot convert dictionary update sequence element <span class="comment">#0 to a sequence</span></span><br></pre></td></tr></table></figure><h3 id="字典基本操作"><a href="#字典基本操作" class="headerlink" title="字典基本操作"></a>字典基本操作</h3><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dicts[key]=&gt;当key不存在时，会引了KeyError错误</span><br><span class="line">用法2：dicts.get(key,default)=&gt;当key不存在时，返回default值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">4</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>]=<span class="number">3</span><span class="comment"># 注：修改key=”a”的 value 值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;c&#x27;</span>]=<span class="number">4</span><span class="comment"># 注：增加键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;c&#x27;</span>]<span class="comment"># 注：取值</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;d&#x27;</span>]<span class="comment"># 注：key不存在，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="comment"># 推荐使用get</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">&#x27;d&#x27;</span>)<span class="comment"># 注：不报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.get(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line"><span class="literal">None</span><span class="comment"># 注：默认值没有设置</span></span><br></pre></td></tr></table></figure><h4 id="增加-修改"><a href="#增加-修改" class="headerlink" title="增加/修改"></a>增加/修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：dicts[key]=value</span><br><span class="line">当key不存在时，表示增加一个键值对</span><br><span class="line">当key存在时，表示修改对应的value值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：修改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 示例：新增</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;d&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">False</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dicts.pop(key)</span><br><span class="line">用法2：dicts.popitem()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：dicts.pop(key)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;d&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="string">&#x27;a&#x27;</span>)<span class="comment"># 注：删除 key=‘a’ 的元素</span></span><br><span class="line"><span class="number">5</span><span class="comment"># 注：pop有返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.pop(<span class="string">&#x27;b&#x27;</span>)<span class="comment"># 注：获取返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"><span class="comment"># 示例：dicts.popitem()</span></span><br><span class="line"><span class="comment"># python3里面删除的是最后一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>,<span class="string">&quot;z&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dict1.update(dict2)=&gt;将dict2合并到dict1</span><br><span class="line">用法2：dict(dict1,**dict2)=&gt;将dict1与dict2合并生成一个新字典</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：dict1.update(dict2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&quot;q&quot;</span>:<span class="number">2</span>,<span class="string">&quot;w&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(b)<span class="comment"># 注：a自带的属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 示例：dict(dict1, **dict2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&quot;q&quot;</span>:<span class="number">2</span>,<span class="string">&quot;w&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(a,**b)<span class="comment"># 注：工厂函数，返回一个字典  a和b的合并</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身没有改变</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>()</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">dict</span>(a,**b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="成员关系-1"><a href="#成员关系-1" class="headerlink" title="成员关系"></a>成员关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line">item in dicts</span><br><span class="line">item not in dicts</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>,<span class="string">&quot;z&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> a<span class="comment"># 注：in  默认 对比的是key值</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> a.values()<span class="comment"># 注：a.values()对比的是value值</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h4><p>​    默认遍历的是 key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历key值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">x              <span class="comment"># 注：遍历key值</span></span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历value值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.values():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span>               <span class="comment"># 注：遍历value值</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 既想获得key  也想获得value</span></span><br><span class="line"><span class="comment"># items返回的是元组</span></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> a.items():<span class="comment"># 注：2个参数获取返回值key,value</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;key is <span class="subst">&#123;i&#125;</span>, value is <span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">key <span class="keyword">is</span> x, value <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">key <span class="keyword">is</span> y, value <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">key <span class="keyword">is</span> z, value <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 方式3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;key is <span class="subst">&#123;i[<span class="number">0</span>]&#125;</span>, value is <span class="subst">&#123;i[<span class="number">1</span>]&#125;</span>&quot;</span>)<span class="comment"># 注：索引获取参数</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">key <span class="keyword">is</span> x, value <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">key <span class="keyword">is</span> y, value <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">key <span class="keyword">is</span> z, value <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="四-集合（set）"><a href="#四-集合（set）" class="headerlink" title="四. 集合（set）"></a>四. 集合（set）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">集合是一个无序的，不重复的数据组合</span><br><span class="line">集合是一个只含有key的字典</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">集合的作用</span><br><span class="line">去重：把一个列表变成集合，就自动去重了</span><br><span class="line">关系测试：测试两组数据之前的交集、差集、并集等关系</span><br><span class="line">example:</span><br><span class="line">singer=&#123;&quot;李圣杰&quot;,&#x27;张韶涵&#x27;,&#x27;汪峰&#x27;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集合的定义</span><br><span class="line">集合通过花括号中，而各个元素用逗号分割</span><br><span class="line">集合元素必须是可hash对象，跟字典一样</span><br><span class="line">set和dict的唯一区别仅在于没有存储对应的value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空集合（2种方式）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment"># 注：第1种方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>()<span class="comment"># 注：第2种方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="集合基本操作"><a href="#集合基本操作" class="headerlink" title="集合基本操作"></a>集合基本操作</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法：s.add(item)=&gt;添加一项</span><br><span class="line">用法：s.update(someitems)=&gt;添加多项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(<span class="string">&quot;str&quot;</span>)<span class="comment"># 注：str被扩展进来，是一个一个被扩展进来的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(&#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># 注：字典  扩展的是 key值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：s.remove(item)=&gt;移除一项(item不存在会出错KeyError)</span><br><span class="line">用法2：s.discard(item)=&gt;移除一项(item不存在则什么也不做)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;p&#x27;</span>)<span class="comment"># 注：“p”不存在，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;p&#x27;</span></span><br><span class="line"><span class="comment"># discard</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.discard(<span class="string">&#x27;o&#x27;</span>)<span class="comment"># 注：不存在 不报错  什么也不做</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.discard(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">并集：t和s的并集,返回一个新的set包含s和t中的每一个元素</span><br><span class="line">交集:t和s的交集,返回一个新的set包含s和t中的公共元素</span><br><span class="line">差集:返回一个新的set包含s中有但是t中没有的元素</span><br><span class="line">对称差集:返回一个新的set包含s和t中不重复的元素（在t或s中，但不会同时出现在二者中）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;h&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.union(s2)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.intersection(s2)</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 - s2</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 注：s1里面有的,s2里面没有的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 - s1</span><br><span class="line">&#123;<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 ^ s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 注：除了交集 的部分</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="数据类型" scheme="https://mycpen.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>02_Python-CSDN_数据类型1</title>
    <link href="https://mycpen.github.io/blog/posts/30b8211579b9.html"/>
    <id>https://mycpen.github.io/blog/posts/30b8211579b9.html</id>
    <published>2022-09-01T07:50:00.000Z</published>
    <updated>2022-09-01T07:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="02-Python-数据类型1"><a href="#02-Python-数据类型1" class="headerlink" title="02_Python-数据类型1"></a>02_Python-数据类型1</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="Python数字"><a href="#Python数字" class="headerlink" title="Python数字"></a>Python数字</h3><p>在Python中有3种类型的数——整数、浮点数和复数</p><div class="table-container"><table><thead><tr><th>数字类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>整数</td><td>-2, 12389 <br/> 999999L, ∞ <br/> 0b1110, 0xabf, 0o126</td><td>python2中区分整型、长整型，长整型的整数可以 无穷大 <br/> python3中统称为整型 <br/> 整型的二进制，十六进制，八进制表示法</td></tr><tr><td>浮点数</td><td>-3.23, -52.3E-4</td><td>在 python 中可以用科学计数法表示浮点数</td></tr><tr><td>复数</td><td>-5+4j,2.3-4.6j</td><td>其中-5,4为实数，j为虚数</td></tr></tbody></table></div><ol><li><p>==int==</p><p>python3 中只有 int（可存超长数据）</p><p>| 整型进制表示法 |                                |                          |<br>| ——————— | ——————————————— | ———————————— |<br>| 进制           | 表示方法                       | 示例                     |<br>| 二进制         | 以0b开头，只能包含0、1，逢2进1 | 0b11，0b12（错误的表示） |<br>| 八进制         | 以0o开头，能包含0-7，逢8进1    | 0o11                     |<br>| 十六进制       | 以0x开头，能包含0-F，逢16进1   | 0x11                     |<br>| 十进制         | 直接由数字0-9组成，逢10进1     | 11                       |</p></li></ol><p>   整型进制操作</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进制转换-bin:任意进制转2进制,接收一个int,返回一个str</span><br><span class="line">进制转换-oct:任意进制转8进制,接收一个int,返回一个str</span><br><span class="line">进制转换-hex:任意进制转16进制,接收一个int,返回一个str</span><br><span class="line">进制转换-int:任意进制转10进制,接收一个int/str,返回一个int</span><br></pre></td></tr></table></figure>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">10</span>)<span class="comment"># 10进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0o71</span>)<span class="comment"># 8进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b111001&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0x11</span>)<span class="comment"># 16进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b10001&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="number">10</span><span class="comment"># str 转换成 int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;0o11&quot;</span>,base=<span class="number">8</span>)<span class="comment"># 8进制的字符串，要指定一下</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">0o11</span>)<span class="comment"># 8进制整型 直接转换</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><ol><li><p>==float==</p><p>float(浮点型)：浮点数即带有小数点的数字</p><p>​        float由整数位，小数点，小数位组成，也可以用科学计数法表示，例如-3.23，-52.3E-4，6.23E12</p><p>​        float是不精确的</p><p><strong>decimal模块</strong></p><p>​        Decimal类型数据是精确的小数，可以传递给Decimal整型或者字符串参数</p></li></ol><p>   官方文档    </p><p>   ​        float    <a href="https://docs.python.org/3/library/functions.html#float">https://docs.python.org/3/library/functions.html#float</a></p><p>   ​        decimal    <a href="https://docs.python.org/3/library/decimal.html?highlight=decimal">https://docs.python.org/3/library/decimal.html?highlight=decimal</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：浮点型数据float是不精确的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.7000000000000001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.6000000000000001</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：Decimal类型数据是精确的小数，可以传递给Decimal整型或者字符串参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> getcontext, Decimal, Context</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal.from_float(<span class="number">12.222</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;12.2219999999999995310417943983338773250579833984375&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal(<span class="number">0.9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;0.90000000000000002220446049250313080847263336181640625&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal(<span class="string">&quot;3.14&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;3.14&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li><p>==complex==</p><p>复数complex：复数就是实数和虚数的统称</p><p>在数学中的表示：复数的基本形式是a+bi,其中a,b是实数,a称为实部,bi称为虚部,i是虚数单位</p><p>complex的组成：复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span> + <span class="number">4j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.real</span><br><span class="line"><span class="number">5.0</span><span class="comment"># 存放的是浮点型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.imag</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h3><p>字符串：字符串是字符的序列</p><p>表示方法：单引号（’）；双引号（“）；三引号（’’’或”””）；原样输出</p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>单引(‘)</td><td>可引用包含双引号的字符串</td><td>‘say“hello”’</td></tr><tr><td>双引号(“)</td><td>可引用包含单引号的字符串</td><td>“What’syourname?”</td></tr><tr><td>三号引(‘’’或”””)</td><td>可引用一个多行的字符串，在三引号中可自由使用单引号和双引号</td><td>‘’’<br/>这是多行字符<br/>里面可包含单引号’和双引号”<br/>‘’’</td></tr><tr><td>特殊标记(r)</td><td>不使得转义字符，将字符原样输出</td><td>r”hello\tworld!”</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>t</span></span><br><span class="line"><span class="string"><span class="meta">... </span>e</span></span><br><span class="line"><span class="string"><span class="meta">... </span>s</span></span><br><span class="line"><span class="string"><span class="meta">... </span>t&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;\nt\ne\ns\nt&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">t</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">t</span><br><span class="line"><span class="comment"># print(a)按照规定的格式打印输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&quot;t1\nt2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">r&quot;t1\nt2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1\nt2</span><br></pre></td></tr></table></figure><ul><li><p>==转义字符==</p><p>​    转义字符是一种特殊的字符常量。转义字符以反斜线”\”开头，后跟一个或几个字符。转义字符具有特定的含义，不同于字符原有的意义，故称“转义”字符。</p></li></ul><div class="table-container"><table><thead><tr><th>转义字符</th><th>描述</th><th>转义字符</th><th>描述</th><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\(在行尾时)</td><td>续行符</td><td>\n</td><td>换行</td><td>\oyy</td><td>八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\\</td><td>反斜杠符号</td><td>\v</td><td>纵向制表符</td><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\‘</td><td>单引号</td><td>\t</td><td>横向制表符</td><td>\other</td><td>其它的字符以普通格式输出</td></tr><tr><td>\“</td><td>双引号</td><td>\r</td><td>回车</td><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\a</td><td>响铃</td><td>\f</td><td>换页</td><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td><td></td><td></td><td></td></tr></tbody></table></div><ol><li><p>==字符串取值==</p><p>​    下标取值法（注意：下标从0开始）</p><p>​    切片取值法</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;t&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">2</span>]<span class="comment"># 取下标为0~2的数据。包括0，不包括2</span></span><br><span class="line"><span class="string">&#x27;te&#x27;</span><span class="comment"># 前面包括，后面不包括</span></span><br></pre></td></tr></table></figure><p>字符串的不可变的序列</p><p>一旦创造了一个字符串，就不能再改变它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140585442705648</span></span><br></pre></td></tr></table></figure><p>级连字符串</p><p>如果把两个字符串相邻放着，它们会被python自动级连</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info = <span class="string">&quot;chen&quot;</span><span class="string">&quot;peng&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line"><span class="string">&#x27;chenpeng&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>==字符串常用方法==<ol><li>==字符串常用方法——判断系列（True/False）==</li></ol></li></ol><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>str.isdigit()</td><td>字符串中是否只包含数字</td></tr><tr><td>str.isnumeric()</td><td>字符串中是否只包含数字（包括中文一到九等）</td></tr><tr><td>str.isalnum()</td><td>字符串中是否只包含字母或数字</td></tr><tr><td>str.istitle()</td><td>字符串中是否每个单词首字母大写，其他字母小写</td></tr><tr><td>str.isalpha()</td><td>字符串中是否只包含字母（汉字会算作字母）</td></tr><tr><td>str.isupper()</td><td>字符串中是否全为大写</td></tr><tr><td>str.isidentifier()</td><td>字符串是否为合法标识符</td></tr><tr><td>str.isprintable()</td><td>字符串是否为可打印字符</td></tr><tr><td>str.islower()</td><td>字符串中是否全为小写</td></tr><tr><td>str.isspace()</td><td>字符串中是否只包含空格（tab也算空格）</td></tr><tr><td>str.startswith(prefix[,start[,end]])</td><td>字符串是否以某字符串开始，可以通过start和stop参数设置搜索范围</td></tr><tr><td>str.endswith(suffix[,start[,end]])</td><td>字符串是否以某个字符串结束，可以通过start和stop参数设置搜索范围</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">my_str = <span class="string">&quot;This Is TEST!&quot;</span></span><br><span class="line">my_title = <span class="string">&quot;This is My Title&quot;</span></span><br><span class="line">my_num = <span class="string">&quot;123&quot;</span></span><br><span class="line">my_num2 = <span class="string">&quot;一二三四&quot;</span></span><br><span class="line">my_str2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">my_str3 = <span class="string">&quot;hello123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断系列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num.isdigit())     <span class="comment"># 字符串中是否只包含数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num.isnumeric())   <span class="comment"># 字符串中是否只包含数字（包括中文一到九等）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num2.isdigit())    <span class="comment"># 只能判断阿拉伯数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num2.isnumeric())  <span class="comment"># 可以判断中文数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字母：&quot;</span>, my_str.isalpha())      <span class="comment"># 有空格/“!”会报错 # 判断字母（汉字会算作字母）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字母数字：&quot;</span>, my_str3.isalnum()) <span class="comment"># 有空格会报错 # 判断字母数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字符串是否以This开始&quot;</span>, my_title.startswith(<span class="string">&quot;This&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字符串是否以This结束&quot;</span>, my_title.endswith(<span class="string">&quot;This&quot;</span>))</span><br></pre></td></tr></table></figure><p>​        </p><p>​            2. ==字符串常用方法——查找统计类==</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>len(string)</td><td>统计字符串长度</td></tr><tr><td>str.index(sub[,start[,end]])</td><td>显示substring在字符串中第一次出现的下标位置，没有会报错</td></tr><tr><td>str.find(sub[,start[,end]])</td><td>查找substring,找到返回其起始位置，找不到返回-1</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 查找统计类</span></span><br><span class="line">my_str = <span class="string">&quot;This Is TEST!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;长度：&quot;</span>, <span class="built_in">len</span>(my_str))<span class="comment"># 空格、！占长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 第一次出现的位置&quot;</span>, my_str.index(<span class="string">&quot;i&quot;</span>))<span class="comment"># 字符串“i”第一次出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 第一次出现的位置&quot;</span>, my_str.find(<span class="string">&quot;i&quot;</span>))<span class="comment"># 字符串“i”第一次出现的位置，找不到返回-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 出现的次数&quot;</span>, my_str.count(<span class="string">&quot;i&quot;</span>))</span><br></pre></td></tr></table></figure><p>​        3. ==字符串常用方法——字符串转换类（返回一个新对象）==</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>str.upper()</td><td>将字符串转换为大写</td></tr><tr><td>str.lower()</td><td>将字符串转换为小写</td></tr><tr><td>str.title()</td><td>将字符串中的单词首字母大写，其他字母小写</td></tr><tr><td>str.split(‘sep’)</td><td>指定’sep’作为分隔符将字符串切割成列表，分隔符可以是任意字符（默认是空格）</td></tr><tr><td>‘str’.join(list)</td><td>将列表用str拼接成一个大字符串</td></tr><tr><td>str.strip([string])</td><td>去除字符串中首尾的字符串，不带参数默认去除空格</td></tr><tr><td>str.zfill(number)</td><td>返回指定长度的字符串，原字符串右对齐，前面填充0</td></tr><tr><td>str.replace(‘old’,’new’[,count])</td><td>用新的字符替换老字符，还可以指定替换的个数，默认全部替换</td></tr><tr><td>str.capitalize()</td><td>句子首字母大写</td></tr><tr><td>str.center(width[,fillchar])str.ljust(width[,fillchar])str.rjust(width[,fillchar])</td><td>返回一个原字符串居中(靠左/靠右)对齐，width为总长度，两边用一个字符fillchar填充，如果指定的长度小于原字符串的长度则返回原字符串</td></tr><tr><td>str.expandtabs(number)</td><td>将\t转换成number个空格</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 字符串转换类</span></span><br><span class="line">msg = <span class="string">&quot;  hEllo World Chen   &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大写&quot;</span>, msg.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小写&quot;</span>, msg.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标题&quot;</span>, msg.title())</span><br><span class="line"></span><br><span class="line">msg2 = <span class="string">&quot;root:x:0:0:root:/root:/bin/bash&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;切割：&quot;</span>, msg2.split(<span class="string">&quot;:&quot;</span>))</span><br><span class="line">msg3 = msg2.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拼接：&quot;</span>, <span class="string">&quot;#&quot;</span>.join(msg3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除首尾空白&quot;</span>, msg.strip(), <span class="string">&quot;######&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除root首尾：&quot;</span>, msg2.strip(<span class="string">&quot;root&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串填充：&quot;</span>, msg.zfill(<span class="number">40</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串替换&quot;</span>, msg2.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;%&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;整个字符串首字母大写&quot;</span>, msg.capitalize())</span><br><span class="line">msg4 = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg4.center(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.center(<span class="number">50</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.ljust(<span class="number">50</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.rjust(<span class="number">50</span>, <span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure><ol><li>==字符串拼接==</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 字符串拼接（+）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;I&#x27;</span> + <span class="string">&#x27;Love&#x27;</span> + <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">ILovePython</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串拼接（join）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Love&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(a))</span><br><span class="line">ILovePython</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 与 join的效率问题</span><br><span class="line">一般来说，+ 拼接 效率比 join 拼接低</span><br><span class="line">+拼接，每一次出现都会在内存中开辟1个新的空间，所有效率低，比较耗时</span><br><span class="line">join一次性拼接成1个大的字符串</span><br></pre></td></tr></table></figure><ol><li>==字符串格式化==</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化（%）</span><br><span class="line">基本格式</span><br><span class="line">%[(name)][flags][width].[precision]typecode</span><br><span class="line">-(name):命名</span><br><span class="line">-flags:+,-,&#x27;&#x27;或0。+表示右对齐；-表示左对齐；&#x27;&#x27;为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐，0表示使用0填充</span><br><span class="line">-width表示显示宽度</span><br><span class="line">-precision表示小数点后精度</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># %格式化 </span></span><br><span class="line">name = <span class="string">&quot;wen&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名： %s, 年龄： %s&quot;</span>%(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名： %s, 年龄： %s&quot;</span>%(age, <span class="string">&quot;wen2&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化(format)</span><br><span class="line">&#123;变量:[填充字符][对齐方式 &lt;^&gt;][宽度][格式]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># format 格式化</span></span><br><span class="line">name = <span class="string">&quot;wen&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; 姓名：&#123;&#125;， 年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; 姓名：&#123;&#125;， 年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(age, name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; 姓名: &#123;1&#125;, 年龄：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; 姓名: &#123;1&#125;, 年龄：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(age, name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format03 --&gt; 姓名：&#123;name1&#125;, 年龄：&#123;age1&#125;&quot;</span>.<span class="built_in">format</span>(name1 = name, age1 = age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;0:*&gt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：0 第1个变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*&gt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：1 第2个变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：：执行 ; * 填充字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：^ 居中 ; 10 填充宽度10字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>,<span class="number">5.333</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;1:06.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>,<span class="number">5.333</span>))</span><br><span class="line"><span class="comment"># 二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 八进制注：16进制是”&#123;0:x&#125;”.format(10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:o&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 千分位格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">123456789</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化-f</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># f标志符  格式化</span></span><br><span class="line">a = <span class="string">&quot;I&quot;</span></span><br><span class="line">b = <span class="string">&quot;Love&quot;</span></span><br><span class="line">c = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#结果 ILovePython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c&#125;&quot;</span>.<span class="built_in">format</span>(a = a, b = b, c = c))<span class="comment"># 注：效果等同</span></span><br><span class="line"><span class="comment">#结果 ILovePython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c:a^<span class="number">10</span>&#125;</span>&quot;</span>)<span class="comment"># 注：对字符串c的操作：用“a”填充宽度10，居中</span></span><br><span class="line"><span class="comment">#结果 ILoveaaPythonaa</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c:a^10&#125;&quot;</span>.<span class="built_in">format</span>(a = a, b = b, c = c)) <span class="comment"># 注：效果等同</span></span><br><span class="line"><span class="comment">#结果 ILoveaaPythonaa</span></span><br></pre></td></tr></table></figure><h3 id="Python数字-Booleans"><a href="#Python数字-Booleans" class="headerlink" title="Python数字-Booleans"></a>Python数字-Booleans</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">布尔值(Booleans)是一个逻辑值</span><br><span class="line">取值范围只有True和False(真和假)</span><br><span class="line">布尔值为假：</span><br><span class="line">&#x27;&#x27;,0,0.0,(),[],&#123;&#125;,None,False</span><br><span class="line">None是一个特殊的常量，表示一种特殊的数据类型（NoneType）</span><br><span class="line">值布尔值为真：</span><br><span class="line">除了为假的，其他的都为真</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* 布尔值可以相互加减</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a == b)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = (a == b) + (a == d)<span class="comment"># 注：c = 0 +1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 布尔值排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[(a==d),(a==b)]  <span class="comment"># 注：(a==d)为真，(a==b)为假</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(lst)</span><br><span class="line">[<span class="literal">False</span>, <span class="literal">True</span>]  <span class="comment"># 注：因为默认情况下 0为假，1为真</span></span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">○常量</span><br><span class="line">常量是指一旦初始化后就不能修改的固定值</span><br><span class="line">注意：在Python中表示一个常量通常用大写（约定俗成，非强制）表示，如：PI=3.1415926</span><br><span class="line">○NoneType</span><br><span class="line">None表示什么也没有</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="数据类型" scheme="https://mycpen.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>01_Python-CSDN_环境搭建</title>
    <link href="https://mycpen.github.io/blog/posts/4b17232b4b57.html"/>
    <id>https://mycpen.github.io/blog/posts/4b17232b4b57.html</id>
    <published>2022-09-01T07:40:00.000Z</published>
    <updated>2022-09-01T07:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="01-Python-环境搭建"><a href="#01-Python-环境搭建" class="headerlink" title="01_Python-环境搭建"></a>01_Python-环境搭建</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="①-Python解释器-安装"><a href="#①-Python解释器-安装" class="headerlink" title="① Python解释器 安装"></a>① Python解释器 安装</h2><ol><li><p>Windows平台</p><p>下载地址：<a href="https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe（3.9版本）">https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe（3.9版本）</a></p><p>安装python39</p><p>​    exe安装：注意修改目录、环境变量</p><p>​    安装路径：C:/python39（安装路径可以自定，但注意不要包含中文或空格等特殊字符）</p><p>​    验证：按键盘“win+R”，输入“cmd” , 在命令行测试</p><p>​    C:\Users\cPenadm&gt;==python -V==</p><p>​    Python 3.9.5</p></li></ol><ol><li><p>Linux平台</p><p>自带python（不同版本的操作系统带的python版本不一样）</p><p>centos-yum安装（3.6版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install python36</span><br><span class="line">yum install python36-devel</span><br></pre></td></tr></table></figure></li></ol><h2 id="②-pip工具-设置"><a href="#②-pip工具-设置" class="headerlink" title="② pip工具 设置"></a>② pip工具 设置</h2><p>pip是Python 包管理工具，该工具提供了对Python包的查找、下载、安装、卸载的功能。</p><p>配置国内源<br>    解决安装慢的问题</p><ol><li><p>方法 1</p><ul><li><p>升级pip到10.0以上版本</p><ul><li>```bash<br>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 方法 2</span><br><span class="line"></span><br><span class="line">   1. Windows平台</span><br><span class="line"></span><br><span class="line">      - 创建目录及文件 ==C:\Users\&lt;你的用户名&gt;\pip\pip.ini==</span><br><span class="line"></span><br><span class="line">      - pip.ini文件内容如下：修改成阿里的源，其他国内源也可以</span><br><span class="line"></span><br></pre></td></tr></table></figure> [global]<br> index-url=<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br> [install]<br> trusted-host=mirrors.aliyun.com <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. Linux平台</span><br><span class="line"></span><br><span class="line">   ```bash</span><br><span class="line">   mkdir  ~/.pip</span><br><span class="line">   vim  ~/.pip/pip.conf</span><br><span class="line">   #输入以下内容</span><br><span class="line">   [global]</span><br><span class="line">   index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="③-PyCharm-安装"><a href="#③-PyCharm-安装" class="headerlink" title="③ PyCharm 安装"></a>③ PyCharm 安装</h2><p>PyCharm是由JetBrains打造的一款PythonIDE，支持macOS、Windows、Linux系统</p><p>集成开发环境（IDE,IntegratedDevelopmentEnviroment）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具</p><p>优点：界面友好、调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制等</p><ol><li><p>下载地址</p><p>官网：<a href="http://www.jetbrains.com/pycharm/">http://www.jetbrains.com/pycharm/</a></p></li><li><p>安装</p><p>社区版：免费使用，不用激活</p><p>专业版：功能更丰富，需要激活</p></li><li><p>激活</p><p>打开pycharm，执行：Help-Register</p><p><img src="https://image.cpen.top/image/202203052147100.png" alt="image-20220305214732025"></p></li><li><p>配置Python解释器</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/40716785">https://zhuanlan.zhihu.com/p/40716785</a></p><p><img src="https://image.cpen.top/image/202203052148253.png" alt="image-20220305214846212"></p></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://mycpen.github.io/blog/tags/Python/"/>
    
    <category term="环境" scheme="https://mycpen.github.io/blog/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>04_Hexo-多平台部署-云服务器-GitHub-Gitee</title>
    <link href="https://mycpen.github.io/blog/posts/2ae79f10613d.html"/>
    <id>https://mycpen.github.io/blog/posts/2ae79f10613d.html</id>
    <published>2022-08-31T08:00:00.000Z</published>
    <updated>2022-09-06T04:41:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>多平台</code> + <code>一键部署</code> + <code>云服务器</code><span id="more"></span></p><h1 id="04-Hexo-多平台部署"><a href="#04-Hexo-多平台部署" class="headerlink" title="04_Hexo-多平台部署"></a>04_Hexo-多平台部署</h1><h2 id="一-开篇词"><a href="#一-开篇词" class="headerlink" title="一. 开篇词"></a>一. 开篇词</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><ul><li>官方文档介绍了 Hexo 可以同时<code>一键部署</code>到多个平台，只需要同时使用多个 <code>deployer</code>。</li></ul><blockquote><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">中文官方文档</a></p><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">- <span class="built_in">type</span>: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2-说明"><a href="#1-2-说明" class="headerlink" title="1.2. 说明"></a>1.2. 说明</h3><ul><li>使用 <code>Git Hooks</code> 同步 Hexo 生成的静态文件。（后期我弃用 git，改用 rsync 了）</li></ul><h2 id="二-步骤"><a href="#二-步骤" class="headerlink" title="二. 步骤"></a>二. 步骤</h2><h3 id="2-1-云服务器创建-Git-仓库"><a href="#2-1-云服务器创建-Git-仓库" class="headerlink" title="2.1 云服务器创建 Git 仓库"></a>2.1 云服务器创建 Git 仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/git/</span><br><span class="line"></span><br><span class="line">$ git init --bare hexo.git# 创建 Hexo 远程仓库git init --bare 仓库名.git</span><br><span class="line"></span><br><span class="line">$ cd /opt/git/hexo.git/hooks/ </span><br><span class="line"></span><br><span class="line">$ vim post-receive </span><br><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/opt/www/hexo --git-dir=/opt/git/hexo.git checkout -f</span><br><span class="line"></span><br><span class="line"># --work-tree=/opt/www/hexo   设置工作树的路径</span><br><span class="line"># --git-dir=/opt/git/hexo.git 设置存储库的路径</span><br><span class="line"></span><br><span class="line">$ chmod +x post-receive# 给钩子文件添加执行权限</span><br><span class="line"></span><br><span class="line">$ mkdir /opt/www/hexo# 创建工作树路径</span><br><span class="line"></span><br><span class="line">$ chmod -R 777 /opt/www/hexo# 授权，否则到后面访问报 403</span><br></pre></td></tr></table></figure><h4 id="2-1-2-deployer-使用-rsync-进行部署"><a href="#2-1-2-deployer-使用-rsync-进行部署" class="headerlink" title="2.1.2 deployer 使用 rsync 进行部署"></a>2.1.2 deployer 使用 rsync 进行部署</h4><p>前言：后面发现使用 git 上传至云服务器速度太慢了（不清楚啥原因），改用 rsync。</p><blockquote><p>git 上传速度如下图</p><p><img src="https://image.cpen.top/image/image-20220906115955982.png" alt="image-20220906115955982"></p></blockquote><ol><li><p>使 git bash 支持 rsync（Windows）</p><p>参考 </p><pre><code>    [https://blog.csdn.net/m0_48613893/article/details/124104757](https://blog.csdn.net/m0_48613893/article/details/124104757)    [https://blog.csdn.net/qq_38689395/article/details/125758842](https://blog.csdn.net/qq_38689395/article/details/125758842)</code></pre><p>如果文件重复，就跳过<br>如果出错就修改文件名    <code>.\usr\bin\msys-xxhash-0.8.0.dll → msys-xxhash-0.dll</code></p></li></ol><ol><li><p><code>./_config.yml</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: rsync</span><br><span class="line">  host: IP地址</span><br><span class="line">  user: 使用者名称</span><br><span class="line">  root: 远程主机的根目录</span><br><span class="line">  port: 22</span><br><span class="line">  delete: true</span><br><span class="line">  verbose: true</span><br><span class="line">  ignore_errors: false</span><br></pre></td></tr></table></figure><p>参考 <a href="https://hexo.io/zh-cn/docs/one-command-deployment#Rsync">https://hexo.io/zh-cn/docs/one-command-deployment#Rsync</a></p></li></ol><p>在传大文件（也就10M）时依旧很慢，但比前者速度快些。</p><h3 id="2-2-配置本地Hexo-config-yml"><a href="#2-2-配置本地Hexo-config-yml" class="headerlink" title="2.2 配置本地Hexo _config.yml"></a>2.2 配置本地Hexo _config.yml</h3><ul><li><code>./_config.yml</code> 文件，同步部署 <code>GitHub、Gitee、云服务器</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment - 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/zh-cn/docs/one-command-deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repository: root@IP地址:/opt/git/hexo.git</span><br><span class="line">  branch: master</span><br><span class="line">  commit: Site updated</span><br><span class="line">  message: hexo &#123;&#123; now(<span class="string">&#x27;YYYYMMDD&#x27;</span>) &#125;&#125;</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:mycpen/mycpen.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line">  commit: Site updated</span><br><span class="line">  message: hexo &#123;&#123; now(<span class="string">&#x27;YYYYMMDD&#x27;</span>) &#125;&#125;       <span class="comment"># message为自定义提交信息，默认为 Site updated: YYYY-MM-DD HH:mm:ss</span></span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@gitee.com:mycpen/mycpen.gitee.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  commit: Site updated</span><br><span class="line">  message: hexo &#123;&#123; now(<span class="string">&#x27;YYYYMMDD&#x27;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-配置-SSH-免密登录"><a href="#2-3-配置-SSH-免密登录" class="headerlink" title="2.3 配置 SSH 免密登录"></a>2.3 配置 SSH 免密登录</h3><ul><li>本地 SSH 公钥 如<code>~/.ssh/id_rsa.pub</code>  内容添加至云服务器 <code>~/.ssh/authorized_keys</code> 中</li></ul><h3 id="2-4-部署"><a href="#2-4-部署" class="headerlink" title="2.4 部署"></a>2.4 部署</h3><ul><li>本地 Hexo 源文件项目下敲</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d</span><br></pre></td></tr></table></figure><h3 id="2-5-使用-NGINX-做-Web-服务器"><a href="#2-5-使用-NGINX-做-Web-服务器" class="headerlink" title="2.5 使用 NGINX 做 Web 服务器"></a>2.5 使用 NGINX 做 Web 服务器</h3><ul><li>新增虚拟主机配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /usr/local/nginx/conf/conf.d/blog.cpen.top.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line"></span><br><span class="line">    server_name blog.cpen.top;</span><br><span class="line"></span><br><span class="line">    error_page  404  /404.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 强制HTTPS跳转</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> = <span class="string">&quot;http&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span>  307 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root /opt/www/hexo;</span><br><span class="line"></span><br><span class="line">    ssl_certificate     /usr/local/nginx/ssl/blog.cpen.top.pem;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/ssl/blog.cpen.top.key;</span><br><span class="line"></span><br><span class="line">    access_log /data/service_logs/nginx/blog.cpen.top_access.log misc;</span><br><span class="line">    error_log  /data/service_logs/nginx/blog.cpen.top_error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后浏览器访问 <a href="https://blog.cpen.top/">https://blog.cpen.top/</a></li></ul><h2 id="三-注意点"><a href="#三-注意点" class="headerlink" title="三. 注意点"></a>三. 注意点</h2><ol><li><p>配置 SSH <code>免密</code>；</p></li><li><p>存储目录<code>授权</code>；</p><p>给工作树路径 /opt/www/hexo 777 权限，<del>一开始没授权 访问报 403，环境为 CentOS 8.2；</del>原因找到了，第 5 点。</p></li><li><p>开放端口。注意是否需要在云服务器新增<code>安全组策略</code>，80、443 端口需要打开；</p></li><li><p>SELinux 等原因。</p></li><li><p><code>403 权限问题</code><br>后面查询发现了 <code>403</code> 的原因，Nginx 编译安装时我指定了启动用户为 普通用户（默认为 nobody），导致起的工作进程权限不够。而 Hexo 上传的新的静态文件权限不为 777。</p><p>所以修改 Nginx 的启动用户为 root。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">user    root;</span><br><span class="line"></span><br><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h2 id="四-参考文章"><a href="#四-参考文章" class="headerlink" title="四. 参考文章"></a>四. 参考文章</h2><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">官方文档 一键部署</a></p><p><code>*</code> <a href="https://blog.csdn.net/wangjienull/article/details/109227984">使用 Git Hooks 部署至云服务器</a></p><p><a href="https://blog.csdn.net/qq_38679881/article/details/122730065">使用 Git Hooks 部署至云服务器</a></p><p><a href="https://blog.csdn.net/Y_Ace/article/details/121764537">使用 Git Hooks 部署至云服务器 新增 git 用户、授权目录</a></p><p><code>*</code> <a href="https://www.idczone.net/news/3261.html/">访问403 修改 Nginx 启动用户为 root</a></p><p><code>*</code> <a href="https://blog.csdn.net/alexis7/article/details/109569218">访问403 授权 777 目录</a></p><p><a href="https://www.likecs.com/show-204450505.html">访问 403 CentOS 8 环境</a></p><p><a href="http://www.wjhsh.net/reblue520-p-6239733.html">访问 403 SELinux 未关闭</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;多平台&lt;/code&gt; + &lt;code&gt;一键部署&lt;/code&gt; + &lt;code&gt;云服务器&lt;/code&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/tags/Hexo/"/>
    
    <category term="Troubleshooting" scheme="https://mycpen.github.io/blog/tags/Troubleshooting/"/>
    
    <category term="Git" scheme="https://mycpen.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>03_Hexo-Github Pages 个人博客源文件备份迁移</title>
    <link href="https://mycpen.github.io/blog/posts/89e3cf619ff7.html"/>
    <id>https://mycpen.github.io/blog/posts/89e3cf619ff7.html</id>
    <published>2022-08-30T08:00:00.000Z</published>
    <updated>2022-08-30T22:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>Hexo</code> + <code>迁移 / 备份</code><span id="more"></span></p><h1 id="Github-Pages-个人博客源文件"><a href="#Github-Pages-个人博客源文件" class="headerlink" title="Github Pages 个人博客源文件"></a>Github Pages 个人博客源文件</h1><h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h2><ol><li><p><strong>源文件保存问题</strong>：<a href="https://hexo.io/">Hexo</a> 搭建的个人博客，其远程仓库只保存 <a href="https://hexo.io/">Hexo</a> 发布后的 Html 静态文件，博客的源 Markdown 文件、主题配置等资源还在本地；</p></li><li><p><strong>源文件隐私</strong>：考虑到源文件的隐秘性，放弃了新建分支存放源文件，而采用新建项目来存放。</p></li></ol><h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h2><ol><li>源文件<strong>备份</strong>；</li><li>博客的可移植性。</li></ol><h2 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3. 注意点"></a>3. 注意点</h2><ul><li><p>删除 <code>themes</code> 文件下 clone 的主题文件下的 <code>.git</code> 文件；</p></li><li><p><code>node-modules/</code> 中，自定义了一些配置，改动了源码，需要同步，.gitignore 中不写入；</p><p>.gitignore 配置如下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><h2 id="4-配置步骤"><a href="#4-配置步骤" class="headerlink" title="4. 配置步骤"></a>4. 配置步骤</h2><ol><li>将仓库克隆至本地；</li></ol><ol><li>安装 <a href="https://nodejs.org/en/">Node.js</a> 和 <a href="https://git-scm.com/">GIt</a>；<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">官方中文文档</a></li></ol><ol><li><p>安装 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">Hexo</a>；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>如之前未配置 Git 信息，则需配置下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/image-20220830155020917.png" alt="image-20220830155020917"></p></blockquote></li></ol><ol><li><p>执行 <a href="https://hexo.io/zh-cn/docs/commands">Hexo 命令</a>，生成静态文件、部署网站等。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d ; hexo s</span><br></pre></td></tr></table></figure><blockquote><p>过程顺利。</p><p><img src="https://image.cpen.top/image/image-20220830155418809.png" alt="image-20220830155418809"></p></blockquote></li></ol><ol><li><p>提交本地源文件变更。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull ; git add . ; git commit -m <span class="string">&#x27;backup&#x27;</span> ; git push</span><br></pre></td></tr></table></figure><p>命令组合    <code>git pull ; hexo clean ; hexo g ; hexo d ; git add . ; git commit -m &#39;backup&#39; ; git push</code></p></li></ol><h2 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h2><p><a href="https://www.jianshu.com/p/a04d75ee9ab6">Hexo 和博客源文件之间的关系</a></p><p><a href="https://hexo.io/zh-cn/docs/github-pages">官方文档分支示例为 gh-pages</a></p><p><a href="https://zhuanlan.zhihu.com/p/127027266">新建仓库样例1</a></p><p><a href="https://blog.csdn.net/weixin_39961522/article/details/112096073">新建仓库样例2</a></p><p><a href="https://blog.csdn.net/stringwinder/article/details/126287503">新建仓库样例3</a></p><p><a href="https://zhuanlan.zhihu.com/p/71544809">新建分支样例1</a></p><p><a href="https://zhuanlan.zhihu.com/p/476603074">新建分支样例2</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;Hexo&lt;/code&gt; + &lt;code&gt;迁移 / 备份&lt;/code&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>02_Hexo-出错排查-Nunjucks Error</title>
    <link href="https://mycpen.github.io/blog/posts/271ec725c35c.html"/>
    <id>https://mycpen.github.io/blog/posts/271ec725c35c.html</id>
    <published>2022-08-29T07:40:00.000Z</published>
    <updated>2022-08-29T07:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>Nunjucks Error</code><span id="more"></span></p><h1 id="Hexo-出错排查"><a href="#Hexo-出错排查" class="headerlink" title="Hexo 出错排查"></a>Hexo 出错排查</h1><h2 id="一-Nunjucks-Error"><a href="#一-Nunjucks-Error" class="headerlink" title="一. Nunjucks Error"></a>一. Nunjucks Error</h2><p><strong>现象描述</strong></p><blockquote><p>Unhandled rejection Nunjucks Error: _posts/xxx.md [Line 84, Column 13] <code>unknown block tag: 标签</code></p><p><img src="https://image.cpen.top/image/image-20220829151147643.png" alt="image-20220829151147643"></p></blockquote><p><strong>解决办法</strong></p><blockquote><p>参考    <a href="https://hexo.io/docs/troubleshooting.html#Escape-Contents">https://hexo.io/docs/troubleshooting.html#Escape-Contents</a><br>            <a href="https://blog.csdn.net/Calvin_zhou/article/details/109303640">https://blog.csdn.net/Calvin_zhou/article/details/109303640</a></p><p>泄露（Escape）内容</p><p>Hexo 使用 <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> 来解析文章（旧版本使用 <a href="http://paularmstrong.github.io/swig/">Swig</a>，两者语法类似），内容若包含 <code>&#123;&#123; &#125;&#125;</code> 或 <code>&#123;% %&#125;</code> 可能导致解析错误，您可以用 <a href="https://hexo.io/docs/tag-plugins#Raw"><code>raw</code></a> 标签包裹，single backtick <code>&#123;&#123; &#125;&#125;</code> 或 triple backtick 来避免潜在问题发生。<br>Alternatively, Nunjucks tags can be disabled through the renderer’s option (if supported), <a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">API</a> or <a href="https://hexo.io/docs/front-matter">front-matter</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">Hello &#123;&#123; world &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">Hello &#123;&#123; world &#125;&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;Nunjucks Error&lt;/code&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://mycpen.github.io/blog/tags/Hexo/"/>
    
    <category term="Troubleshooting" scheme="https://mycpen.github.io/blog/tags/Troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>04_Django-模板变量/标签/过滤器/继承-url反向解析</title>
    <link href="https://mycpen.github.io/blog/posts/a49f8fc42549.html"/>
    <id>https://mycpen.github.io/blog/posts/a49f8fc42549.html</id>
    <published>2022-08-29T07:20:00.000Z</published>
    <updated>2022-08-29T07:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>变量</code> + <code>标签</code> + <code>过滤器</code> + <code>继承</code> + <code>URL 反向解析</code><span id="more"></span></p><h1 id="04-Django-模板变量-标签-过滤器-继承-url反向解析"><a href="#04-Django-模板变量-标签-过滤器-继承-url反向解析" class="headerlink" title="04_Django-模板变量/标签/过滤器/继承-url反向解析"></a>04_Django-模板变量/标签/过滤器/继承-url反向解析</h1><p><a href="https://www.bilibili.com/video/BV1vK4y1o7jH">视频🔗：https://www.bilibili.com/video/BV1vK4y1o7jH</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-模板层-变量和标签"><a href="#一-模板层-变量和标签" class="headerlink" title="一. 模板层 - 变量和标签"></a>一. 模板层 - 变量和标签</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>视图函数中可以将Python变量封装到 <strong>字典</strong> 中传递到模板上</li></ul><p>样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_view</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">&quot;变量1&quot;</span>: <span class="string">&quot;值1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;变量2&quot;</span>: <span class="string">&quot;值2&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;xxx.html&#x27;</span>, dic)</span><br></pre></td></tr></table></figure><ul><li>能传递到模板中的 <strong>数据类型</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str-字符串int-整型</span><br><span class="line">list-数组tuple-元组</span><br><span class="line">dict-字典func-方法</span><br><span class="line">obj-类实例化的对象</span><br></pre></td></tr></table></figure><ul><li>在模板中使用变量语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- &#123;&#123; 变量名 &#125;&#125;</span><br><span class="line">- &#123;&#123; 变量名.index &#125;&#125;</span><br><span class="line">- &#123;&#123; 变量名.key &#125;&#125;</span><br><span class="line">- &#123;&#123; 对象.方法 &#125;&#125;</span><br><span class="line">- &#123;&#123; 函数名 &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>演示：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test_html_param</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202160138597.png" alt="image-20220216013835514"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_html&#x27;</span>, views.test_html)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html_param</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;int&#x27;</span>] = <span class="number">88</span></span><br><span class="line">    dic[<span class="string">&#x27;str&#x27;</span>] = <span class="string">&#x27;peng&#x27;</span></span><br><span class="line">    dic[<span class="string">&#x27;lst&#x27;</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line">    dic[<span class="string">&#x27;dict&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">9</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">8</span>&#125;</span><br><span class="line">    dic[<span class="string">&#x27;func&#x27;</span>] = say_hi</span><br><span class="line">    dic[<span class="string">&#x27;class_obj&#x27;</span>] = Dog()</span><br><span class="line">    dic[<span class="string">&#x27;script&#x27;</span>] = <span class="string">&#x27;&lt;script&gt;alert(1111)&lt;/script&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html_param.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wangwang&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_html_param.html</span></span><br><span class="line">&lt;h3&gt;<span class="built_in">int</span> 是 &#123;&#123; <span class="built_in">int</span>|add:<span class="string">&quot;2&quot;</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="built_in">str</span> 是 &#123;&#123; <span class="built_in">str</span>|upper &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;lst 是 &#123;&#123; lst &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;lst 是 &#123;&#123; lst<span class="number">.0</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="built_in">dict</span> 是 &#123;&#123; <span class="built_in">dict</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="built_in">dict</span>[<span class="string">&#x27;a&#x27;</span>] 是 &#123;&#123; <span class="built_in">dict</span>.a &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;function 是 &#123;&#123; func &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;class_obj 是 &#123;&#123; class_obj.say &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;script 是 &#123;&#123; script|safe &#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><strong>模板标签</strong></p><ul><li>作用：将一些服务器端的功能嵌入到模板中，例如流程控制等</li><li>标签语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% 标签 %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% 结束标签 %&#125;</span><br></pre></td></tr></table></figure><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><ul><li><strong>语法</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 条件表达式1 %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% elif 条件表达式2 %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% elif 条件表达式3 %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endif %&#125;- 需要有结束标签</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：</li></ul><ol><li>if条件表达式里可以用的运算符 ==, !=, &lt;, &gt; , &lt;=, &gt;=, in, not in, is, is not, not、and、or</li><li>在if标记中使用实际括号是无效的语法。如果需要它们指示优先级，则应使用嵌套的if标记。</li></ol><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/#if">https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/#if</a></p><ul><li><strong>演示：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test_if_for</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202160204292.png" alt="image-20220216020405259"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_if_for&#x27;</span>, views.test_if_for),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_if_for</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;x&#x27;</span>] = <span class="number">20</span></span><br><span class="line">    dic[<span class="string">&#x27;lst&#x27;</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_if_for.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_if_for.html</span></span><br><span class="line">&#123;% <span class="keyword">if</span> x &gt; <span class="number">10</span> %&#125;</span><br><span class="line">今天天气很好</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">今天天气非常好</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> name <span class="keyword">in</span> lst %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125; &amp;&amp;&amp;&amp;&amp; &#123;% endif %&#125;</span><br><span class="line">    &lt;p&gt; &#123;&#123; forloop.counter &#125;&#125;  &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.last %&#125; ===== &#123;% endif %&#125;</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    当前没数据</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>模板标签 - if标签 - 练习</strong></p><p>写一个简单的计算器页面，能够在服务端进行简单加减乘除计算（需记录用户上次填写状态、下拉列表选择状态）</p><p><img src="https://image.cpen.top/image/202202160209924.png" alt="image-20220216020922893"></p><ul><li><p>前端参考代码：</p><p><img src="https://image.cpen.top/image/202202160215265.png" alt="image-20220216021536197"></p></li></ul></li></ul><ul><li><p><strong>演示：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/mycal</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202160235992.png" alt="image-20220216023528956"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;mycal&#x27;</span>, views.test_mycal),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_mycal</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;mycal.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">#处理计算</span></span><br><span class="line">        x = <span class="built_in">int</span>(request.POST[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(request.POST[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        op = request.POST[<span class="string">&#x27;op&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            result = x + y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">            result = x - y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">            result = x * y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            result = x / y</span><br><span class="line"></span><br><span class="line">        <span class="comment">#dic=&#123;&#x27;x&#x27;:x, &#x27;y&#x27;:y, &#x27;op&#x27;:op&#125;</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;mycal.html&#x27;</span>, <span class="built_in">locals</span>())<span class="comment"># locals方法-局部变量直接封装成字典（Python自带方法）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/mycal.html</span></span><br><span class="line">&lt;form action=<span class="string">&#x27;/mycal&#x27;</span> method=<span class="string">&#x27;post&#x27;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&quot;x&quot;</span> value=<span class="string">&quot;&#123;&#123; x &#125;&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;select name=<span class="string">&#x27;op&#x27;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;add&quot;</span>  &#123;% <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span> %&#125;selected&#123;% endif %&#125; &gt; +加&lt;/option&gt;<span class="comment"># ☆ 记录op状态，option selected属性，使用了if标签</span></span><br><span class="line">    &lt;option value=<span class="string">&quot;sub&quot;</span>  &#123;% <span class="keyword">if</span> op == <span class="string">&#x27;sub&#x27;</span> %&#125;selected&#123;% endif %&#125;&gt; -减&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;mul&quot;</span>  &#123;% <span class="keyword">if</span> op == <span class="string">&#x27;mul&#x27;</span> %&#125;selected&#123;% endif %&#125;&gt; *乘&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;div&quot;</span>  &#123;% <span class="keyword">if</span> op == <span class="string">&#x27;div&#x27;</span> %&#125;selected&#123;% endif %&#125;&gt; /除&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&quot;y&quot;</span> value=<span class="string">&quot;&#123;&#123; y &#125;&#125;&quot;</span>&gt; = &lt;span&gt;&#123;&#123; result &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&#x27;开始计算&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="for标签"><a href="#for标签" class="headerlink" title="for标签"></a>for标签</h4><ul><li><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for 变量 in 可迭代对象 %&#125;</span><br><span class="line">    ... 循环语句</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    ... 可迭代对象无数据时填充的语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/#for">https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/#for</a></p></li></ul><ul><li><strong>内置变量 - forloop</strong></li></ul><p><img src="https://image.cpen.top/image/202202160246199.png" alt="image-20220216024655125"></p><ul><li><strong>演示：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test_if_for</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202160254425.png" alt="image-20220216025446396"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_if_for&#x27;</span>, views.test_if_for),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_if_for</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;lst&#x27;</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_if_for.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_if_for.html</span></span><br><span class="line">&#123;% <span class="keyword">for</span> name <span class="keyword">in</span> lst %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125; &amp;&amp;&amp;&amp;&amp; &#123;% endif %&#125;</span><br><span class="line">    &lt;p&gt; &#123;&#123; forloop.counter &#125;&#125;  &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.last %&#125; ===== &#123;% endif %&#125;</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    当前没数据</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><ul><li>变量调用 - 点大法</li><li>标签语法 {% 标签 %} {% 结束标签 %}</li></ul><hr><h2 id="二-模板层-过滤器和继承"><a href="#二-模板层-过滤器和继承" class="headerlink" title="二. 模板层 - 过滤器和继承"></a>二. 模板层 - 过滤器和继承</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>定义：在变量输出时对变量的值进行处理</li><li>作用：可以通过使用 过滤器 来改变变量的输出显示</li><li>语法：**{{ 变量 | 过滤器1:'参数1' | 过滤器2:'参数2' ... }}**</li></ul><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/">https://docs.djangoproject.com/zh-hans/2.2/ref/templates/builtins/</a></p><ul><li><p><strong>常用过滤器：</strong></p><p><img src="https://image.cpen.top/image/202202160307400.png" alt="image-20220216030721308"></p></li><li><p>演示：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test_html_param</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202160312462.png" alt="image-20220216031236417"></p><p><img src="https://image.cpen.top/image/202202160313992.png" alt="image-20220216031311962"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_html&#x27;</span>, views.test_html)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html_param</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;int&#x27;</span>] = <span class="number">88</span></span><br><span class="line">    dic[<span class="string">&#x27;script&#x27;</span>] = <span class="string">&#x27;&lt;script&gt;alert(1111)&lt;/script&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html_param.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wangwang&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_html_param.html</span></span><br><span class="line">&lt;h3&gt;<span class="built_in">int</span> 是 &#123;&#123; <span class="built_in">int</span>|add:<span class="string">&quot;2&quot;</span> &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;<span class="built_in">str</span> 是 &#123;&#123; <span class="built_in">str</span>|upper &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;script 是 &#123;&#123; script|safe &#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>模板的继承</strong></p><p>​    如下样例：</p><p><img src="https://image.cpen.top/image/202202160321750.png" alt="image-20220216032123690"></p><ul><li>模板继承可以使父模板的内容重用，子模板直接继承父模板的全部内容并可以覆盖父模板中相应的块</li></ul><ul><li>语法 - 父模板中：<ul><li>[x] 定义父模板中的<strong>块 block </strong>标签</li><li>[x] 表时出哪些在<strong>子模块</strong>中是允许被<strong>修改</strong>的</li><li>[x] block 标签：<strong>在父模板中定义，可以在子模板中覆盖</strong></li></ul></li></ul><ul><li><p>语法 - 子模板中：</p><ul><li><p>[x] 继承模板 <code>extends</code> 标签（写在模板文件的第一行）</p><p>例如 <code>&#123;% extends 'base.html' %&#125;</code></p></li><li><p>[x] 子模板 重写父模板中的内容块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block block_name %&#125;</span><br><span class="line">子模板块用来覆盖父模板中 block_name 块的内容</span><br><span class="line">&#123;% endblock block_name %&#125;- block_name 可写可不写</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>重写的覆盖规则<ul><li>[x] 不重写，将按照父模板中的效果显示</li><li>[x] 重写，则按照重写效果显示</li></ul></li></ul><ul><li>注意<ul><li>[x] 模板继承时，服务器端的动态内容无法继承</li></ul></li></ul><ul><li><strong>演示：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/base_index</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202161504056.png" alt="image-20220216150400013"></p><p><img src="https://image.cpen.top/image/202202161504615.png" alt="image-20220216150430581"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;base_index&#x27;</span>, views.base_view, name=<span class="string">&#x27;base_index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;music_index&#x27;</span>, views.music_view),</span><br><span class="line">    path(<span class="string">&#x27;sport_index&#x27;</span>, views.sport_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base_view</span>(<span class="params">request</span>):</span><br><span class="line">    lst = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;base.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">music_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;music.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sport_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;sport.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># mysite1/templates/base.html# 父模板</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &#123;% block mytitle %&#125;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;<span class="comment"># 子模板能改的地方</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;&#123; lst &#125;&#125;<span class="comment"># 子模板无法继承变量（动态内容）</span></span><br><span class="line">&lt;a href=<span class="string">&quot;/music_index&quot;</span>&gt;音乐频道&lt;/a&gt;<span class="comment"># 子模板不能改</span></span><br><span class="line">&lt;a href=<span class="string">&quot;/sport_index&quot;</span>&gt;体育频道&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block info %&#125;</span><br><span class="line">    这是主页<span class="comment"># 子模板能改的地方</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;有任何问题联系xxxx&lt;/h3&gt;<span class="comment"># 子模板不能改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/music.html# 子模板</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;base.html&#x27;</span> %&#125;<span class="comment"># 继承父模板</span></span><br><span class="line"></span><br><span class="line">&#123;% block mytitle %&#125;</span><br><span class="line">    &lt;title&gt;音乐频道&lt;/title&gt;<span class="comment"># 子模板重写block</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block info %&#125;</span><br><span class="line">    欢迎来到音乐频道</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/sport.html</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;base.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block mytitle %&#125;</span><br><span class="line">    &lt;title&gt;体育频道&lt;/title&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block info %&#125;</span><br><span class="line">    欢迎来到体育频道</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小节-1"><a href="#小节-1" class="headerlink" title="小节"></a>小节</h3><ul><li><p><strong>过滤器</strong></p><p>{ <code>变量</code> | <code>过滤器</code>1:’<code>参数值</code>1’ | 过滤器2:’参数值2’ … }</p></li><li><p><strong>模板的继承</strong></p><p>父模板 - <code>定义可被修改的block</code></p><p>子模板 - 继承<code>父模板</code>；按需修改<code>父模板中定义的block</code></p></li></ul><hr><h2 id="三-url反向解析"><a href="#三-url反向解析" class="headerlink" title="三. url反向解析"></a>三. url反向解析</h2><ul><li><p><strong>代码中 url 出现位置</strong></p><ol><li><p>==模板== 【html中】</p><ol><li><p>\<a ==href==='url'>超链接\</a></p><p>点击后 页面跳转至 url</p></li><li><p>\<form ==action==='url' method='post'></p><p>form表单中的数据 用post方法提交至 url</p></li></ol></li><li><p>==视图函数==中 - 302跳转    HttpResponseRedirect(‘url’)</p><p>将用户地址栏中的地址跳转到 url</p></li></ol></li></ul><ul><li><p><strong>代码中 url 书写规范</strong></p><ol><li><p>==绝对地址==</p><p>​    <a href="http://127.0.0.1:8000/page/1">http://127.0.0.1:8000/page/1</a></p></li><li><p>==相对地址==</p><ol><li>‘==/==page/1’ -    ==’/‘ 开头的相对地址==，浏览器会把当前地址栏里的 协议，ip 和 端口 加上这个地址，作为最终访问地址，即如果当前页面地址栏为 <a href="http://127.0.0.1:8000/page/3；当前相对地址最终结果为">http://127.0.0.1:8000/page/3；当前相对地址最终结果为</a> ==<code>http://127.0.0.1:8000</code>== + /page/1    （☆ 高频使用）</li><li>‘page/1’ -    ==没有 ‘/‘ 开头的相对地址==，浏览器会根据<code>当前 url 的最后一个 / 之前的内容 加上 该相对地址</code> 作为最终访问地址，例如当前地址栏地址为 ==<a href="http://127.0.0.1:8000/topic/==detail；则该相对地址最终结果为">http://127.0.0.1:8000/topic/==detail；则该相对地址最终结果为</a> ==<code>http://127.0.0.1:8000/topic/</code>== + page/1</li></ol></li></ol></li><li><p><strong>演示：</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test/url</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202161656031.png" alt="image-20220216165641996"></p><p><img src="https://image.cpen.top/image/202202161657095.png" alt="image-20220216165734057"></p><p><img src="https://image.cpen.top/image/202202161702913.png" alt="image-20220216170206874"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/test/url</span></span><br><span class="line">    path(<span class="string">&#x27;test/url&#x27;</span>, views.test_url),</span><br><span class="line">    path(<span class="string">&#x27;test_url_result&#x27;</span>, views.test_url_result)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_url.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url_result</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;---test url res is ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_url.html</span></span><br><span class="line">&lt;a href=<span class="string">&quot;http://127.0.0.1:8000/test_url_result&quot;</span>&gt;绝对地址&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/test_url_result&quot;</span>&gt;带<span class="string">&#x27;/&#x27;</span>的相对地址&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;test_url_result&quot;</span>&gt;不带<span class="string">&#x27;/&#x27;</span>的相对地址&lt;/a&gt;<span class="comment"># 浏览器解析为 http://127.0.0.1:8000/test/test_url_result</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>url 反向解析</strong></p><ul><li><p>url 反向解析是指在视图或者模板中，用 ==path 定义的名称==来==动态查找或计算出相应的路由==</p></li><li><p><strong>path 函数的语法</strong></p><ul><li>[x] path(route, views, ==name===”别名”)</li><li>[x] path(‘page’, views.page_view, name=”page_url”)</li><li>根据 path 中的 ‘name=’ 关键字传给 url 确定了个唯一确定的名字，在模板或视图中，可以通过这个名字反向推断出此 url 信息</li></ul></li><li><p>==模板中== - 通过 url 标签实现地址的反向解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &#x27;别名&#x27; %&#125;</span><br><span class="line">&#123;% url &#x27;别名&#x27; &#x27;参数值1&#x27; &#x27;参数值2&#x27; %&#125;</span><br><span class="line">ex:</span><br><span class="line">&#123;% url &#x27;pagen&#x27; &#x27;400&#x27; %&#125;--- 传参一律是 str</span><br><span class="line">&#123;% url &#x27;person&#x27; age=&#x27;18&#x27; name=&#x27;gxn&#x27; %&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>演示：在模板中使用</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test/url</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202161725987.png" alt="image-20220216172535944"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/test/url</span></span><br><span class="line">    path(<span class="string">&#x27;test/url&#x27;</span>, views.test_url),</span><br><span class="line">    path(<span class="string">&#x27;test_urls_result/&lt;int:age&gt;&#x27;</span>, views.test_url_result, name=<span class="string">&#x27;tr&#x27;</span>)<span class="comment"># 起别名 tr</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_url.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_urls_result</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;---test url res is ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/test_url.html</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;tr&#x27; &#x27;100&#x27; %&#125;&quot;</span>&gt;url反向解析版本&lt;/a&gt;<span class="comment"># ☆ 模板中使用别名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>在==视图函数==中 → 可调用 django 中的 ==reverse== 方法进行反向解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line">reverse(<span class="string">&#x27;别名&#x27;</span>, args=[], kwargs=&#123;&#125;)</span><br><span class="line">ex:</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">&#x27;pagen&#x27;</span>, args=[<span class="number">300</span>]))</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">&#x27;person&#x27;</span>, kwargs=</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;peng&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/test/url</span><br><span class="line"></span><br><span class="line"># 302跳转 - 响应头里的 location 标记跳转地址</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/202202161742771.png" alt="image-20220216174234729"></p><p><img src="https://image.cpen.top/image/202202161745717.png" alt="image-20220216174547656"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite1/mysite1/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;base_index&#x27;</span>, views.base_view, name=<span class="string">&#x27;base_index&#x27;</span>),<span class="comment"># 起别名 base_index</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/test/url</span></span><br><span class="line">    path(<span class="string">&#x27;test/url&#x27;</span>, views.test_url),</span><br><span class="line">    path(<span class="string">&#x27;test_urls_result/&lt;int:age&gt;&#x27;</span>, views.test_url_result, name=<span class="string">&#x27;tr&#x27;</span>)<span class="comment"># 起别名 tr</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/mysite1/views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base_view</span>(<span class="params">request</span>):</span><br><span class="line">    lst = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;base.html&#x27;</span>, <span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_url.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url_result</span>(<span class="params">request, age</span>):</span><br><span class="line">    <span class="comment">#302跳转</span></span><br><span class="line">    <span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line">    url = reverse(<span class="string">&#x27;base_index&#x27;</span>)<span class="comment"># ☆ 视图函数中使用别名</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># mysite1/templates/test_url.html</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;tr&#x27; &#x27;100&#x27; %&#125;&quot;</span>&gt;url反向解析版本&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite1/templates/base.html</span></span><br><span class="line">略</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h2><ul><li>请求（request）和响应（HttpResponseqing）</li><li>GET/POST处理 - request.GET/POST</li><li>MVC 和 MTV</li><li>模板层基础配置</li><li>模板变量/标签/过滤器/继承</li><li>url反向解析</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;变量&lt;/code&gt; + &lt;code&gt;标签&lt;/code&gt; + &lt;code&gt;过滤器&lt;/code&gt; + &lt;code&gt;继承&lt;/code&gt; + &lt;code&gt;URL 反向解析&lt;/code&gt;</summary>
    
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/categories/Django/"/>
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/tags/Django/"/>
    
    <category term="URL" scheme="https://mycpen.github.io/blog/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>03_Django-GET请求和POST请求-设计模式及模板层</title>
    <link href="https://mycpen.github.io/blog/posts/0d0cf322f0fa.html"/>
    <id>https://mycpen.github.io/blog/posts/0d0cf322f0fa.html</id>
    <published>2022-08-29T07:00:00.000Z</published>
    <updated>2022-08-29T07:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>GET</code> + <code>POST</code> + <code>MTV</code> + <code>模板层</code><span id="more"></span></p><h1 id="03-Django-GET请求和POST请求-设计模式及模板层"><a href="#03-Django-GET请求和POST请求-设计模式及模板层" class="headerlink" title="03_Django-GET请求和POST请求-设计模式及模板层"></a>03_Django-GET请求和POST请求-设计模式及模板层</h1><p><a href="https://www.bilibili.com/video/BV1vK4y1o7jH">视频🔗：https://www.bilibili.com/video/BV1vK4y1o7jH</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-GET请求和POST请求"><a href="#一-GET请求和POST请求" class="headerlink" title="一. GET请求和POST请求"></a>一. GET请求和POST请求</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>·无论是GET还是POST，统一都由<code>视图函数</code>接收请求，通过判断request.method区分具体的请求动作</p><p>·样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> requests.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">    处理GET请求时的业务逻辑</span><br><span class="line"><span class="keyword">elif</span> requests.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    处理POST请求的业务逻辑</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    其他请求业务逻辑</span><br></pre></td></tr></table></figure><p>-————————————————————————————————-</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">演示</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">#处理用户提交数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;--test get post is ok--&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="GET处理"><a href="#GET处理" class="headerlink" title="GET处理"></a>GET处理</h3><blockquote><p>·GET请求动作，一般用于向服务器<code>获取数据</code></p><p>·能够产生GET请求的场景：</p><p>​        - 浏览器地址栏中输入URL，回车后</p><p>​        - \&lt;<code>a href</code>=”地址?参数=值&amp;参数=值”&gt;</p><p>​        - <code>form表单</code>中的<code>method为get</code></p><p>-————————————————————————————————-</p><p>GET请求方式中，如果有数据需要传递给服务器，通常会用<code>查询字符串（Query String）</code>传递【注意：<code>不要传递敏感数据</code>】</p><p>URL格式：xxx<code>?参数名1=值1&amp;参数名2=值2...</code></p><p>- 如：<a href="http://127.0.0.1:8000/page1`?a=100&amp;b=200`">http://127.0.0.1:8000/page1`?a=100&amp;b=200`</a></p><p>服务器端接收参数</p><p>获取客户端请求GET请求提交的数据</p><p>·方法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.GET[<span class="string">&#x27;参数名&#x27;</span>] <span class="comment"># QueryDict</span></span><br><span class="line">request.GET.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)</span><br><span class="line">request.GET.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br><span class="line"><span class="comment"># mypage?a=100&amp;b=200&amp;c=300&amp;b=400</span></span><br><span class="line"><span class="comment"># request.GET=QueryDict(&#123;&#x27;a&#x27;: [&#x27;100&#x27;], &#x27;b&#x27;: [&#x27;200&#x27;, &#x27;400&#x27;], &#x27;c&#x27;: [&#x27;300&#x27;]&#125;)</span></span><br><span class="line"><span class="comment"># a = request.GET[&#x27;a&#x27;]</span></span><br><span class="line"><span class="comment"># b = request.GET[&#x27;b&#x27;] # Error</span></span><br></pre></td></tr></table></figure><p>-————————————————————————————————-</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">演示</span><br><span class="line"></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/test_get_post?a=<span class="number">400</span></span><br><span class="line">--test get post <span class="keyword">is</span> ok--</span><br><span class="line">终端</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="string">&#x27;400&#x27;</span>, <span class="string">&#x27;200&#x27;</span>, <span class="string">&#x27;100&#x27;</span>]&#125;&gt;</span><br><span class="line"><span class="number">100</span></span><br><span class="line">[<span class="string">&#x27;400&#x27;</span>, <span class="string">&#x27;200&#x27;</span>, <span class="string">&#x27;100&#x27;</span>]</span><br><span class="line">no c</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_get_post&#x27;</span>, views.test_get_post)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.GET)</span><br><span class="line">        <span class="built_in">print</span>(request.GET[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">        <span class="comment"># 问卷调查 = form get   兴趣爱好 - 复选框</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.getlist(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(request.GET.get(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;no c&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">#处理用户提交数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;--test get post is ok--&#x27;</span>)</span><br></pre></td></tr></table></figure><p>-————————————————————————————————-</p><p>·思考：之前的计算器功能，能否拿查询字符串做？</p><p>​        <a href="http://127.0.0.1:8000/整数/操作符/整数">http://127.0.0.1:8000/整数/操作符/整数</a></p><p>​        <a href="http://127.0.0.1:8000/cal?x=10&amp;y=20&amp;op=add">http://127.0.0.1:8000/cal?x=10&amp;y=20&amp;op=add</a></p></blockquote><h3 id="POST处理"><a href="#POST处理" class="headerlink" title="POST处理"></a>POST处理</h3><blockquote><p>·POST请求动作，一般用于<code>向服务器提交大量/隐私数据</code></p><p>·客户端通过表单等POST请求将数据传递给服务器端，如：</p><p><img src="https://image.cpen.top/image/202205052323569.png" alt="image-20220505232318528"></p><p>·服务器端<code>接收参数</code></p><p>​        通过request.method来判断是否为POST请求，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line"> 处理POST请求的数据并响应</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> 处理非POST请求的响应</span><br></pre></td></tr></table></figure><p>-————————————————————————————————-</p><p><strong>使用post方式接收客户端数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.POST[<span class="string">&#x27;参数名&#x27;</span>] <span class="comment"># request.POST  绑定QueryDict</span></span><br><span class="line">request.POST.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">request.POST.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong><code>取消csrf验证，否则Django将会拒绝客户端发来的POST请求，报403响应</code></strong></p><p>-————————————————————————————————-</p><p><strong>取消csrf验证</strong></p><p>​        - 禁止掉settings.py中MIDDLEWARE中的CsrfviewsMiddleWare的中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">...</span><br><span class="line"> <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line"> ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>-————————————————————————————————-</p><p>演示</p><p><a href="http://127.0.0.1:8000/test_get_post">http://127.0.0.1:8000/test_get_post</a></p><p><img src="https://image.cpen.top/image/202205052336498.png" alt="image-20220505233651466"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">post <span class="keyword">is</span> ok</span><br><span class="line">终端</span><br><span class="line">uname <span class="keyword">is</span> cpen</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_get_post&#x27;</span>, views.test_get_post)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line">POST_FORM = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&#x27;post&#x27; action=&#x27;/test_get_post&#x27;&gt;</span></span><br><span class="line"><span class="string">    用户名: &lt;input type=&#x27;text&#x27; name=&#x27;uname&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&#x27;submit&#x27; value=&#x27;提交&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(POST_FORM)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>-————————————————————————————————————————————————————————————————</p><p>小节</p><p>·Django处理GET请求</p><p>​        查询字符串 - 少量数据传递</p><p>·Django处理POST请求</p><p>​        专用于浏览器提交数据</p></blockquote><hr><h2 id="二-Django的设计模式及模板层"><a href="#二-Django的设计模式及模板层" class="headerlink" title="二. Django的设计模式及模板层"></a>二. Django的设计模式及模板层</h2><h3 id="MVC和MTV"><a href="#MVC和MTV" class="headerlink" title="MVC和MTV"></a>MVC和MTV</h3><h4 id="传统的MVC"><a href="#传统的MVC" class="headerlink" title="传统的MVC"></a>传统的MVC</h4><blockquote><p>MVC代表<code>Model-View-Controller</code>（模型-视图-控制器）模式。</p><ul><li><p>[x] <code>M模型层（Model）</code>，主要用于对数据库层的封装</p></li><li><p>[x] <code>V视图层（View）</code>，用于向用户展示结果（WHAT + HOW）</p></li><li><p>[x] <code>C控制（Controller）</code>，用于处理请求、获取数据、返回结果（重要）</p></li></ul><p>作用：<code>降低模块间的耦合度（解耦）</code></p><p><img src="https://image.cpen.top/image/202205052338248.png" alt="image-20220505233857207"></p></blockquote><h4 id="Django的MTV模式"><a href="#Django的MTV模式" class="headerlink" title="Django的MTV模式"></a>Django的MTV模式</h4><blockquote><p>MTV代表<code>Model-Template-View</code>（模型-模板-视图）模式。</p><ul><li><p>[x] <code>M模型层（Model）</code>负责与数据库交互</p></li><li><p>[x] <code>T模板层（Template）</code>负责呈现内容到浏览器（HOW）</p></li><li><p>[x] <code>V视图层（View）</code>是核心，负责接收请求、获取数据、返回结果（WHAT）</p></li></ul><p>作用：<code>降低模块间的耦合度（解耦）</code></p><p><img src="https://image.cpen.top/image/202205052340887.png" alt="image-20220505234057843"></p><p>-————————————————————————————————————————————————————————————————</p><p><img src="https://image.cpen.top/image/202205052341004.jpg" alt="img"> </p></blockquote><h3 id="模板层"><a href="#模板层" class="headerlink" title="模板层"></a>模板层</h3><h4 id="什么是模板"><a href="#什么是模板" class="headerlink" title="什么是模板"></a>什么是模板</h4><blockquote><p>1、模板是可以根据<code>字典</code>数据动态变化的<code>html网页</code></p><p>2、模板可以<code>根据视图中传递的字典数据动态生成相应的HTML网页</code></p><p><img src="https://image.cpen.top/image/202205052342133.png" alt="image-20220505234226094"></p></blockquote><h4 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h4><blockquote><p>创建模板文件夹 <code>&lt;项目名&gt;/templates</code></p><p>在<code>settings.py</code>中<code>TEMPLATES</code>配置项</p><p>​        1.BACKEND：指定模板的引擎</p><p>​        2.<code>DIRS</code>：模板的搜索目录（可以是一个或多个）</p><p>​        3.APP_DIRS：是否要在应用中的templates文件夹中搜索模板文件</p><p>​        4.OPTIONS：有关模板的选项</p><p>·配置项中 需要修改部分</p><p>​        设置DIRS - <code>&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],</code></p><p>-————————————————————————————————-</p><p>演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/settings.py</span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></blockquote><h4 id="模板的加载方式"><a href="#模板的加载方式" class="headerlink" title="模板的加载方式"></a>模板的加载方式</h4><blockquote><p><strong>方案1</strong> - 通过loader获取模板，通过HttpResponse进行响应（特点：麻烦）</p><p>在视图函数中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="comment"># 1.通过 loader 加载模板</span></span><br><span class="line">t = loader.get_template(<span class="string">&quot;模板文件名&quot;</span>)</span><br><span class="line"><span class="comment"># 2.将 t 转换成 HTML 字符串</span></span><br><span class="line">html = t.reader(字典数据)</span><br><span class="line"><span class="comment"># 3.用响应对象将转换的字符串内容返回给浏览器</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>-——————————————————————————————————————————-</p><p><strong>演示</strong></p><p><a href="http://127.0.0.1:8000/test_html">http://127.0.0.1:8000/test_html</a></p><p><img src="https://image.cpen.top/image/202205052345270.png" alt="image-20220505234508244"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_html&#x27;</span>, views.test_html)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line">    t = loader.get_template(<span class="string">&#x27;test_html.html&#x27;</span>)</span><br><span class="line">    html = t.render()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br><span class="line"></span><br><span class="line"> &lt;项目文件夹下&gt;/templates/test_html.html</span><br><span class="line">&lt;h3&gt;我是模板层的~~~~&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>-————————————————————————————————————————————————————————————————</p><p><strong>方案2</strong> - 通过render() 直接加载并响应模板（特点：方便，大量使用这种）</p><p>在视图函数中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;模板文件名&#x27;</span>, 字典数据)</span><br></pre></td></tr></table></figure><p>-——————————————————————————————————————————-</p><p><strong>演示</strong></p><p><a href="http://127.0.0.1:8000/test_html">http://127.0.0.1:8000/test_html</a></p><p><img src="https://image.cpen.top/image/202205052346308.png" alt="image-20220505234639279"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 方案2</span></span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html.html&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h4 id="视图层与模板层之间的交互"><a href="#视图层与模板层之间的交互" class="headerlink" title="视图层与模板层之间的交互"></a>视图层与模板层之间的交互</h4><blockquote><p>1、视图函数中可以将Python<code>变量</code>封装到字典中传递到模板</p><p>样例：</p><p>def xxx_view(request):<br>  dic = {<br>    “变量1”: “值1”,<br>    “变量2”: “值2”,<br>  }<br>  return render(request, ‘xxx.html’, <code>dic</code>)</p><p>2、模板中，我们可以用 <strong></strong> 的语法 调用视图传进来的变量</p><p>-——————————————————————————————————————————-</p><p><strong>演示</strong></p><p><a href="http://127.0.0.1:8000/test_html">http://127.0.0.1:8000/test_html</a></p><p><img src="https://image.cpen.top/image/202205052348278.png" alt="image-20220505234825246"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;test_html&#x27;</span>, views.test_html)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">    dic = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;peng&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"> &lt;项目文件夹下&gt;/templates/test_html.html</span><br><span class="line">&lt;h3&gt;&#123;&#123; username &#125;&#125;是模板层的~~~~&lt;/h3&gt;</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;GET&lt;/code&gt; + &lt;code&gt;POST&lt;/code&gt; + &lt;code&gt;MTV&lt;/code&gt; + &lt;code&gt;模板层&lt;/code&gt;</summary>
    
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/categories/Django/"/>
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/tags/Django/"/>
    
    <category term="MTV" scheme="https://mycpen.github.io/blog/tags/MTV/"/>
    
    <category term="HTTP" scheme="https://mycpen.github.io/blog/tags/HTTP/"/>
    
    <category term="GET" scheme="https://mycpen.github.io/blog/tags/GET/"/>
    
    <category term="POST" scheme="https://mycpen.github.io/blog/tags/POST/"/>
    
    <category term="MVC" scheme="https://mycpen.github.io/blog/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>02_Django-路由配置-HTTP协议的请求和响应</title>
    <link href="https://mycpen.github.io/blog/posts/45a9bfd861b5.html"/>
    <id>https://mycpen.github.io/blog/posts/45a9bfd861b5.html</id>
    <published>2022-08-29T06:50:00.000Z</published>
    <updated>2022-08-29T06:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>路由</code> + <code>HTTP请求与响应</code><span id="more"></span></p><h1 id="02-Django-路由配置-HTTP协议的请求和响应"><a href="#02-Django-路由配置-HTTP协议的请求和响应" class="headerlink" title="02_Django-路由配置-HTTP协议的请求和响应"></a>02_Django-路由配置-HTTP协议的请求和响应</h1><p><a href="https://www.bilibili.com/video/BV1vK4y1o7jH">视频🔗：https://www.bilibili.com/video/BV1vK4y1o7jH</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-路由配置"><a href="#一-路由配置" class="headerlink" title="一. 路由配置"></a>一. 路由配置</h2><blockquote><p>==settings.py==中的 ==`ROOT_URLCONF`== 指定了主路由配置列表 ==urlpatterns== 的文件位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: &lt;项目同名文件夹下&gt;/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;page/2003/&#x27;</span>, views.page_2003_view),</span><br><span class="line">    ... <span class="comment"># 此处配置主路由</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h3 id="path"><a href="#path" class="headerlink" title="path()"></a>path()</h3><h4 id="path-函数"><a href="#path-函数" class="headerlink" title="path()函数"></a>path()函数</h4><blockquote><p>path()函数</p><p>导入 - from django.urls import path</p><p>语法 - ==path(route, views, name=None)==</p><p>参数:</p><p>​        1.==route==: 字符串类型，匹配的请求==路径==</p><p>​        2.==views==: 指定路径所对应的==视图处理函数的名称==</p><p>​        3.<strong>name</strong>: 为地址起 <strong>别名</strong>，在模块中地址反向解析时使用</p><p>练习 - 建立一个小网站：</p><p>​        输入网址：<a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, 在网页中输出：这是我的首页</p><p>​        输入网址：<a href="http://127.0.0.1:8000/page/1">http://127.0.0.1:8000/page/1</a>, 在网页中输出：这是编号为1的网页</p><p>​        输入地址：<a href="http://127.0.0.1:8000/page/2">http://127.0.0.1:8000/page/2</a>, 在网页中输出：这是编号为2的网页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000</span><br><span class="line">http://127.0.0.1:8000/page/1</span><br><span class="line">http://127.0.0.1:8000/page/2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index_view),</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/page/1</span></span><br><span class="line">    path(<span class="string">&#x27;page/1&#x27;</span>, views.page1_view),</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/page/2</span></span><br><span class="line">    path(<span class="string">&#x27;page/2&#x27;</span>, views.page2_view)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&#x27;这是我的首页&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&#x27;这是编号为1的网页&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page2_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&#x27;这是编号为2的网页&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>思考</p><p>建立如上一百个网页该怎么办？</p><p>例如：</p><p>​        <a href="http://127.0.0.1:8000/page/3">http://127.0.0.1:8000/page/3</a></p><p>​        <a href="http://127.0.0.1:8000/page/4">http://127.0.0.1:8000/page/4</a></p><p>​        …</p><p>​        <a href="http://127.0.0.1:8000/page/100">http://127.0.0.1:8000/page/100</a></p></blockquote><h4 id="path转换器"><a href="#path转换器" class="headerlink" title="path转换器"></a>path转换器</h4><blockquote><p>语法：==&lt;转换器类型: 自定义名&gt;==</p><p>作用：若转换器类型匹配到对应类型的==数据==，则将数据按照==关键字传参==的方式传递给==视图函数==</p><p>例子：path(‘page/==\<int:page\>==’, view.xxx)</p><p>==<strong>转换器类型</strong>：str、int、slug、path==</p><p><img src="https://image.cpen.top/image/202205042137686.png" alt="image-20220504213759635"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/page/<span class="number">30</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/page/3-100</span></span><br><span class="line">    path(<span class="string">&#x27;page/&lt;int:pg&gt;&#x27;</span>, views.pagen_view)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pagen_view</span>(<span class="params">request, pg</span>):</span><br><span class="line">    html = <span class="string">&#x27;这是编号为%s的网页!&#x27;</span>%(pg)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>练习：小计算器</p><p>​        定义一个路由的格式为：</p><p>​        ==<a href="http://127.0.0.1:8000/整数/操作字符串[add/sub/mul]/整数==">http://127.0.0.1:8000/整数/操作字符串[add/sub/mul]/整数==</a></p><p>​        从路由中提取数据，做相应的操作后返回给浏览器</p><p>​        效果如下：</p><p>​                输入：==127.0.0.1:8000/100/add/200==</p><p>​                页面显示结果：==300==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/<span class="number">100</span>/add/<span class="number">200</span></span><br><span class="line">结果为：<span class="number">300</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/整数/操作符/整数</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:n&gt;/&lt;str:op&gt;/&lt;int:m&gt;&#x27;</span>, views.cal_view)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_view</span>(<span class="params">request, n, op, m</span>):</span><br><span class="line">    <span class="keyword">if</span> op <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;mul&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Your op is wrong&#x27;</span>)</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">        result = n + m</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">        result = n - m</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">        result = n * m</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;结果为：%s&#x27;</span>%(result))</span><br></pre></td></tr></table></figure></blockquote><h3 id="re-path"><a href="#re-path" class="headerlink" title="re_path()"></a>re_path()</h3><h4 id="re-path-函数"><a href="#re-path-函数" class="headerlink" title="re_path()函数"></a>re_path()函数</h4><blockquote><p>re_path()函数</p><p>在 url 的匹配过程中可以使用==正则==表达式进行精确匹配</p><p>语法：</p><p>​        re_path(==reg==, view, name=xxx)</p><p>​        正则表达式为==命名分组模式(<strong>?P\<name\></strong>pattern)==; 匹配提取参数后用关键字传参方式传递给视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line"><span class="comment"># 可匹配 http://127.0.0.1:8000/20/mul/40</span></span><br><span class="line"><span class="comment"># 不可匹配 http://127.0.0.1:8000/200/mul/400</span></span><br><span class="line"></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/<span class="number">10</span>/add/<span class="number">20</span>  -&gt;  x:<span class="number">10</span> op:add y:<span class="number">20</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/整数2/操作符/整数2</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^(?P&lt;x&gt;\d&#123;1,2&#125;)/(?P&lt;op&gt;\w+)/(?P&lt;y&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.cal2_view),</span><br><span class="line">]<span class="comment"># \d 整数; \w 字符</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal2_view</span>(<span class="params">request, x, op, y</span>):</span><br><span class="line">    html = <span class="string">&#x27;x:%s op:%s y:%s&#x27;</span>%(x, op, y)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>练习</p><p>访问地址：</p><p>​        <a href="http://127.0.0.1:8000/birthday/四位数字/一到两位数字/一到两位数字">http://127.0.0.1:8000/birthday/四位数字/一到两位数字/一到两位数字</a></p><p>​        <a href="http://127.0.0.1:8000/birthday/一到两位数字/一到两位数字/四位数字">http://127.0.0.1:8000/birthday/一到两位数字/一到两位数字/四位数字</a></p><p>最终输出：生日为：xxxx年xx月xx日</p><blockquote><p>效果样例：</p><p>​        输入网址：<a href="http://127.0.0.1:8000/birthday/2015/12/11">http://127.0.0.1:8000/birthday/2015/12/11</a></p><p>​        显示为：生日为：2015年12月11日</p><p>​        输入网址：<a href="http://127.0.0.1:8000/birthday/2/28/2008">http://127.0.0.1:8000/birthday/2/28/2008</a></p><p>​        显示为：生日为：2008年2月28日</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/birthday/<span class="number">1992</span>/01/01</span><br><span class="line">生日为<span class="number">1992</span>年01月01日</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/birthday/年4/月2/日2</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;y&gt;\d&#123;4&#125;)/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/birthday/月2/日2/年4</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)/(?P&lt;y&gt;\d&#123;4&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">birthday_view</span>(<span class="params">request, y, m, d</span>):</span><br><span class="line">    html = <span class="string">&quot;生日为%s年%s月%s日&quot;</span>%(y, m, d)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></blockquote><hr><p><strong>Django Day02</strong></p><blockquote><p>请求和响应</p><p>GET请求和POST请求</p><p>Django的设计模式及模板层</p><p>模板层 - 变量和标签</p><p>模板层 - 过滤器和继承</p><p>url反向解析</p></blockquote><hr><h2 id="二-HTTP协议的请求和响应"><a href="#二-HTTP协议的请求和响应" class="headerlink" title="二. HTTP协议的请求和响应"></a>二. HTTP协议的请求和响应</h2><blockquote><p>定义</p><p>​        ==请求==是指浏览器端通过==HTTP协议==发送给服务器端的数据</p><p>​        响应是指==服务器端接收到请求后==做相应的处理后再==回复给浏览器端的数据==</p><p><img src="https://image.cpen.top/image/202205052203494.png" alt="image-20220505220331451"></p></blockquote><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="请求样例"><a href="#请求样例" class="headerlink" title="请求样例"></a>请求样例</h4><blockquote><p><strong>请求样例</strong></p><p><img src="https://image.cpen.top/image/202205052257694.png" alt="image-20220505225754654"></p></blockquote><h4 id="请求中的方法"><a href="#请求中的方法" class="headerlink" title="请求中的方法"></a>请求中的方法</h4><blockquote><p>根据HTTP标准，HTTP请求可以使用多种请求方法</p><p><code>HTTP1.0</code>定义了三种请求方法：GET，POST和HEAD方法（最常用）</p><p><code>HTTP1.1</code>新增了五种请求方法：OPTIONS，PUT，DELETE，TRACE和CONNECT方法</p><p><img src="https://image.cpen.top/image/202205052258651.png" alt="image-20220505225851617"></p><p><img src="https://image.cpen.top/image/202205052259640.png" alt="image-20220505225903610"></p></blockquote><h4 id="Django中的请求"><a href="#Django中的请求" class="headerlink" title="Django中的请求"></a>Django中的请求</h4><blockquote><p>请求在Django中实则就是 <code>视图函数的第一个参数</code>，即HttpRequest对象</p><p><code>Django接收到http协议的请求后</code>，会根据<code>请求数据</code>报文创建<code>HttpRequest对象</code></p><p>HttpRequest对象 通过<code>属性</code> 描述了 请求的 所有相关信息</p><p><code>·path_info</code>：URL字符串</p><p><code>·method</code>：字符串，表示HTTP请求方法，常用值：==`GET`==、==`POST`==</p><p><code>·GET</code>：<code>QueryDict</code>查询字典的对象，包含get请求方法的所有数据</p><p><code>·POST</code>：QueryDict查询字典的对象，包含post请求方式的所有数据</p><p><code>·FILES</code>：类似于字典的对象，包含所有的上传文件信息</p><p>·COOKIES：Python字典，包含所有的cookie，键和值都为字符串</p><p>·session：似于字典的对象，表示当前的会话</p><p>·body：字符串，请求体的内容（POST或PUT）</p><p>·scheme：请求协议（’http’/‘https’）</p><p>·request.get_full_path()：请求的完整路径</p><p>·request.META：请求中的元数据（消息头）</p><p>​    - request.META[‘REMOTE_ADDR’]：客户端IP地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/test_request?a=<span class="number">1</span>&amp;b=<span class="number">1</span></span><br><span class="line">test request ok</span><br><span class="line">终端</span><br><span class="line">path info <span class="keyword">is</span> /test_request</span><br><span class="line">method <span class="keyword">is</span> GET</span><br><span class="line">querystring <span class="keyword">is</span> &lt;QueryDict: &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>], <span class="string">&#x27;b&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>]&#125;&gt;</span><br><span class="line">full path <span class="keyword">is</span> /test_request?a=<span class="number">1</span>&amp;b=<span class="number">1</span></span><br><span class="line">[<span class="number">20</span>/Dec/<span class="number">2021</span> <span class="number">23</span>:<span class="number">27</span>:09] <span class="string">&quot;GET /test_request?a=1&amp;b=1 HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;test_request&#x27;</span>, views.test_request)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_request</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;path info is&#x27;</span>, request.path_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;method is&#x27;</span>, request.method)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;querystring is&#x27;</span>, request.GET)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;full path is&#x27;</span>, request.get_full_path())</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test request ok&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="响应样例"><a href="#响应样例" class="headerlink" title="响应样例"></a>响应样例</h4><blockquote><p><strong>响应样例</strong></p><p><img src="https://image.cpen.top/image/202205052307158.png" alt="image-20220505230704121"></p></blockquote><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><blockquote><p>HTTP状态码的英文为HTTP Status Code</p><p>下面是常见的HTTP状态码：</p><p> - <code>200</code> - 请求成功</p><p> - <code>301</code> - 永久重定向-资源（网页等）被永久转移到其它URL</p><p> - <code>302</code> - 临时重定向</p><p> - <code>404</code> - 请求的资源（网页等）不存在</p><p> - <code>500</code> - 内部服务器错误</p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><p><img src="https://image.cpen.top/image/202205052308576.png" alt="image-20220505230809542"></p></blockquote><h4 id="Django中的响应对象"><a href="#Django中的响应对象" class="headerlink" title="Django中的响应对象"></a>Django中的响应对象</h4><blockquote><p>构造函数格式：</p><p>​        HttpResponse(content=<code>响应体</code>, <code>content_type</code>=响应体数据类型, status=<code>状态码</code>)</p><p>作用：</p><p>​        向客户端浏览器返回响应，同时携带响应体内容</p><p>常用的<strong><code>Conten-Type</code></strong>如下</p><p> - ‘<code>text/html</code>‘（默认的，html文件）</p><p> - ‘text/plain’（纯文本）</p><p> - ‘text/css’（css文件）</p><p> - ‘<code>text/javascript</code>‘（js文件）</p><p> - ‘multipart/form-data’（文件提交）</p><p> - ‘application/<code>json</code>‘（json传输）</p><p> - ‘application/xml’（xml文件）</p><p>-————————————————————————————————-</p><p>HttpResponse子类</p><p><img src="https://image.cpen.top/image/202205052310989.png" alt="image-20220505231038952"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/test_request</span><br><span class="line">  =&gt; http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/page/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;test_request&#x27;</span>, views.test_request)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_request</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/page/1&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;路由&lt;/code&gt; + &lt;code&gt;HTTP请求与响应&lt;/code&gt;</summary>
    
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/categories/Django/"/>
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/tags/Django/"/>
    
    <category term="HTTP" scheme="https://mycpen.github.io/blog/tags/HTTP/"/>
    
    <category term="状态码" scheme="https://mycpen.github.io/blog/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>01_Django-介绍-项目结构-URL和视图函数</title>
    <link href="https://mycpen.github.io/blog/posts/7ef311e28c08.html"/>
    <id>https://mycpen.github.io/blog/posts/7ef311e28c08.html</id>
    <published>2022-08-29T06:40:00.000Z</published>
    <updated>2022-08-29T06:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>MTV</code> + <code>URL</code> + <code>视图函数</code> + <code>项目结构</code><span id="more"></span></p><h1 id="01-Django-介绍-项目结构-URL和视图函数"><a href="#01-Django-介绍-项目结构-URL和视图函数" class="headerlink" title="01_Django-介绍-项目结构-URL和视图函数"></a>01_Django-介绍-项目结构-URL和视图函数</h1><p><a href="https://www.bilibili.com/video/BV1vK4y1o7jH">视频🔗：https://www.bilibili.com/video/BV1vK4y1o7jH</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-课程目录"><a href="#一-课程目录" class="headerlink" title="一. 课程目录"></a>一. 课程目录</h2><blockquote><p>Django介绍</p><p>Django项目结构</p><p>URL和视图函数</p><p>路由配置</p><p><img src="https://image.cpen.top/image/202205042042834.jpg" alt="img"> </p></blockquote><hr><h2 id="二-Django介绍"><a href="#二-Django介绍" class="headerlink" title="二. Django介绍"></a>二. Django介绍</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote><p><strong>2005年发布，采用Python语言编写的开源web框架</strong></p><p><strong>早期的时候Django主做新闻和内容管理的</strong></p><p><strong>重量级的Python Web框架，Django配备了常用的大部分组件</strong></p></blockquote><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><blockquote><p>包含组件如下：</p><p>​        基本配置文件/路由系统</p><p>​        ==模型层(M)/模块层(T)/视图层(V)==</p><p>​        Cookies和Session</p><p>​        分页及发邮件</p><p>​        Admin管理后台</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>用途一：网站/微信公众号/小程序后端开发</p><p><img src="https://image.cpen.top/image/202205042044041.jpg" alt="img"> </p><p>用途二：人工智能平台融合</p><p><img src="https://image.cpen.top/image/202205042044045.jpg" alt="img"> </p></blockquote><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><blockquote><p>Django官网：<a href="http://www.djangoproject.com">http://www.djangoproject.com</a></p><p>Django中文文档参考网站：<a href="https://yiyibooks.cn/">https://yiyibooks.cn/</a></p><p>版本</p><p>​        最新版本3.0.x</p><p>​        当前教学版本2.2.12</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>支持Python的版本 - 3.5，3.6，3.7，3.8</p><p>==在线安装==</p><p>​        虚拟机执行 ==sudo pip3 install django\=\=2.2.12==</p><p>​        检查是否成功 sudo pip3 freeze |grep -i ‘Django’</p><p>==离线安装== - 官方下载离线安装包</p><p>​        将安装包复制到虚拟机</p><p>​        解压缩 tar -xvf Django-2.2.12.tar.gz</p><p>​        进入目录 cd Django-2.2.12</p><p>​        执行安装 sudo python3 setup.py install</p><p>​        检查是否成功 sudo pip3 freeze |grep -i ‘Django’</p></blockquote><hr><h2 id="三-Django项目结构"><a href="#三-Django项目结构" class="headerlink" title="三. Django项目结构"></a>三. Django项目结构</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>成功安装 Django 后，虚拟机终端会有 django-admin 命令</p><p>执行 ==django-admin startproject 项目名== 即可创建出对应项目文件夹</p><p>例如 终端执行 django-admin startproject mysite1; 则创建出mysite1项目</p></blockquote><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote><p>启动[测试开发阶段]</p><p>​        1.终端cd进入到项目文件夹，例如 cd mysite1</p><p>​        2.进入到项目文件夹后，执行 ==<strong>python3 manage.py runserver</strong>== 启动django服务完【注：该启动方式下，Django在前台启动服务，默认监听8000端口】</p><p>​        3.浏览器访问 <strong><a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a></strong> 可看到django的启动页面</p><p>​        注：【如果想更换端口，则可以用 python3 manage.py runserver 端口号】</p></blockquote><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><blockquote><p>方式1：在runserver启动终端下</p><p>​        执行 ==Ctrl + c== 可关闭Django服务</p><p>方式2：在取它终端下</p><p>​        执行 sudo lsof -i:8000 查询出Django的进程id</p><p>​        执行 ==kill -9== 对应Django进程id</p></blockquote><h3 id="启动常见问题"><a href="#启动常见问题" class="headerlink" title="启动常见问题"></a>启动常见问题</h3><blockquote><p>问题：启动时报错</p><p>​        ==Error: That port is already in use.==</p><p>问题原因：端口已被使用，证明当前Django启动时，默认监听的8000端口已被其他进程占用</p><p>解决方案：参考关闭服务</p></blockquote><h3 id="结构解析"><a href="#结构解析" class="headerlink" title="结构解析"></a>结构解析</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">展开mysite1项目，结构如下</span><br><span class="line">$ tree mysite1</span><br><span class="line">mysite1</span><br><span class="line">├── db.sqlite3<span class="comment">#注：默认django数据库存储文件</span></span><br><span class="line">├── manage.py<span class="comment"># *</span></span><br><span class="line">└── mysite1<span class="comment"># *</span></span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── __pycache__</span><br><span class="line">    │   ├── __init__.cpython-39.pyc</span><br><span class="line">    │   ├── settings.cpython-39.pyc</span><br><span class="line">    │   ├── urls.cpython-39.pyc</span><br><span class="line">    │   └── wsgi.cpython-39.pyc</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure></blockquote><h4 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a>manage.py</h4><blockquote><p>==manage.py包含项目管理的子命令==，如：</p><p>​        python3 manage.py runserver 启动服务</p><p>​        python3 manage.py startapp 创建应用</p><p>​        python3 manage.py migrate 数据库迁移</p><p>​        …</p><p>​        直接执行python3 manage.py 可列出所有的Django子命令</p></blockquote><h4 id="项目同名文件夹"><a href="#项目同名文件夹" class="headerlink" title="项目同名文件夹"></a>项目同名文件夹</h4><blockquote><p>项目同名文件夹 - mysite1/mysite1</p><p>​        ==__init__==: Python包的初始化文件</p><p>​        ==wsgi.py==: WEB服务网关的配置文件 - Django正式启动时，需要用到</p><p>​        ==urls.py==: 项目的主路由配置 - HTTP请求进入Django时，优先调用该文件</p><p>​        ==settings.py==: 项目的配置文件 - 包含项目启动时需要的配置</p></blockquote><h4 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h4><blockquote><p>settings.py包含了Django项目启动的所有配置项</p><p>配置项分为 公有配置 和 自定义配置</p><p>配置项格式例：BASE_DIR = ‘xxxx’</p><p>公有配置 - Django官网提供的基础配置</p><p>​        <a href="https://docs/djangoproject.com/en/2.2/ref/settings/">https://docs/djangoproject.com/en/2.2/ref/settings/</a></p></blockquote><h5 id="公有配置"><a href="#公有配置" class="headerlink" title="公有配置"></a>公有配置</h5><blockquote><p>==<strong>BASE_DIR</strong>==</p><p>​        用于绑定当前项目的绝对路径（动态计算出来的），所有文件夹都可以依赖此路径</p><p>==<strong>DEBUG</strong>==</p><p>​        用于配置Django项目的启动模式，取值：</p><p>​        True表示开发环境中使用 开发调试模式（用于开发中）</p><p>​        False表示当前项目运行在 生产环境中</p><p>==<strong>ALLOWED_HOSTS</strong>==</p><p>设置允许访问到本项目的host头值</p><p>​        []空列表, 表示只有请求头中host为 127.0.0.1, localhost 能访问本项目 - DEBUG = True时生效</p><p>​        [‘*’], 表示任何请求头的host都能访问到当前项目</p><p>​        [‘192.168.1.3’, ‘127.0.0.1’] 表示只有当前两个host头的值能访问当前项目</p><p>示例：如果要在局域网其它主机也能访问此主机的Django服务，启动方式如下：</p><p>​        ==python3 manage.py runserver 0.0.0.0:5000==</p><p>​        指定网络设备如果内网环境下其它主机想正常访问该站点，需要加ALLOWED_HOSTS=[‘内网ip’]</p><p>==<strong>INSTALLED_APPS</strong>== - 指定当前项目中安装的应用列表</p><p>==<strong>MIDDLEWARE</strong>== - 用于注册中间件</p><p>==<strong>TEMPLATES</strong>== - 用于指定模板的配置信息</p><p>==<strong>DATABASES</strong>== - 用于指定数据库的配置信息</p><p>==<strong>LANGUAGE_CODE</strong>== - 用于指定语言配置</p><p>​        英语: “en-us”</p><p>​        中文: “zh-Hans”</p><p>==<strong>TIME_ZONE</strong>== - 用于指定当前服务器端时区</p><p>​        世界标准时间: “UTC”</p><p>​        中国时区: “Asia/Shanghai”</p><p>==<strong>ROOT_URLCONF</strong>== - 用于配置主url配置 ‘mysite1.urls’</p><p>​        ROOT_URLCONF = ‘mysite1.urls’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目绝对路径</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 启动模式</span></span><br><span class="line"><span class="comment"># True - 调试模式</span></span><br><span class="line"><span class="comment"># 1,检测代码改动后，立刻重启服务</span></span><br><span class="line"><span class="comment"># 2,报错页面</span></span><br><span class="line"><span class="comment"># False - 正式启动模式 / 上线模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#请求头Host头</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"><span class="comment">#ALLOWED_HOSTS = [&#x27;www.tedu1.com&#x27;]</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h5><blockquote><p>settings.py中也可以添加 开发人员 ==自定义的配置==</p><p>配置建议：名字尽量个性化 - 以防覆盖掉公有配置</p><p>​        例如：ALIPAY_KEY = ‘xxxxxx’</p><p>settings.py中的所有配置项，都可以按需的在代码中引入</p><p>引入方式：==from django.conf import settings==</p></blockquote><hr><h2 id="四-URL和视图函数"><a href="#四-URL和视图函数" class="headerlink" title="四. URL和视图函数"></a>四. URL和视图函数</h2><h3 id="URL-结构"><a href="#URL-结构" class="headerlink" title="URL - 结构"></a>URL - 结构</h3><blockquote><p>定义 - 即统一资源定位符 Uniform Resource Locator</p><p>作用 - 用来表示互联网上某个资源的地址</p><p>URL的一般语法格式为（注：[] 代表其中的内容可省略）：</p><p>​        ==protocol://hostname[:port]/path[?query][#fragment]==</p><p>​        <a href="http://tts.tmooc.cn/video/showVideo?menuld=657421&amp;version=AID999#subject">http://tts.tmooc.cn/video/showVideo?menuld=657421&amp;version=AID999#subject</a></p></blockquote><h4 id="protocol（协议）"><a href="#protocol（协议）" class="headerlink" title="protocol（协议）"></a>protocol（协议）</h4><blockquote><p><strong>==<a href="http://==tts.tmooc.cn">http://==tts.tmooc.cn</a></strong></p><p>http 通过HTTP访问该资源。格式 http://</p><p>https 通过安全的HTTPS访问该资源。格式 https://</p><p>file资源是本地计算机上的文件。格式 file:///</p></blockquote><h4 id="hostname（主机名）"><a href="#hostname（主机名）" class="headerlink" title="hostname（主机名）"></a>hostname（主机名）</h4><blockquote><p><strong>http:// ==tts.tmooc.cn==</strong></p><p>是指存放资源的服务器的域名系统（DNS）主机名、域名 或 IP地址</p></blockquote><h4 id="port（端口号）"><a href="#port（端口号）" class="headerlink" title="port（端口号）"></a>port（端口号）</h4><blockquote><p><strong><a href="http://tts.tmooc.cn">http://tts.tmooc.cn</a> ==:80==</strong></p><p>整数，可选，省略时使用方案的默认端口</p><p>各种传输协议都有默认的端口号，如http的默认端口为80</p></blockquote><h4 id="path（路由地址）"><a href="#path（路由地址）" class="headerlink" title="path（路由地址）"></a>path（路由地址）</h4><blockquote><p><strong><a href="http://tts.tmooc.cn/">http://tts.tmooc.cn/</a> ==video/showVideo==</strong></p><p>由零或多个 “/” 符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。路由地址决定了服务器端如何处理这个请求</p></blockquote><h4 id="query（查询）"><a href="#query（查询）" class="headerlink" title="query（查询）"></a>query（查询）</h4><blockquote><p><strong>video/showVideo==?menuld=657421&amp;version=AID999==</strong></p><p>可选，用于给动态网页传递参数，可有多个参数，用 “&amp;” 符号隔开，每个参数的名和值用 “=” 符号隔开</p></blockquote><h4 id="fragment（信息片段）"><a href="#fragment（信息片段）" class="headerlink" title="fragment（信息片段）"></a>fragment（信息片段）</h4><blockquote><p><strong>Version=AID999==#subject==</strong></p><p><a href="https://docs.djangoproject.com/en/2.2/">https://docs.djangoproject.com/en/2.2/</a> ==#the-template-layer==</p><p>字符串，用于指定网络资源中的片段。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释</p></blockquote><h3 id="处理URL请求"><a href="#处理URL请求" class="headerlink" title="处理URL请求"></a>处理URL请求</h3><blockquote><p>浏览器 地址栏 -&gt; <strong><a href="http://127.0.0.1:8000/page/2003/">http://127.0.0.1:8000/page/2003/</a></strong></p><p>​        1.Django从配置文件中 根据 ==ROOT_URLCONF== 找到 主路由文件；默认情况下，该文件在 项目同名目录下的urls；例如 ==mysite1/mysite1/urls.py==</p><p>​        2.Django加载 主路由文件中的 ==urlpatterns== 变量【包含很多路由的数组】</p><p>​        3.依次匹配 urlpatterns 中的 URL，匹配到第一个合适的中断后续匹配</p><p>​        4.匹配成功 - 调用对应的视图函数处理请求，返回响应</p><p>​        5.匹配失败 - 返回404响应</p></blockquote><h3 id="主路由-urls-py"><a href="#主路由-urls-py" class="headerlink" title="主路由 - urls.py"></a>主路由 - urls.py</h3><blockquote><p>主路由 - urls.py 样例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line">form . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;page/2003/&#x27;</span>, views.page_2003),</span><br><span class="line">    path(<span class="string">&#x27;page/2004/&#x27;</span>, views.page_2004),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><blockquote><p>视图函数是用于==接收一个浏览器请求==（==HttpRequest==对象）并通过==HttpRequest==对象==返回响应==的函数。此函数可以接收浏览器请求并根据业务逻辑返回相应的响应内容给浏览器</p><p>语法</p><p>​        def xxx_view(<strong>==request==</strong>[, 其它参数…]):</p><p>​                <strong>==return HttpResponse对象==</strong></p><blockquote><p>样例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: &lt;项目同名文件夹下&gt;/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;这是第1个页面&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/page/<span class="number">2003</span>/</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/urls.py</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment">#http://127.0.0.1:8000/page/2003/</span></span><br><span class="line">    path(<span class="string">&#x27;page/2003/&#x27;</span>, views.page_2003_view)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"> &lt;项目同名文件夹下&gt;/views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_2003_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;这是第1个页面&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;MTV&lt;/code&gt; + &lt;code&gt;URL&lt;/code&gt; + &lt;code&gt;视图函数&lt;/code&gt; + &lt;code&gt;项目结构&lt;/code&gt;</summary>
    
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/categories/Django/"/>
    
    
    <category term="Django" scheme="https://mycpen.github.io/blog/tags/Django/"/>
    
    <category term="MTV" scheme="https://mycpen.github.io/blog/tags/MTV/"/>
    
    <category term="URL" scheme="https://mycpen.github.io/blog/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>03_Java-运算符-标识符命名规则规范-键盘输入-进制</title>
    <link href="https://mycpen.github.io/blog/posts/a0158bb9e345.html"/>
    <id>https://mycpen.github.io/blog/posts/a0158bb9e345.html</id>
    <published>2022-08-29T06:30:00.000Z</published>
    <updated>2022-08-29T06:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>运算符</code> + <code>标识符</code> + <code>进制</code><span id="more"></span></p><h1 id="03-Java-运算符-标识符命名规则规范-键盘输入-进制"><a href="#03-Java-运算符-标识符命名规则规范-键盘输入-进制" class="headerlink" title="03_Java-运算符-标识符命名规则规范-键盘输入-进制"></a>03_Java-运算符-标识符命名规则规范-键盘输入-进制</h1><p><a href="https://www.bilibili.com/video/BV1fh411y7R8">视频🔗：https://www.bilibili.com/video/BV1fh411y7R8</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>运算符</strong></p><ul><li>运算符介绍</li></ul><p>​        运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><ol><li><p>算术运算符 </p></li><li><p>赋值运算符 </p></li><li><p>关系运算符 [比较运算符] </p></li><li><p>逻辑运算符 </p></li><li><p>位运算符 [需要二进制基础] </p></li><li><p>三元运算符 </p></li></ol><hr><h3 id="一-算术运算符"><a href="#一-算术运算符" class="headerlink" title="一. 算术运算符"></a>一. 算术运算符</h3><p><strong>算术运算符</strong></p><ul><li><p>介绍 </p><p>算术运算符是对数值类型的变量进行运算的，在 Java 程序中使用的非常多。 </p></li></ul><ul><li>算术运算符一览</li></ul><blockquote><p><code>% 的本质    看一个公式：a % b = a - a / b * b</code></p><p><code>a % b    当 a 是小数时，公式 = a - (int)a / b * b</code></p><p><img src="https://image.cpen.top/image/202205082301910.png" alt="image-20220508230138805" style="zoom: 67%;" /></p><p><img src="https://image.cpen.top/image/202205092131114.png" alt="image-20220509213107049" style="zoom:67%;" /></p></blockquote><hr><ul><li>案例演示</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082304543.png" alt="image-20220508230401456" style="zoom: 67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示算术运算符的使用 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// /使用</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">4</span>); <span class="comment">//从数学来看是2.5, java中 2</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">4</span>); <span class="comment">//java是2.5</span></span><br><span class="line"><span class="comment">// 注释快捷键 ctrl + /, 再次输入 ctrl + / 取消注释</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;<span class="comment">//java中10 / 4 = 2, 2=&gt;2.0 </span></span><br><span class="line">System.out.println(d);<span class="comment">// 是2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// % 取模 ,取余</span></span><br><span class="line"><span class="comment">// 在 % 的本质 看一个公式!!!! a % b = a - a / b * b</span></span><br><span class="line"><span class="comment">// -10 % 3 =&gt; -10 - (-10) / 3 * 3 = -10 + 9 = -1</span></span><br><span class="line"><span class="comment">// 10 % -3 = 10 - 10 / (-3) * (-3) = 10 - 9 = 1</span></span><br><span class="line"><span class="comment">// -10 % -3 =  (-10) - (-10) / (-3) * (-3) = -10 + 9 = -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">System.out.println(-<span class="number">10</span> % <span class="number">3</span>); <span class="comment">// -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % -<span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % -<span class="number">3</span>);<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++的使用</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">i++;<span class="comment">//自增 等价于 i = i + 1; =&gt; i = 11</span></span><br><span class="line">++i;<span class="comment">//自增 等价于 i = i + 1; =&gt; i = 12</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作为表达式使用</span></span><br><span class="line"><span class="comment">        前++：++i先自增后赋值</span></span><br><span class="line"><span class="comment">        后++：i++先赋值后自增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//int k = ++j; //等价 j=j+1;k=j; </span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j++; <span class="comment">// 等价 k =j;j=j+1;</span></span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;j=&quot;</span> + j);<span class="comment">//8 9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>细节说明</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082326729.png" alt="image-20220508232614621" style="zoom:67%;" /></p></blockquote><hr><p>算数运算符使用</p><ul><li>面试题</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082326225.png" alt="image-20220508232646110" style="zoom: 67%;" /></p><ul><li>自增，自减课堂练习, 看看输出什么</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082338509.png" alt="image-20220508233829424" style="zoom:67%;" /></p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperatorExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int i = 1;//i-&gt;1</span></span><br><span class="line"><span class="comment">// i = i++; //规则使用临时变量: (1) temp=i;(2) i=i+1;(3)i=temp;</span></span><br><span class="line"><span class="comment">// System.out.println(i); // 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// int i=1;</span></span><br><span class="line"><span class="comment">// i=++i; //规则使用临时变量: (1) i=i+1;(2) temp=i;(3)i=temp;</span></span><br><span class="line"><span class="comment">// System.out.println(i); //2</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i1++;</span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//20</span></span><br><span class="line">        i = --i2; </span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//19</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//19</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>课堂练习 2        //ArithmeticOperatorExercise02.java </li></ul><ol><li><p>假如还有 59 天放假，问：合 xx 个星期零 xx 天 </p></li><li><p>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。 [234.5] </p></li><li><p>代码 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//课堂练习</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperatorExercise02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.需求:</span></span><br><span class="line"><span class="comment">//假如还有59天放假，问：合xx个星期零xx天</span></span><br><span class="line"><span class="comment">//2.思路分析</span></span><br><span class="line"><span class="comment">//(1) 使用int 变量 days 保存 天数</span></span><br><span class="line"><span class="comment">//(2) 一个星期是7天 星期数weeks： days / 7 零xx天leftDays days % 7</span></span><br><span class="line"><span class="comment">//(3) 输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.走代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">25911</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">weeks</span> <span class="operator">=</span> days / <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">leftDays</span> <span class="operator">=</span> days % <span class="number">7</span>;</span><br><span class="line">System.out.println(days + <span class="string">&quot;天 合&quot;</span> + weeks + <span class="string">&quot;星期零&quot;</span> </span><br><span class="line">+ leftDays + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.需求</span></span><br><span class="line"><span class="comment">//定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为</span></span><br><span class="line"><span class="comment">//：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//2思路分析</span></span><br><span class="line"><span class="comment">//(1) 先定义一个double huaShi 变量保存 华氏温度</span></span><br><span class="line"><span class="comment">//(2) 根据给出的公式，进行计算即可5/9*(华氏温度-100)</span></span><br><span class="line"><span class="comment">//    考虑数学公式和java语言的特性</span></span><br><span class="line"><span class="comment">//(3) 将得到的结果保存到double sheShi</span></span><br><span class="line"><span class="comment">//3走代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">huaShi</span> <span class="operator">=</span> <span class="number">1234.6</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sheShi</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">9</span> * (huaShi - <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;华氏温度&quot;</span> + huaShi </span><br><span class="line">+ <span class="string">&quot; 对应的摄氏温度=&quot;</span> + sheShi);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二-关系运算符-比较运算符"><a href="#二-关系运算符-比较运算符" class="headerlink" title="二. 关系运算符(比较运算符)"></a>二. 关系运算符(比较运算符)</h3><p><strong>关系运算符(比较运算符) </strong></p><ul><li><strong>介绍</strong></li></ul><ol><li><p>关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false </p></li><li><p>关系表达式 经常用在 if 结构的条件中或循环结构的条件中 </p></li></ol><ul><li><strong>关系运算符一览</strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205090011985.png" alt="image-20220509001153917" style="zoom: 67%;" /></p></blockquote><ul><li><strong>案例演示</strong></li></ul><p>案例演示关系运算符的使用(RelationalOperator.java)。 </p><blockquote><p><img src="https://image.cpen.top/image/202205090015981.png" alt="image-20220509001501843" style="zoom: 67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示关系运算符的使用</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RelationalOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">9</span>;  <span class="comment">//老韩提示:  开发中，不可以使用  a, b </span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">System.out.println(a &gt; b);<span class="comment">//T </span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">//T</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">//F</span></span><br><span class="line">System.out.println(a &lt; b);  <span class="comment">//F</span></span><br><span class="line">System.out.println(a == b); <span class="comment">//F</span></span><br><span class="line">System.out.println(a != b); <span class="comment">//T</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> a &gt; b; <span class="comment">//T</span></span><br><span class="line">System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>细节说明</strong></li></ul><ol><li><p>关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false。 </p></li><li><p>关系运算符组成的表达式，我们称为关系表达式。 a &gt; b </p></li><li><p>比较运算符”==”不能误写成”=” </p></li></ol><hr><h3 id="三-逻辑运算符"><a href="#三-逻辑运算符" class="headerlink" title="三. 逻辑运算符"></a>三. 逻辑运算符</h3><p><strong>逻辑运算符</strong></p><ul><li><strong>介绍</strong></li></ul><p>​        用于连接多个条件（多个关系表达式），最终的结果也是一个 boolean 值。 </p><ul><li><strong>逻辑运算符一览</strong></li></ul><p>分为两组学习 </p><ol><li><p><code>短路与 &amp;&amp; ， 短路或 ||，取反 !</code></p></li><li><p><code>逻辑与 &amp;，逻辑或 |，^ 逻辑异或</code></p></li></ol><blockquote><p><img src="https://image.cpen.top/image/202205090021561.png" alt="image-20220509002134483" style="zoom: 67%;" /></p></blockquote><ul><li>[x] <strong>说明逻辑运算规则</strong>： </li></ul><ol><li><p>a&amp;b : &amp; 叫逻辑与：规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false </p></li><li><p>a&amp;&amp;b : &amp;&amp; 叫短路与：规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false </p></li><li><p>a|b : | 叫逻辑或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false </p></li><li><p>a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false </p></li><li><p>!a : 叫取反，或者非运算。当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true </p></li><li><p>a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</p></li></ol><hr><h4 id="短路与逻辑与"><a href="#短路与逻辑与" class="headerlink" title="短路与逻辑与"></a>短路与逻辑与</h4><ul><li><strong>&amp;&amp; 和 &amp; 基本规则</strong></li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>语法</th><th>特点</th></tr></thead><tbody><tr><td>短路与&amp;&amp;</td><td>条件 1&amp;&amp;条件 2</td><td>两个条件都为 true，结果为 true,否则 false</td></tr><tr><td>逻辑与&amp;</td><td>条件 1&amp;条件 2</td><td>两个条件都为 true，结果为 true,否则 false</td></tr></tbody></table></div><ul><li><strong>&amp;&amp; 和 &amp; 案例演示</strong></li></ul><p>案例演示&amp;&amp; 和 &amp; 运算符的使用(LogicOperator01.java)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示逻辑运算符的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicOperator01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//&amp;&amp;短路与  和 &amp; 案例演示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> &amp;&amp; age &lt; <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;逻辑与使用</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> &amp; age &lt; <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok200&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="comment">//对于&amp;&amp;短路与而言，如果第一个条件为false ,后面的条件不再判断</span></span><br><span class="line"><span class="comment">//对于&amp;逻辑与而言，如果第一个条件为false ,后面的条件仍然会判断</span></span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">1</span> &amp; ++b &lt; <span class="number">50</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b);<span class="comment">// 4 10</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>&amp;&amp; 和 &amp; 使用区别</strong></li></ul><ol><li><p>&amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高 </p></li><li><p>&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低 </p></li><li><p>开发中， 我们使用的基本是使用短路与<code>&amp;&amp;</code>, 效率高</p></li></ol><hr><h4 id="短路或逻辑或"><a href="#短路或逻辑或" class="headerlink" title="短路或逻辑或"></a>短路或逻辑或</h4><ul><li><strong>|| 和 | 基本规则</strong></li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>语法</th><th>特点</th></tr></thead><tbody><tr><td>短路或\</td><td>\</td><td></td><td>条件 1\</td><td>\</td><td>条件2</td><td>两个条件中只要有一个成立，结果为 true,否则为 false</td></tr><tr><td>逻辑或\</td><td></td><td>条件 1\</td><td>条件2</td><td>只要有一个条件成立，结果为 true,否则为 false</td></tr></tbody></table></div><ul><li><strong>|| 和 | 案例演示</strong></li></ul><p>案例演示&amp;&amp; || !运算符的使用(LogicOperator02.java)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示| || 使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicOperator02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//||短路或  和 |逻辑或 案例演示</span></span><br><span class="line"><span class="comment">//|| 规则: 两个条件中只要有一个成立，结果为true,否则为false</span></span><br><span class="line"><span class="comment">//| 规则: 两个条件中只要有一个成立，结果为true,否则为false</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> || age &lt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//|逻辑或使用</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> | age &lt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok200&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看看区别</span></span><br><span class="line"><span class="comment">//(1)||短路或：如果第一个条件为true，</span></span><br><span class="line"><span class="comment">//则第二个条件不会判断，最终结果为true，效率高</span></span><br><span class="line"><span class="comment">//(2)| 逻辑或：不管第一个条件是否为true，第二个条件都要判断，效率低</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt; <span class="number">1</span> || ++b &gt; <span class="number">4</span>) &#123; <span class="comment">// 可以换成 | 测试</span></span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b); <span class="comment">//4 9</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>|| 和 | 使用区别</strong></li></ul><ol><li><p>||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高 </p></li><li><p>| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低 </p></li><li><p>开发中，我们基本使用 <code>||</code></p></li></ol><hr><h4 id="逻辑非逻辑异或"><a href="#逻辑非逻辑异或" class="headerlink" title="逻辑非逻辑异或"></a>逻辑非逻辑异或</h4><ul><li><strong>! 取反 基本规则</strong></li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>语法</th><th>特点</th></tr></thead><tbody><tr><td>! 非（取反）</td><td>!条件</td><td>如果条件本身成立，结果为 false，否则为 true</td></tr></tbody></table></div><ul><li><strong>! 案例演示</strong></li></ul><p>案例演示 !运算符的使用(InverseOperator.java)。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//!和^案例演示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InverseOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! 操作是取反 T-&gt;F  , F -&gt; T</span></span><br><span class="line">System.out.println(<span class="number">60</span> &gt; <span class="number">20</span>); <span class="comment">//T</span></span><br><span class="line">System.out.println(!(<span class="number">60</span> &gt; <span class="number">20</span>)); <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为true, 否则为false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="number">10</span> &gt; <span class="number">1</span>) ^ ( <span class="number">3</span> &gt; <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);<span class="comment">//T</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>^ 案例演示</strong></li></ul><p>a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</p><p>^逻辑异或，System.out.println( (4 &lt; 1) ^ (6 &gt; 3) ); // T</p><hr><p><strong>逻辑运算符练习</strong></p><ul><li>练习题 1 请写出每题的输出结果</li></ul><blockquote><p>x ++== 6，先比较，再自增</p><p><img src="https://image.cpen.top/image/202205091319381.png" alt="image-20220509131958291" style="zoom:67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int x = 5;</span></span><br><span class="line"><span class="comment">// int y=5;</span></span><br><span class="line"><span class="comment">// if(x++==6 &amp; ++y==6)&#123; //逻辑与</span></span><br><span class="line"><span class="comment">// x = 11;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span></span><br><span class="line"><span class="comment">// //6, 6</span></span><br><span class="line"><span class="comment">// int x = 5,y = 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if(x++==6 &amp;&amp; ++y==6)&#123;</span></span><br><span class="line"><span class="comment">// x = 11;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span></span><br><span class="line"><span class="comment">// //6, 5</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// int x = 5,y = 5;</span></span><br><span class="line"><span class="comment">// if(x++==5 | ++y==5)&#123;</span></span><br><span class="line"><span class="comment">// x =11;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span></span><br><span class="line"><span class="comment">//11, 6</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// int x = 5,y = 5;</span></span><br><span class="line"><span class="comment">// if(x++==5 || ++y==5)&#123;</span></span><br><span class="line"><span class="comment">// x =11;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;x=&quot;+x+&quot;,y=&quot;+y);</span></span><br><span class="line"><span class="comment">//11, 5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">boolean</span> x=<span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> y=<span class="literal">false</span>;</span><br><span class="line"><span class="type">short</span> z=<span class="number">46</span>;</span><br><span class="line"><span class="keyword">if</span>( (z++==<span class="number">46</span>)&amp;&amp; (y=<span class="literal">true</span>) )   z++;  </span><br><span class="line"><span class="keyword">if</span>((x=<span class="literal">false</span>) || (++z==<span class="number">49</span>))  z++; </span><br><span class="line">System. out.println(<span class="string">&quot;z=&quot;</span>+z); <span class="comment">//50 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>练习题 2 请写输出结果</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205091324402.png" alt="image-20220509132450314" style="zoom:67%;" /></p></blockquote><hr><h3 id="四-赋值运算符"><a href="#四-赋值运算符" class="headerlink" title="四. 赋值运算符"></a>四. 赋值运算符</h3><ul><li><strong>介绍</strong></li></ul><p>赋值运算符就是将某个运算后的值，赋给指定的变量。 </p><ul><li><p><strong>赋值运算符的分类</strong></p></li><li><p>[x] 基本赋值运算符 =      int a = 10; </p></li><li><p>[x] 复合赋值运算符 </p></li></ul><p>​        += ，-= ，*= ， /= ，%= 等 , 重点讲解一个 += ，其它的使用是一个道理 </p><p>​        a += b;         [等价 a = a + b; ] </p><p>​        a -= b;          [等价 a = a - b; ]</p><ul><li><strong>案例演示</strong></li></ul><p>案例演示赋值运算符的基本使用。AssignOperator.java </p><ol><li><p>赋值基本案例 [int num1 = 10] </p></li><li><p>+= 的使用案例 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示赋值运算符的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">n1 += <span class="number">4</span>;<span class="comment">// n1 = n1 + 4;</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 14</span></span><br><span class="line">n1 /= <span class="number">3</span>;<span class="comment">// n1 = n1 / 3;//4</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复合赋值运算符会进行类型转换</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>赋值运算符特点</strong></li></ul><ol><li><p>运算顺序从右往左        int num = a + b + c; </p></li><li><p>赋值运算符的左边 只能是变量,右边 可以是变量、表达式、常量值 </p></li></ol><p>​        int num = 20; int num2= 78 * 34 - 10; int num3 = a; </p><ol><li>复合赋值运算符等价于下面的效果 </li></ol><p>​        比如：a+=3;等价于 a=a+3; 其他类推 </p><ol><li>复合赋值运算符会进行类型转换。 </li></ol><p>​        byte b = 2; b+=3; b++;</p><blockquote><p><img src="https://image.cpen.top/image/202205091347006.png" alt="image-20220509134732958" style="zoom: 67%;" /></p></blockquote><hr><h3 id="五-三元运算符"><a href="#五-三元运算符" class="headerlink" title="五. 三元运算符"></a>五. 三元运算符</h3><ul><li><strong>基本语法</strong></li></ul><p>条件表达式 ? 表达式 1: 表达式 2; </p><p><code>运算规则</code>： </p><ol><li><p>如果条件表达式为 true，运算后的结果是表达式 1； </p></li><li><p>如果条件表达式为 false，运算后的结果是表达式 2； </p></li></ol><p>口诀: [一灯大师：<strong>一真大师</strong>] </p><ul><li><strong>案例演示</strong> TernaryOperator.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元运算符使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TernaryOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="comment">// 解读</span></span><br><span class="line"><span class="comment">// 1. a &gt; b 为 false</span></span><br><span class="line"><span class="comment">// 2. 返回 b--, 先返回 b的值,然后在 b-1</span></span><br><span class="line"><span class="comment">// 3. 返回的结果是99 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>使用细节</strong> TernaryOperatorDetail.java</li></ul><ol><li><p>表达式 1 和表达式 2 要为可以赋给接收变量的类型(或可以自动转换) </p></li><li><p>三元运算符可以转成 if—else 语句</p></li></ol><p>​        int res = a &gt; b ? a++ : —b; </p><p>​        if ( a &gt; b) res = a++; </p><p>​        else res = —b; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元运算符细节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TernaryOperatorDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//表达式1和表达式2要为可以赋给接收变量的类型</span></span><br><span class="line"><span class="comment">//(或可以自动转换/或者强制转换)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? (<span class="type">int</span>)<span class="number">1.1</span> : (<span class="type">int</span>)<span class="number">3.4</span>;<span class="comment">//可以的</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> a &gt; b ? a : b + <span class="number">3</span>;<span class="comment">//可以的，满足 int -&gt; double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>课堂练习</strong></li></ul><p><strong>案例：实现三个数的最大值</strong> TernaryOperatorExercise.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TernaryOperatorExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//案例：实现三个数的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">553</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 先得到 n1 和 n2 中最大数 , 保存到 max1</span></span><br><span class="line"><span class="comment">//2. 然后再 求出 max1 和  n3中的最大数，保存到 max2</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line"><span class="type">int</span> <span class="variable">max2</span> <span class="operator">=</span> max1 &gt; n3 ? max1 : n3;</span><br><span class="line">System.out.println(<span class="string">&quot;最大数=&quot;</span> + max2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一条语句实现, 推荐使用上面方法</span></span><br><span class="line"><span class="comment">//老师提示: 后面我们可以使用更好方法,比如排序</span></span><br><span class="line"><span class="comment">// int max = (n1 &gt; n2 ? n1 : n2) &gt; n3 ? </span></span><br><span class="line"><span class="comment">// (n1 &gt; n2 ? n1 : n2) : n3;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;最大数=&quot; + max);</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="六-运算符优先级"><a href="#六-运算符优先级" class="headerlink" title="六. 运算符优先级"></a>六. 运算符优先级</h3><p><strong>运算符优先级</strong></p><ol><li><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。 </p></li><li><p>只有单目运算符、赋值运算符是从右向左运算的。 </p></li><li><p>一览表, 不要背，使用多了，就熟悉了</p></li></ol><blockquote><p><strong>梳理小节</strong>：小伙伴有一个大致印象，使用多了，就熟悉</p><ol><li>() , {} 等</li><li>单目运算  ++ —</li><li>算数运算符</li><li>位移运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>三元运算符</li><li>赋值运算符</li></ol><p><img src="https://image.cpen.top/image/202205091622856.png" alt="image-20220509162226749" style="zoom: 67%;" /></p></blockquote><hr><h2 id="标识符命名规则和规范"><a href="#标识符命名规则和规范" class="headerlink" title="标识符命名规则和规范"></a>标识符命名规则和规范</h2><h3 id="七-标识符规则"><a href="#七-标识符规则" class="headerlink" title="七. 标识符规则"></a>七. 标识符规则</h3><p><strong>标识符的命名<code>规则</code>和<code>规范</code></strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091628391.png" alt="image-20220509162810243" style="zoom:67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">abcclass</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);<span class="comment">//40</span></span><br><span class="line">System.out.println(<span class="string">&quot;N=&quot;</span> + N);<span class="comment">//50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//? abc 和 aBc 是两个不同变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">aBc</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int a b = 300;//x</span></span><br><span class="line"><span class="comment">//int a-b=10;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">goto1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>判断下面变量名是否正确</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hsp<span class="comment">//ok </span></span><br><span class="line">hsp12<span class="comment">//ok </span></span><br><span class="line">1hsp<span class="comment">//错误, 数字不能开头 </span></span><br><span class="line">h-s<span class="comment">// 错误 , 不能有 - </span></span><br><span class="line">x h<span class="comment">// 错误， 有空格 </span></span><br><span class="line">h$<span class="number">4</span><span class="comment">// ok </span></span><br><span class="line">class<span class="comment">//错误，class 关键字 </span></span><br><span class="line"><span class="type">int</span> <span class="comment">// 错误 ,int 是关键字 </span></span><br><span class="line"><span class="type">double</span><span class="comment">//错误 ,double 是关键字 </span></span><br><span class="line"><span class="keyword">public</span><span class="comment">//错误 ,public 是关键字 </span></span><br><span class="line"><span class="keyword">static</span><span class="comment">//错误 ,static 是关键字 </span></span><br><span class="line">goto<span class="comment">//错误, goto 是保留字 </span></span><br><span class="line">stu_name<span class="comment">//ok</span></span><br></pre></td></tr></table></figure><hr><h3 id="八-标识符规范"><a href="#八-标识符规范" class="headerlink" title="八. 标识符规范"></a>八. 标识符规范</h3><p><strong>标识符命名规范[更加专业]</strong></p><ol><li><p>包名：多单词组成时所有字母都小写：aaa.bbb.ccc //比如 com.hsp.crm </p></li><li><p>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰] </p></li></ol><p>​        比如： TankShotGame </p><ol><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小驼峰， 简称 驼峰法] </li></ol><p>​        比如： tankShotGame </p><ol><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ </li></ol><p>​        比如 ：定义一个所得税率 TAX_RATE </p><ol><li>后面我们学习到 类，包，接口，等时，我们的命名规范要这样遵守,更加详细的看文档.</li></ol><hr><h3 id="九-关键字保留字"><a href="#九-关键字保留字" class="headerlink" title="九. 关键字保留字"></a>九. 关键字保留字</h3><p><strong>关键字</strong></p><p>关键字的定义和特点 (<strong><code>不用背</code></strong>) </p><p>定义：被 Java 语言赋予了特殊含义，用做 <strong>专门用途的字符串</strong>（单词） </p><p>特点：关键字中所有字母都为小写</p><blockquote><p><img src="https://image.cpen.top/image/202205091647948.png" alt="image-20220509164734847" style="zoom: 67%;" /></p><p><img src="https://image.cpen.top/image/202205091647396.png" alt="image-20220509164755233" style="zoom:67%;" /></p></blockquote><hr><p><strong>保留字</strong></p><ul><li><strong>介绍</strong></li></ul><p>​        Java 保留字：现有 Java 版本<strong>尚未使用</strong>，但<strong>以后版本可能会作为关键字使用</strong>。自己命名标识符时要避免使用这些保留字 </p><p>byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var 、 goto 、const </p><hr><h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><h3 id="十-键盘输入"><a href="#十-键盘输入" class="headerlink" title="十. 键盘输入"></a>十. 键盘输入</h3><p><strong>键盘输入语句</strong></p><ul><li><strong>介绍</strong></li></ul><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。Input.java , 需要一个 扫描器(对象), 就是 Scanner</p><ul><li><strong>步骤 ：</strong></li></ul><ol><li><p>导入该类的所在包, java.util.* </p></li><li><p>创建该类对象（声明变量） </p></li><li><p>调用里面的功能 </p></li></ol><blockquote><p><img src="https://image.cpen.top/image/202205091653715.png" alt="image-20220509165317654" style="zoom: 67%;" /></p></blockquote><ul><li><strong>案例演示：</strong> </li></ul><p>要求：可以从控制台接收用户信息，【姓名，年龄，薪水】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//表示把java.util下的Scanner类导入 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示接受用户的输入</span></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//Scanner类 表示 简单文本扫描器，在java.util 包</span></span><br><span class="line"><span class="comment">//1. 引入/导入 Scanner类所在的包</span></span><br><span class="line"><span class="comment">//2. 创建 Scanner 对象 , new 创建一个对象,体会</span></span><br><span class="line"><span class="comment">//   myScanner 就是 Scanner类的对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3. 接收用户输入了， 使用 相关的方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当程序执行到 next 方法时，会等待用户输入~~~</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入int</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入double</span></span><br><span class="line">System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;名字=&quot;</span> + name </span><br><span class="line">+ <span class="string">&quot; 年龄=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + sal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/202205091705772.png" alt="image-20220509170543727" style="zoom:67%;" /></p></blockquote><hr><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="十一-四种进制介绍"><a href="#十一-四种进制介绍" class="headerlink" title="十一. 四种进制介绍"></a>十一. 四种进制介绍</h3><p><strong>进制(程序员的基本功)</strong></p><ul><li><strong>进制介绍</strong></li></ul><p>对于整数，有四种表示方式： </p><p>二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。 </p><p>十进制：0-9 ，满 10 进 1。 </p><p>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。 </p><p>十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 <strong>0x</strong> <strong>或</strong> <strong>0X</strong> 开头表示。此处的 A-F 不区分大小写。</p><ul><li><strong>举例说明</strong> BinaryTest.java</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205091711778.png" alt="image-20220509171113729" style="zoom: 80%;" /></p><p><img src="https://image.cpen.top/image/202205091713548.png" alt="image-20220509171329500" style="zoom: 80%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示四种进制</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTest</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n1 二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">//n2 10进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//n3 8进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">01010</span>;</span><br><span class="line"><span class="comment">//n4 16进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">0X10101</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);</span><br><span class="line">System.out.println(<span class="string">&quot;n2=&quot;</span> + n2);</span><br><span class="line">System.out.println(<span class="string">&quot;n3=&quot;</span> + n3);</span><br><span class="line">System.out.println(<span class="string">&quot;n4=&quot;</span> + n4);</span><br><span class="line">System.out.println(<span class="number">0x23A</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>进制的图示</strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205091714710.png" alt="image-20220509171412620" style="zoom: 67%;" /></p><p><img src="https://image.cpen.top/image/202205091715746.png" alt="image-20220509171547659" style="zoom:67%;" /></p></blockquote><hr><p><strong>进制的转换(基本功)</strong></p><p><strong>进制转换的介绍</strong></p><ul><li>第一组： </li></ul><ol><li><p>二进制转十进制 </p></li><li><p>八进制转十进制 </p></li><li><p>十六进制转十进制 </p></li></ol><ul><li>第二组： </li></ul><ol><li><p>十进制转二进制 </p></li><li><p>十进制转八进制 </p></li><li><p>十进制转十六进制 </p></li></ol><ul><li>第三组 </li></ul><ol><li><p>二进制转八进制 </p></li><li><p>二进制转十六进制 </p></li></ol><ul><li>第四组 </li></ul><ol><li><p>八进制转二进制 </p></li><li><p>十六进制转二进制 </p></li></ol><ul><li><strong>其他进制转十进制</strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205091721120.png" style="zoom: 67%;" /></p></blockquote><h3 id="十二-2进制转10进制"><a href="#十二-2进制转10进制" class="headerlink" title="十二. 2进制转10进制"></a>十二. 2进制转10进制</h3><p><strong>二进制转换成十进制示例</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091722031.png" alt="image-20220509172209929" style="zoom: 67%;" /></p></blockquote><h3 id="十三-8进制转10进制"><a href="#十三-8进制转10进制" class="headerlink" title="十三. 8进制转10进制"></a>十三. 8进制转10进制</h3><p><strong>八进制转换成十进制示例</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091726949.png" alt="image-20220509172629860"></p></blockquote><h3 id="十四-16进制转10进制"><a href="#十四-16进制转10进制" class="headerlink" title="十四. 16进制转10进制"></a>十四. 16进制转10进制</h3><p><strong>十六进制转换成十进制示例</strong></p><p>规则：<code>从最低位(右边)开始，将每个位上的数提取出来，乘以 16 的(位数-1)次方，然后求和</code>。 </p><p>案例：请将 0x23A 转成十进制的数 </p><p>0x23A = 10 <em> 16^0 + 3 </em> 16 ^ 1 + 2 * 16^2 = 10 + 48 + 512 = 570 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">0x23A</span>);<span class="comment">//570</span></span><br></pre></td></tr></table></figure><p>课堂练习：请将 </p><p>0b110001100 转成 十进制 </p><p>02456 转成十进制 </p><p>0xA45 转成十进制 </p><hr><p><strong>十进制转其它进制</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091733796.png" alt="image-20220509173320742" style="zoom: 67%;" /></p></blockquote><h3 id="十五-10进制转2进制"><a href="#十五-10进制转2进制" class="headerlink" title="十五. 10进制转2进制"></a>十五. 10进制转2进制</h3><p><strong>十进制转换成二进制</strong></p><p>规则：<code>将该数不断除以 2，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制</code>。 </p><p>案例：请将 <code>34</code> 转成二进制 = <code>0B00100010</code></p><blockquote><p><img src="https://image.cpen.top/image/202205091941102.png" alt="image-20220509194122002" style="zoom:50%;" /></p></blockquote><h3 id="十六-10进制转8进制"><a href="#十六-10进制转8进制" class="headerlink" title="十六. 10进制转8进制"></a>十六. 10进制转8进制</h3><p><strong>十进制转换成八进制</strong></p><p>规则：<code>将该数不断除以 8，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的八进制</code>。 </p><p>案例：请将 <code>131</code> 转成八进制 =&gt; <code>0203</code></p><blockquote><p><img src="https://image.cpen.top/image/202205091945088.png" alt="image-20220509194522001" style="zoom:50%;" /></p></blockquote><h3 id="十七-10进制转16进制"><a href="#十七-10进制转16进制" class="headerlink" title="十七. 10进制转16进制"></a>十七. 10进制转16进制</h3><p><strong>十进制转换成十六进制</strong></p><p>规则：<code>将该数不断除以 16，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的十六进制</code>。 </p><p>案例：请将 <code>237</code> 转成十六进制 =&gt; <code>0xED</code></p><blockquote><p><img src="https://image.cpen.top/image/202205091946894.png" alt="image-20220509194651804" style="zoom:50%;" /></p></blockquote><ul><li>课堂练习：(一定练习，使用计算器/用程序去验证) </li></ul><p>​        123 转成 二进制 =&gt; ? </p><p>​        678 转成八进制 =&gt; 04126</p><p>​        8912 转成十六进制 =&gt; ? </p><hr><p><strong>二进制转换成八进制、十六进制</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091950138.png" alt="image-20220509195013056" style="zoom:67%;" /></p></blockquote><h3 id="十八-2进制转8进制"><a href="#十八-2进制转8进制" class="headerlink" title="十八. 2进制转8进制"></a>十八. 2进制转8进制</h3><p>规则：<code>从低位开始,将二进制数每三位一组，转成对应的八进制数即可</code>。 </p><p>案例：请将 <code>ob11010101</code> 转成八进制 </p><p>ob11(3)010(2)101(5) =&gt; <code>0325</code></p><blockquote><p><img src="https://image.cpen.top/image/202205091954021.png" alt="image-20220509195435973" style="zoom: 67%;" /></p></blockquote><h3 id="十九-2进制转16进制"><a href="#十九-2进制转16进制" class="headerlink" title="十九. 2进制转16进制"></a>十九. 2进制转16进制</h3><p>规则：<code>从低位开始，将二进制数每四位一组，转成对应的十六进制数即可</code>。 </p><p>案例：请将 <code>ob11010101</code> 转成十六进制 </p><p>ob1101(D)0101(5) = <code>0xD5</code></p><blockquote><p><img src="https://image.cpen.top/image/202205091957282.png" alt="image-20220509195728223" style="zoom:67%;" /></p></blockquote><p>课堂练习：请将 </p><p>​        0b11100101 转成 八进制 </p><p>​        0b1110010110 转成 十六进制 =&gt; 0x396</p><hr><p><strong>八进制、十六进制转成二进制</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205091959650.png" alt="image-20220509195905562" style="zoom:67%;" /></p></blockquote><h3 id="二十-8进制转2进制"><a href="#二十-8进制转2进制" class="headerlink" title="二十. 8进制转2进制"></a>二十. 8进制转2进制</h3><p>规则：<code>将八进制数每 1 位，转成对应的一个 3 位的二进制数即可</code>。 </p><p>案例：请将 <code>0237</code> 转成二进制 </p><p>02(010)3(011)7(111) = <code>0b10011111</code></p><blockquote><p><img src="https://image.cpen.top/image/202205092004043.png" alt="image-20220509200424994" style="zoom: 67%;" /></p></blockquote><h3 id="二一-16进制转2进制"><a href="#二一-16进制转2进制" class="headerlink" title="二一. 16进制转2进制"></a>二一. 16进制转2进制</h3><p>规则：<code>将十六进制数每 1 位，转成对应的</code> <strong><code>4 位的一个二进制数</code></strong><code>即可</code>。 </p><p>案例：请将 <code>0x23B</code> 转成二进制 </p><p>0x2(0010)3(0011)B(1011) = <code>0b001000111011</code></p><blockquote><p><img src="https://image.cpen.top/image/202205092015230.png" alt="image-20220509201525174" style="zoom:67%;" /></p></blockquote><ul><li>课堂练习：请将 </li></ul><p>01230 转成 二进制 </p><p>0xAB29 转成二进制 =&gt; 0xA(1010)B(1011)2(0010)9(1001) =&gt;0b1010101100101001</p><hr><h3 id="二二-位运算思考题"><a href="#二二-位运算思考题" class="headerlink" title="二二. 位运算思考题"></a>二二. 位运算思考题</h3><p><strong>位运算的思考题</strong></p><ol><li>请看下面的代码段，回答 a,b,c,d,e 结果是多少? </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">maiin</span><span class="params">(String []args)</span> </span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">// 1 向右位移 2 位 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b=-<span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//算术右移 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//算术左移 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d=-<span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e=<span class="number">3</span>&gt;&gt;&gt;<span class="number">2</span>;<span class="comment">//无符号右移 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a,b,c,d,e 结果是多少 </span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span>+b); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;c=&quot;</span>+c); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;d=&quot;</span>+d); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;e=&quot;</span>+e); </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol><li>请回答在 java 中，下面的表达式运算的结果是: (位操作)， 晚上练习 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">2</span>=?<span class="comment">// 按位取反 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>&amp;<span class="number">3</span>=?<span class="comment">// 2 按位与 3 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>|<span class="number">3</span>=? </span><br><span class="line"></span><br><span class="line">~-<span class="number">5</span>=? </span><br><span class="line"></span><br><span class="line"><span class="number">13</span>&amp;<span class="number">7</span>=? </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>|<span class="number">4</span>=? </span><br><span class="line"></span><br><span class="line">-<span class="number">3</span>^<span class="number">3</span>=?<span class="comment">//^ 按位异或</span></span><br></pre></td></tr></table></figure><hr><h3 id="二三-原码反码补码"><a href="#二三-原码反码补码" class="headerlink" title="二三. 原码反码补码"></a>二三. 原码反码补码</h3><p><strong>二进制在运算中的说明</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205092025779.png" alt="image-20220509202541652" style="zoom: 67%;" /></p></blockquote><p><strong><code>原码、反码、补码(重点 难点)</code></strong></p><blockquote><p><img src="https://image.cpen.top/image/202205092027076.png" alt="image-20220509202730922" style="zoom:67%;" /></p><p>第 7 点，因为补码把正数、负数统一起来了</p></blockquote><hr><h3 id="二四-位运算"><a href="#二四-位运算" class="headerlink" title="二四. 位运算"></a>二四. 位运算</h3><p><strong>位运算符</strong></p><ul><li>java 中有 7 个位运算(&amp;、|、^、~、&gt;&gt;、&lt;&lt;和 &gt;&gt;&gt;)</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205092039745.png" alt="image-20220509203957600" style="zoom: 50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位运算</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitOperator</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2&amp;3</span></span><br><span class="line"><span class="comment">//看老师的推导过程</span></span><br><span class="line"><span class="comment">//1. 先得到 2的补码 =&gt; 2的原码 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//   2的补码 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//2. 3的补码 3的原码 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">//   3的补码 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">//3. 按位&amp;</span></span><br><span class="line"><span class="comment">//   00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//   00000000 00000000 00000000 00000011 </span></span><br><span class="line"><span class="comment">//   00000000 00000000 00000000 00000010 &amp; 运算后的补码</span></span><br><span class="line"><span class="comment">//   运算后的原码 也是  00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//   结果就是  2</span></span><br><span class="line">System.out.println(<span class="number">2</span>&amp;<span class="number">3</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ~-2</span></span><br><span class="line"><span class="comment">//推导</span></span><br><span class="line"><span class="comment">//1. 先得到 -2的原码 10000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//2. -2的 反码     11111111 11111111 11111111 11111101</span></span><br><span class="line"><span class="comment">//3. -2的 补码       11111111 11111111 11111111 11111110</span></span><br><span class="line"><span class="comment">//4. ~-2操作        00000000 00000000 00000000 00000001运算后的补码</span></span><br><span class="line"><span class="comment">//5. 运算后的原码 就是 00000000 00000000 00000000 00000001 =&gt; 1</span></span><br><span class="line">System.out.println(~-<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//推导</span></span><br><span class="line"><span class="comment">//1. 得到2的补码 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">//2. ~2操作     11111111 11111111 11111111 11111101  运算后的补码</span></span><br><span class="line"><span class="comment">//3. 运算后的反码  11111111 11111111 11111111 11111100</span></span><br><span class="line"><span class="comment">//4. 运算后的原码  10000000 00000000 00000000 00000011=&gt;-3</span></span><br><span class="line">System.out.println(~<span class="number">2</span>); <span class="comment">//-3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>位运算符</strong></p><ul><li>还有 3 个位运算符 <code>&gt;&gt;、&lt;&lt; 和 &gt;&gt;&gt;</code> , 运算规则:</li></ul><ol><li><p>算术右移 &gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位 </p></li><li><p>算术左移 &lt;&lt;: 符号位不变,低位补 0 </p></li><li><p>>&gt;&gt; 逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0 </p></li><li><p>特别说明：没有 &lt;&lt;&lt; 符号 </p></li></ol><ul><li>应用案例 BitOperator02.java</li></ul><ol><li><p>int a=1&gt;&gt;2; //1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0 </p></li><li><p>int c=1&lt;<2; //1 => 00000001 =&gt; 00000100 本质 1 <em> 2 </em> 2 = 4 </p></li></ol><blockquote><p><img src="https://image.cpen.top/image/202205092121652.png" alt="image-20220509212136583" style="zoom:67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitOperator02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="number">1</span> &gt;&gt; <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">1</span> &lt;&lt; <span class="number">2</span>); <span class="comment">//4</span></span><br><span class="line">System.out.println(<span class="number">4</span> &lt;&lt; <span class="number">3</span>); <span class="comment">// 4 * 2 * 2 * 2 = 32</span></span><br><span class="line">System.out.println(<span class="number">15</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// 15 / 2 / 2 = 3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完成前面的案例</li></ul><p>建议：掌握老师讲解的即可，不用再深入</p><hr><p><strong>本章作业</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205092125669.png" alt="image-20220509212539569" style="zoom:50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">10.4</span>%<span class="number">3</span>); <span class="comment">// -1.4近似值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">66</span>;</span><br><span class="line">System.out.println(++i+i); <span class="comment">//134</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/202205092135664.png" alt="image-20220509213557540" style="zoom:50%;" /></p><p><img src="https://image.cpen.top/image/202205092137307.png" alt="image-20220509213758196" style="zoom:50%;" /></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;运算符&lt;/code&gt; + &lt;code&gt;标识符&lt;/code&gt; + &lt;code&gt;进制&lt;/code&gt;</summary>
    
    
    
    <category term="Java" scheme="https://mycpen.github.io/blog/categories/Java/"/>
    
    
    <category term="Java" scheme="https://mycpen.github.io/blog/tags/Java/"/>
    
    <category term="运算符" scheme="https://mycpen.github.io/blog/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
    <category term="进制" scheme="https://mycpen.github.io/blog/tags/%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>02_Java-变量-数据类型</title>
    <link href="https://mycpen.github.io/blog/posts/f377653c3fcc.html"/>
    <id>https://mycpen.github.io/blog/posts/f377653c3fcc.html</id>
    <published>2022-08-29T06:10:00.000Z</published>
    <updated>2022-08-29T06:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>编码</code> + <code>[byte , short , int , long , float ,double] char , boolean</code><span id="more"></span></p><h1 id="02-Java-变量-数据类型"><a href="#02-Java-变量-数据类型" class="headerlink" title="02_Java-变量-数据类型"></a>02_Java-变量-数据类型</h1><p><a href="https://www.bilibili.com/video/BV1fh411y7R8">视频🔗：https://www.bilibili.com/video/BV1fh411y7R8</a><br><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-变量"><a href="#一-变量" class="headerlink" title="一. 变量"></a>一. 变量</h2><h3 id="变量原理"><a href="#变量原理" class="headerlink" title="变量原理"></a>变量原理</h3><p><strong>变量</strong></p><ul><li>为什么需要变量</li></ul><blockquote><p>一个程序就是一个世界</p><p><img src="https://image.cpen.top/image/202205081522508.png" alt="image-20220508152241409" style="zoom:50%;" /></p></blockquote><ul><li><code>变量是程序的基本组成单位</code></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081525550.png" alt="image-20220508152541414" style="zoom:50%;" /></p></blockquote><ul><li><strong><code>简单的原理示意图</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081526570.png" alt="image-20220508152603437" style="zoom:67%;" /></p></blockquote><hr><h3 id="变量概念"><a href="#变量概念" class="headerlink" title="变量概念"></a>变量概念</h3><p><strong>变(变化)量(值)的介绍 </strong></p><ul><li>概念</li></ul><p>​        <strong><code>变量相当于内存中一个数据存储空间</code></strong>的表示，你可以把变量看做是一个房间的门牌号，通过<strong>门牌号</strong>我们可以找到房 </p><p>间，而通过变量名可以访问到变量(值)。</p><ul><li>变量使用的基本步骤</li></ul><ol><li>声明变量 </li></ol><p>​        int a; </p><ol><li>赋值</li></ol><p>​        a = 60; //应该这么说: 把 60 赋给 a </p><ol><li>使用 System.out.println(a); </li></ol><p>​        //也可以一步到位    [int a = 60; 通常我们是一步完成] </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Var01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">System.out.println(a); </span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以这样使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line">System.out.println(b); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="变量入门"><a href="#变量入门" class="headerlink" title="变量入门"></a>变量入门</h3><p><strong>变量快速入门</strong></p><p>变量使用入门案例 </p><p>看演示并对代码进行说明， <strong>演示记录 人的信息的代码</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205081541203.png" alt="image-20220508154108162"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Var02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//记录人的信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88.9</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;king&quot;</span>;</span><br><span class="line"><span class="comment">//输出信息, 快捷键</span></span><br><span class="line">System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(age);</span><br><span class="line">System.out.println(score);</span><br><span class="line">System.out.println(gender);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="变量细节"><a href="#变量细节" class="headerlink" title="变量细节"></a>变量细节</h3><ul><li>变量使用注意事项</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081544320.png" alt="image-20220508154442205" style="zoom: 50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//变量必须先声明，后使用, 即有顺序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">50</span>;<span class="comment">//int</span></span><br><span class="line">System.out.println(a);<span class="comment">//50</span></span><br><span class="line"><span class="comment">//该区域的数据/值可以在同一类型范围内不断变化</span></span><br><span class="line"><span class="comment">//a = &quot;jack&quot;; //×</span></span><br><span class="line">a = <span class="number">88</span>; <span class="comment">//对</span></span><br><span class="line">System.out.println(a);<span class="comment">//88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量在同一个作用域内不能重名</span></span><br><span class="line"><span class="comment">//int a = 77;//错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">666</span>;<span class="comment">//对</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="加号使用"><a href="#加号使用" class="headerlink" title="加号使用"></a>加号使用</h3><ul><li><strong><code>程序中 +号的使用</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081556066.png" alt="image-20220508155649918"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> +<span class="number">3</span>); <span class="comment">//hello1003</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二. 数据类型"></a>二. 数据类型</h2><p><strong>数据类型</strong></p><p>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节)。</p><blockquote><p><img src="https://image.cpen.top/image/202205081601014.png" alt="image-20220508160100958" style="zoom: 67%;" /></p><hr><ul><li>[x] <code>上图说明 [老韩要求小伙伴，背下来!!!!]</code></li></ul><ol><li><strong>java 数据类型分为两大类 <code>基本数据类型， 引用类型</code></strong></li><li><strong>基本数据类型有 <code>8 种 数值型 [byte , short , int , long , float ,double] char , boolean</code> </strong></li><li><strong><code>引用类型 [类，接口， 数组]</code></strong></li></ol></blockquote><hr><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><strong>整数类型</strong></p><ul><li>基本介绍</li></ul><blockquote><p>Java 的整数类型就是用于存放整数值的，比如 12 , 30, 3456 等等</p></blockquote><ul><li>案例演示：</li></ul><blockquote><p>byte n1 = 10; </p><p>short n2 = 10; </p><p>int n3 = 10;//4 个字节 </p><p>long n4 = 10; //8 个字节</p><p><img src="https://image.cpen.top/image/202205081615524.png" alt="image-20220508161536496" style="zoom: 80%;" /></p></blockquote><ul><li><strong><code>整型的类型</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081612814.png" alt="image-20220508161227727" style="zoom: 67%;" /></p></blockquote><ul><li><strong><code>整型的使用细节</code></strong> IntDetail.java</li></ul><blockquote><p><code>bit：计算机中的最小存储单位</code> ；<code>byte：计算机中基本存储单位</code></p><p><img src="https://image.cpen.top/image/202205081740262.png" alt="image-20220508174011108" style="zoom: 50%;" /></p><p><img src="https://image.cpen.top/image/202205081749504.png" alt="image-20220508174900285" style="zoom: 67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java的整型常量（具体值）默认为 int 型，声明long型常量须后加‘l’或‘L’</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//4个字节</span></span><br><span class="line"><span class="comment">//int n2 = 1L;//不对</span></span><br><span class="line"><span class="type">long</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//对</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><strong>浮点类型</strong></p><ul><li>基本介绍</li></ul><blockquote><p>Java 的浮点类型可以表示一个小数，比如 123.4 ，7.8 ，0.12 等等</p></blockquote><ul><li>案例演示</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081756499.png" alt="image-20220508175600469" style="zoom: 67%;" /></p></blockquote><ul><li><code>浮点型的分类</code></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081756711.png" alt="image-20220508175638655" style="zoom: 67%;" /></p></blockquote><ul><li><strong>说明一下</strong></li></ul><ol><li>关于浮点数在机器中存放形式的简单说明,<strong><code>浮点数=符号位+指数位+尾数位</code></strong></li><li>尾数部分可能丢失，<code>造成精度损失</code>(小数都是近似值)。 </li></ol><hr><p><strong>浮点数细节</strong></p><ul><li><code>浮点型使用细节</code> FloatDetail.java </li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081759392.png" alt="image-20220508175933221" style="zoom: 50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FloatDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加‘f’或‘F&#x27;</span></span><br><span class="line"><span class="comment">//float num1 = 1.1; //错误</span></span><br><span class="line"><span class="type">float</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1.1F</span>; <span class="comment">//对的</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">1.1</span>; <span class="comment">//对</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">1.1f</span>; <span class="comment">//对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">.123</span>; <span class="comment">//等价 0.123</span></span><br><span class="line">System.out.println(num5);</span><br><span class="line"><span class="comment">//科学计数法形式:如：5.12e2 [5.12 * 10的2次方 ]      5.12E-2   [5.12 / 10的2次方] </span></span><br><span class="line">System.out.println(<span class="number">5.12e2</span>);<span class="comment">//512.0</span></span><br><span class="line">System.out.println(<span class="number">5.12E-2</span>);<span class="comment">//0.0512</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通常情况下，应该使用double型，因为它比float型更精确。</span></span><br><span class="line"><span class="comment">//[举例说明]double num9 = 2.1234567851;float num10 =  2.1234567851F;</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num9</span> <span class="operator">=</span>  <span class="number">2.1234567851</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">num10</span> <span class="operator">=</span>  <span class="number">2.1234567851F</span>;</span><br><span class="line">System.out.println(num9);</span><br><span class="line">System.out.println(num10);</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数使用陷阱: 2.7 和 8.1 / 3  比较</span></span><br><span class="line"><span class="comment">//看看一段代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num11</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num12</span> <span class="operator">=</span> <span class="number">2.7</span>;<span class="comment">//8.1 / 3; //2.7</span></span><br><span class="line">System.out.println(num11);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num12);<span class="comment">//接近2.7的一个小数，而不是2.7</span></span><br><span class="line"><span class="comment">//得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断是，要小心</span></span><br><span class="line"><span class="comment">//应该是以两个数的差值的绝对值，在某个精度范围内判断</span></span><br><span class="line"><span class="keyword">if</span>( num11 == num12) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确的写法 , ctrl + / 注释快捷键, 再次输入就取消注释</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以通过java API  来看 下一个视频介绍如何使用API</span></span><br><span class="line">System.out.println(Math.abs(num11 - num12));</span><br><span class="line"><span class="comment">//细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/202205081810094.png" alt="image-20220508181024027" style="zoom: 67%;" /></p><p><img src="https://image.cpen.top/image/202205081819949.png" alt="image-20220508181900845" style="zoom:67%;" /></p></blockquote><hr><h3 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java API文档"></a>Java API文档</h3><p><strong>Java API 文档</strong></p><blockquote><p><img src="https://image.cpen.top/image/202205081822551.png" alt="image-20220508182220368" style="zoom:50%;" /></p><p><img src="https://image.cpen.top/image/202205081851674.png" alt="image-20220508185115534" style="zoom: 67%;" /></p></blockquote><hr><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p><strong>字符类型(char)</strong></p><ul><li>基本介绍</li></ul><p>​        字符类型可以表示<code>单个字符</code>,字符类型是 char，char 是两个字节(可以存放汉字)，多个字符我们用字符串 String(我们后面详细讲解 String) </p><ul><li><strong>案例演示</strong> Char01.java </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#代码 </span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>; </span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;韩&#x27;</span>; </span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">97</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示char的基本使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Char01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;韩&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">97</span>; <span class="comment">//说明: 字符类型可以直接存放一个数字</span></span><br><span class="line"></span><br><span class="line">System.out.println(c1);</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println(c3);</span><br><span class="line">System.out.println(c4);<span class="comment">//当输出c4时候，会输出97表示的字符 =&gt; 编码的概念（输出为 a）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>字符型细节</strong></p><ul><li><strong><code>字符类型使用细节</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081910193.png" alt="image-20220508191001995"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在java中，char的本质是一个整数，在默认输出时，是unicode码对应的字符</span></span><br><span class="line"><span class="comment">//要输出对应的数字，可以(int)字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(c1); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//输出&#x27;a&#x27; 对应的 数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)c2);<span class="comment">//强转为 int类型</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;韩&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c3);<span class="comment">//38889</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">38889</span>;</span><br><span class="line">System.out.println(c4);<span class="comment">//韩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码.</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>);<span class="comment">//107</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//课堂小测试</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span> + <span class="number">1</span>;<span class="comment">//98+1==&gt; 99</span></span><br><span class="line">System.out.println((<span class="type">int</span>)c5); <span class="comment">//99</span></span><br><span class="line">System.out.println(c5); <span class="comment">//99 -&gt; 对应的字符 -&gt; 编码表ASCII(规定好的) =&gt; c</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/202205081912794.png" alt="image-20220508191250728" style="zoom: 67%;" /></p><hr><p>ASCII码对照表：</p><p><img src="https://image.cpen.top/image/202205081920627.png" alt="ASCII码对照表" style="zoom:50%;" /></p></blockquote><hr><p><strong>字符型本质</strong></p><ul><li><strong><code>字符类型本质探讨</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081923962.png" alt="image-20220508192303779" style="zoom:67%;" /></p></blockquote><hr><p><strong>常用编码</strong></p><blockquote><ul><li><code>ASCII 码介绍(了解)</code></li></ul><p><img src="https://image.cpen.top/image/202205081938505.png" alt="image-20220508193828402" style="zoom:67%;" /></p><ul><li><code>Unicode 编码介绍(了解)</code></li></ul><p><img src="https://image.cpen.top/image/202205081939699.png" alt="image-20220508193912565" style="zoom:67%;" /></p><ul><li><code>UTF-8 编码介绍(了解)</code></li></ul><p><img src="https://image.cpen.top/image/202205081939863.png" alt="image-20220508193948746" style="zoom:67%;" /></p></blockquote><hr><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p><strong>布尔类型</strong></p><ul><li>布尔类型：boolean</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205081949760.png" alt="image-20220508194909551" style="zoom: 50%;" /></p><p><img src="https://image.cpen.top/image/202205081958309.png" alt="image-20220508195843226" style="zoom:50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boolean01</span> &#123; </span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示判断成绩是否通过的案例</span></span><br><span class="line"><span class="comment">//定义一个布尔变量</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isPass</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(isPass == <span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;考试通过，恭喜&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;考试没有通过，下次努力&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><h4 id="自动类型转"><a href="#自动类型转" class="headerlink" title="自动类型转"></a>自动类型转</h4><p><strong>自动类型转换基础</strong></p><ul><li><strong><code>自动类型转换</code></strong></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082000505.png" alt="image-20220508200046295" style="zoom:50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConvert</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示自动转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;<span class="comment">//ok char -&gt; int</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">80</span>; <span class="comment">//ok int -&gt; double</span></span><br><span class="line">System.out.println(num);<span class="comment">//97</span></span><br><span class="line">System.out.println(d1);<span class="comment">//80.0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>自动类型转换细节</strong></p><ul><li><code>自动类型转换注意和细节</code></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082001882.png" alt="image-20220508200129693" style="zoom:50%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动类型转换细节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConvertDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//细节1： 有多种类型的数据混合运算时，</span></span><br><span class="line"><span class="comment">//系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//float d1 = n1 + 1.1;//错误 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="comment">//double d1 = n1 + 1.1;//对 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1F</span>;<span class="comment">//对 n1 + 1.1 =&gt; 结果类型是 float</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节2: 当我们把精度(容量)大 的数据类型赋值给精度(容量)小 的数据类型时，</span></span><br><span class="line"><span class="comment">//就会报错，反之就会进行自动类型转换。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int n2 = 1.1;//错误 double -&gt; int </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节3: (byte, short) 和 char之间不会相互自动转换</span></span><br><span class="line"><span class="comment">//当把具体数赋给 byte 时，(1)先判断该数是否在byte范围内，如果是就可以</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//对  , -128-127</span></span><br><span class="line"><span class="comment">// int n2 = 1; //n2 是int </span></span><br><span class="line"><span class="comment">// byte b2 = n2; //错误，原因： 如果是变量赋值，判断类型</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// char c1 = b1; //错误， 原因 byte 不能自动转成 char</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节4: byte，short，char  他们三者可以计算，在计算时首先转换为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//short s2 = b2 + s1;//错, b2 + s1 =&gt; int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> b2 + s1;<span class="comment">//对, b2 + s1 =&gt; int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//byte b4 = b2 + b3; //错误: b2 + b3 =&gt; int</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean 不参与转换</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//int num100 = pass;// boolean 不参与类型的自动转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动提升原则： 表达式结果的类型自动提升为 操作数中最大的类型</span></span><br><span class="line"><span class="comment">//看一道题</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num200</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">num300</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">num500</span> <span class="operator">=</span> b4 + s3 + num200 + num300; <span class="comment">//float -&gt; double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p><strong><code>强制类型转换</code></strong></p><ul><li>介绍</li></ul><p>​        自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。使用时要加上强制转换符 ( )，但可能造成 <strong>精度降低或溢出</strong>,<code>格外要注意</code>。 </p><ul><li>案例演示 ForceConvert.java </li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082035050.png" alt="image-20220508203534000" style="zoom: 67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForceConvert</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示强制类型转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.9</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);<span class="comment">//1, 造成精度损失</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>)n2;</span><br><span class="line">System.out.println(<span class="string">&quot;b1=&quot;</span> + b1);<span class="comment">//造成 数据溢出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><code>强制类型转换细节说明</code></li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082040412.png" alt="image-20220508204000221" style="zoom:67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForceConvertDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示强制类型转换</span></span><br><span class="line"><span class="comment">//强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</span></span><br><span class="line"><span class="comment">//int x = (int)10*3.5+6*1.5;//编译错误： double -&gt; int </span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">10</span>*<span class="number">3.5</span>+<span class="number">6</span>*<span class="number">1.5</span>);<span class="comment">// (int)44.0 -&gt; 44</span></span><br><span class="line">System.out.println(x);<span class="comment">//44</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//char c2 = m; //错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m; <span class="comment">//ok</span></span><br><span class="line">System.out.println(c3);<span class="comment">//100对应的字符, d字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="类型转换练习"><a href="#类型转换练习" class="headerlink" title="类型转换练习"></a>类型转换练习</h3><ul><li>基本数据类型转换-练习题</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082047938.png" alt="image-20220508204706715" style="zoom:67%;" /></p></blockquote><hr><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><p><strong>基本数据类型和 String 类型的转换</strong></p><ul><li>介绍和使用 </li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082051513.png" alt="image-20220508205109331" style="zoom:67%;" /></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasic</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型 -&gt; String</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);<span class="comment">// 100  1.1  4.5  true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String -&gt; 对应的基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//会在OOP 讲对象和方法的时候回详细</span></span><br><span class="line"><span class="comment">//解读 使用 基本数据类型对应的包装类，的相应方法，得到基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">System.out.println(num1);<span class="comment">//123</span></span><br><span class="line">System.out.println(num2);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num3);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num4);<span class="comment">//123</span></span><br><span class="line">System.out.println(num5);<span class="comment">//123</span></span><br><span class="line">System.out.println(num6);<span class="comment">//123</span></span><br><span class="line">System.out.println(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么把字符串转成字符char -&gt; 含义是指 把字符串的第一个字符得到</span></span><br><span class="line"><span class="comment">//解读  s5.charAt(0) 得到 s5字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/202205082126362.png" alt="image-20220508212639235" style="zoom:67%;" /></p></blockquote><hr><p><strong>String转基本类型细节</strong></p><ul><li>注意事项</li></ul><p>案例演示: StringToBasicDetail.java </p><ol><li><p>在将 String 类型转成 基本数据类型时，<code>要确保 String 类型能够转成有效的数据</code>，比如 我们可以把 “123” , 转成一个整数，但是不能把 “hello” 转成一个整数</p></li><li><p>如果格式不正确，就会 <strong>抛出异常，程序就会终止</strong>， 这个问题在异常处理章节中，会处理 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示字符串转基本数据类型的细节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasicDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//转成int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(str);<span class="comment">// 抛异常</span></span><br><span class="line">System.out.println(n1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h3><ul><li>本章作业</li></ul><blockquote><p><img src="https://image.cpen.top/image/202205082139428.png" alt="image-20220508213920336" style="zoom: 67%;" /></p><p><img src="https://image.cpen.top/image/202205082139032.png" alt="image-20220508213940898" style="zoom:67%;" /></p></blockquote><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1;</span><br><span class="line">        n1 = <span class="number">13</span>;</span><br><span class="line">        <span class="type">int</span> n2;</span><br><span class="line">        n2 = <span class="number">17</span>;</span><br><span class="line">        <span class="type">int</span> n3;</span><br><span class="line">        n3 = n1 + n2;</span><br><span class="line">        System.out.println(<span class="string">&quot;n3 = &quot;</span> + n3);<span class="comment">//30</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">38</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n5</span> <span class="operator">=</span> n4 - n3;</span><br><span class="line">        System.out.println(<span class="string">&quot;n5 = &quot;</span> + n5);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//使用 char 类型，分别保存 \n \t \r  \\  1  2  3等字符，并打印输出</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//制表位</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;\r&#x27;</span>; <span class="comment">//回车</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="string">&#x27;\\&#x27;</span>; <span class="comment">//输出\</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c6</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c7</span> <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println(c3);</span><br><span class="line">System.out.println(c4);</span><br><span class="line">System.out.println(c5);</span><br><span class="line">System.out.println(c6);</span><br><span class="line">System.out.println(c7);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//编程，保存两本书名，用+拼接，看效果。保存两个性别，</span></span><br><span class="line"><span class="comment">//用加号拼接，看效果。保存两本书价格，用加号拼接，看效果</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="string">&quot;天龙八部&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="string">&quot;笑傲江湖&quot;</span>;</span><br><span class="line">System.out.println(book1 + book2);<span class="comment">//天龙八部笑傲江湖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//性别应该使用char保存</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">System.out.println(c1 + c2);<span class="comment">//得到  男 字符码值 + 女 字符码值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存两本书价格</span></span><br><span class="line"><span class="type">double</span> <span class="variable">price1</span> <span class="operator">=</span> <span class="number">123.56</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">price2</span> <span class="operator">=</span> <span class="number">100.11</span>;</span><br><span class="line">System.out.println(price1 + price2);<span class="comment">//就是 123.56+100.11</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><img src="https://image.cpen.top/image/202205082200764.png" alt="image-20220508220036706" style="zoom: 67%;" /></p></blockquote><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework04</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 姓名年龄成绩性别爱好</span></span><br><span class="line"><span class="comment">     xxxxxxxxxx</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要求：</span></span><br><span class="line"><span class="comment">1) 用变量将姓名、年龄、成绩、性别、爱好存储</span></span><br><span class="line"><span class="comment">2) 使用+</span></span><br><span class="line"><span class="comment">3) 添加适当的注释</span></span><br><span class="line"><span class="comment">4) 添加转义字符, 使用一条语句输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">80.9</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;打篮球&quot;</span>;</span><br><span class="line"><span class="comment">//输出了信息, 可以使用换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;姓名\t年龄\t成绩\t性别\t爱好\n&quot;</span> + name + <span class="string">&quot;\t&quot;</span> </span><br><span class="line">+ age + <span class="string">&quot;\t&quot;</span> + score + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + hobby);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><img src="https://image.cpen.top/image/202205082205511.png" alt="image-20220508220526449" style="zoom: 67%;" /></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;编码&lt;/code&gt; + &lt;code&gt;[byte , short , int , long , float ,double] char , boolean&lt;/code&gt;</summary>
    
    
    
    <category term="Java" scheme="https://mycpen.github.io/blog/categories/Java/"/>
    
    
    <category term="Java" scheme="https://mycpen.github.io/blog/tags/Java/"/>
    
    <category term="编码" scheme="https://mycpen.github.io/blog/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
