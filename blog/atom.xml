<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈鹏的个人主页</title>
  
  
  <link href="https://cpen.top/blog/atom.xml" rel="self"/>
  
  <link href="https://cpen.top/blog/"/>
  <updated>2022-10-11T10:00:01.000Z</updated>
  <id>https://cpen.top/blog/</id>
  
  <author>
    <name>Mycpen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30_Linux基础-shell编程-sed</title>
    <link href="https://cpen.top/blog/posts/4cb758ea.html"/>
    <id>https://cpen.top/blog/posts/4cb758ea.html</id>
    <published>2022-10-11T10:00:00.000Z</published>
    <updated>2022-10-11T10:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>shell</code> + <code>awk</code></p><hr><h1 id="一-sed的整行替换-c">一. sed的整行替换  c</h1><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：sed的整行替换  c</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cp /etc/sysconfig/selinux .</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;/^SELINUX=/c SELINUX=disabled&#x27; selinux </span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cp /etc/ssh/sshd_config .</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;/^#Port/c Port 2233&#x27; sshd_config </span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cat sshd_config |grep Port</span></span><br><span class="line">Port 2233</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20221011221851457.png" alt="image-20221011221851457"></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注：对文件的修改  用sed比较好</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cp /etc/sysconfig/network-scripts/ifcfg-ens33 .#注：网卡配置文件</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># vim ifcfg-ens33 </span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span><span class="comment">#注：none 静态配置ip地址dhcp动态获得ip</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span><span class="comment">#注：网卡连接的名字</span></span><br><span class="line">UUID=<span class="string">&quot;831f1350-14c2-46db-bf53-1937c5feb8f5&quot;</span><span class="comment">#注：网卡的设备编号的唯一值</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span><span class="comment">#注：网卡设备的名字</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span><span class="comment">#注：开机的时候是否激活  yes表示激活启动  no禁用</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.0.38&quot;</span><span class="comment">#注：ip地址</span></span><br><span class="line">NETMASK=255.255.255.0<span class="comment">#注：子网掩码</span></span><br><span class="line">GATEWAY=192.168.0.1<span class="comment">#注：默认网关路由器的接口地址</span></span><br><span class="line">DNS1=192.168.0.1<span class="comment">#注：首选dns服务器</span></span><br><span class="line">DNS2=114.114.114.114<span class="comment">#注：备用dns服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：将ip地址替换，使用sed  整行替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：光猫/调制解调器（modem）</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/image-20221011221926041.png" alt="image-20221011221926041"></p></blockquote><blockquote><p><img src="https://image.cpen.top/image/image-20221011221940988.png" alt="image-20221011221940988"></p><p>需求分析：</p><ol><li><p>read或者位置变量</p></li><li><p>修改配置文件  sed（整行替换 或 局部替换）</p></li><li><p>ip合法判断  --&gt; 正则</p></li></ol></blockquote><hr><h1 id="二-sed的w命令-写入文件">二. sed的w命令  写入文件</h1><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sed的w命令  写入文件</span><br><span class="line"><span class="comment">#示例：把以#开头的行 不写到文件里</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed &#x27;/^#/!w a.txt&#x27; selinux </span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cat selinux |sed &#x27;/^#/!w abc.txt&#x27;</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cat a.txt </span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">SELINUXTYPE=targeted </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20221011222050156.png" alt="image-20221011222050156"></p></blockquote><hr><h1 id="三-sed的替换-核心功能">三. sed的替换 --&gt;核心功能</h1><blockquote><p><img src="https://image.cpen.top/image/image-20221011222143284.png" alt="image-20221011222143284"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/xiaomi/redmi/&#x27; phone.txt #注：替换每一行的第1个xiaomi替换为redmi</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/vivo/nokia/2&#x27; phone.txt #注：替换每一行的第2个vivo替换为nokia</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/oppo/meizu/g&#x27; phone.txt #注：每一行所有的oppo替换为meizu</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/xiaomi/redmi/2g&#x27; phone.txt #注：替换每一行的第2个后所有xiaomi全部替换为redmi</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;/^ONBOOT/ s/yes/no/&#x27; ifcfg-ens33 #注：查找替换 （局部替换）</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;8 s/192.168.0.1/192.168.0.2/&#x27; ifcfg-ens33 #注：根据 行号替换 （局部替换）</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;8 s/GATEWAY.*/GATEWAY=192.168.0.2/&#x27; ifcfg-ens33 #注：整行替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：把所有apple删除 --&gt; 删除部分字符串</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/apple//g&#x27; phone.txt #注：拿空的去替换它</span></span><br><span class="line"></span><br><span class="line">\n  换行</span><br><span class="line">\t  tab</span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s/s/\t/g&#x27; phone.txt </span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------</span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;1c sanchuang&#x27; /etc/hostname </span></span><br><span class="line"></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;3,5s/^/#/&#x27; phone.txt #注：3-5行加注释</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;3,5s/$/ sanchuang/&#x27; phone.txt #注：3-5行 末尾加sanchuang</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;/^DNS2/ s/^/#/&#x27; ifcfg-ens33 #注：注释</span></span><br><span class="line"><span class="comment">#DNS2=114.114.114.114</span></span><br></pre></td></tr></table></figure></blockquote><hr><blockquote><p><img src="https://image.cpen.top/image/image-20221011222225313.png" alt="image-20221011222225313"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># sed -i &#x27;s#/sbin/nologin#/bin/bash#&#x27; passwd </span></span><br></pre></td></tr></table></figure></blockquote><hr><blockquote><p><img src="https://image.cpen.top/image/image-20221011222251704.png" alt="image-20221011222251704"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line">[root@cPen_A 10]<span class="comment"># cat c.txt </span></span><br><span class="line">0.0.0.0</span><br><span class="line">1.1.1.1</span><br><span class="line">2.2.2.2</span><br><span class="line">[root@cPen_A 10]<span class="comment"># cat c.txt|sed -n &#x27;s/$/:80/;H;$&#123;x;s/\n/,/2g;p&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">0.0.0.0:80,1.1.1.1:80,2.2.2.2:80</span><br><span class="line"></span><br><span class="line"> h H    Copy/append pattern space to hold space.</span><br><span class="line"></span><br><span class="line">       g G    Copy/append hold space to pattern space.</span><br><span class="line"></span><br><span class="line"> x      Exchange the contents of the hold and pattern spaces.</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">[root@localhost 10]<span class="comment"># cat c.txt |tr &#x27;\n&#x27; &#x27;,&#x27;|sed -n   &#x27;s/,/:80&amp;/g;p&#x27;|awk -F, &#x27;OFS=&quot;,&quot;&#123;print $1,$2,$3&#125;&#x27;</span></span><br><span class="line">0.0.0.0:80,1.1.1.1:80,2.2.2.2:80</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20221011222324095.png" alt="image-20221011222324095"></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed的命令中&amp;的用法</span><br><span class="line">&amp;用于表示替换命令中的匹配模式</span><br></pre></td></tr></table></figure><hr><blockquote><p><img src="https://image.cpen.top/image/image-20221011222349210.png" alt="image-20221011222349210"></p><p>(正则)  --》对应一个标签–》分组</p><p>从左到右 1开始</p><p>\3 引用第3个分组（标签）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">[root@cPen_A 10]<span class="comment"># echo aaa bbb 123456 ccc | sed -r &#x27;s/([a-z]+) ([a-z]+) ([0-9]+) ([a-z]+)/\3/&#x27;</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="四-模式空间-pattern-space-和暂存空间（hold-space）相关的命令">四. 模式空间(pattern space)和暂存空间（hold space）相关的命令</h1><blockquote><p>模式空间(pattern space)和暂存空间（hold space）相关的命令：</p><p>n 输出模式空间行，读取下一行替换当前模式空间的行，执行下一条处理命令而非第一条命令。</p><p>N 读入下一行，追加到模式空间行后面，此时模式空间有两行。</p><p>h 把模式空间里的行拷贝到暂存空间。</p><p>H 把模式空间里的行追加到暂存空间。</p><p>g 用暂存空间的内容替换模式空间的行。</p><p>G 把暂存空间的内容追加到模式空间的行后。</p><p>x 将暂存空间的内容于模式空间里的当前行互换。</p><p>！ 对所选行以外的所有行应用命令。</p><p><a href="http://blog.csdn.net/itsenlin/article/details/21129405">http://blog.csdn.net/itsenlin/article/details/21129405</a></p></blockquote><hr><h1 id="五-练习">五. 练习</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">练习：</span><br><span class="line">1.编写一个修改ip地址的脚本</span><br><span class="line">提醒用户输入ip、子网掩码、网关、dns服务器地址</span><br><span class="line">直接修改网卡配置文件，然后刷新服务让输入的ip地址信息生效</span><br><span class="line">需要检查输入ip地址是否合法，不能输入空的内容或者字母，如果ip地址不合法或者输入空内容、字母都给予提醒</span><br><span class="line">提醒：空的内容包括回车和空格，可以是多个空格</span><br><span class="line"></span><br><span class="line">需求分析：</span><br><span class="line"><span class="code">1.read或者位置变量</span></span><br><span class="line"><span class="code">2.修改配置文件  sed</span></span><br><span class="line"><span class="code">3.ip合法判断--》正则</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.请将所有的非root用户的uid后面加一个0，gid前面加一个1</span><br><span class="line"><span class="code">复制/etc/passwd 到当前目录下操作</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">3给下列含有大写字母的行，在数字后追加sanchuang  --》sed</span><br><span class="line">   abcd6Sdd9dde</span><br><span class="line">   islHishbxld</span><br><span class="line">   goBke8fji</span><br><span class="line">   daa5nshXxge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.自己编辑一个文件test.txt，内容如下：</span><br><span class="line"><span class="code">0.0.0.0</span></span><br><span class="line"><span class="code">1.1.1.1</span></span><br><span class="line"><span class="code">2.2.2.2</span></span><br><span class="line"><span class="code">输出以下形式：</span></span><br><span class="line"><span class="code">0.0.0.0:80,1.1.1.1:80,2.2.2.2:80</span></span><br><span class="line"><span class="code">5.sed取出/etc/passwd文件的第一列</span></span><br><span class="line"><span class="code">6.sed将PATH环境变量中的冒号换成换行</span></span><br><span class="line"><span class="code">7.sed将PATH环境变量斜杠/换成斜杠\</span></span><br><span class="line"><span class="code">8.sed修改SELINUX配置文件从开启(enforcing)变成禁用(disabled)</span></span><br><span class="line"><span class="code">/etc/sysconfig/selinux</span></span><br><span class="line"><span class="code">9.去掉/etc/passwd文件中第二个字段的x</span></span><br><span class="line"><span class="code">10.将/etc/sysconfig/network-scripts/ifcfg-ens33里的ONBOOT=no修改为yes或者修改下IPADDR后面的ip地址</span></span><br><span class="line"><span class="code">只显示ip add的ip地址</span></span><br><span class="line"><span class="code">11.复制/etc/ssh/sshd_config 到当前目录，然后操作。将sshd_config里的端口号修改为8899</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;shell&lt;/code&gt; + &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-sed的整行替换-c&quot;&gt;一. sed的整行替换  c&lt;/h1&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="Shell" scheme="https://cpen.top/blog/tags/Shell/"/>
    
    <category term="sed" scheme="https://cpen.top/blog/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>29_Linux基础-shell编程-awk-sed</title>
    <link href="https://cpen.top/blog/posts/3ae7567f.html"/>
    <id>https://cpen.top/blog/posts/3ae7567f.html</id>
    <published>2022-10-11T09:00:00.000Z</published>
    <updated>2022-10-11T09:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>shell</code> + <code>awk</code></p><hr><p><strong>awk</strong></p><p>输入分隔符（-F、FS）、输出分隔符（OFS）</p><hr><p>awk里引用shell变量</p><h1 id="一-awk和shell变量交换的问题">一. awk和shell变量交换的问题</h1><p><strong>awk和shell变量交换的问题</strong></p><p>1、使用 -v选项</p><p>2、使用双引号，但是awk内部的$0 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext>等</mtext></mrow><annotation encoding="application/x-tex">1等</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord cjk_fallback">等</span></span></span></span>符号前需要使用\转义</p><p>3、使用单引号，将变量引起来，然后前面加一个$符号再次引用变量的值，相当于取2次值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：使用 -v选项</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># sg=&quot;panjinhao&quot;</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># echo $sg</span></span><br><span class="line">panjinhao</span><br><span class="line">[root@cPen_A ~]<span class="comment"># echo|awk &#x27;&#123;print $sg&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A ~]<span class="comment"># echo|awk -v bsg=$sg &#x27;&#123;print bsg&#125;&#x27;</span></span><br><span class="line">panjinhao</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ls|awk -v bsg=$sg &#x27;&#123;print bsg&#125;&#x27;</span></span><br><span class="line">panjinhao<span class="comment">#注：ls 输出多行</span></span><br><span class="line">panjinhao</span><br><span class="line">……</span><br><span class="line">panjinhao</span><br><span class="line"></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># vim test2.sh </span></span><br><span class="line">awk -v var=<span class="variable">$1</span> -F: <span class="string">&#x27;$1==var&#123;print NR,$0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># bash test2.sh root</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># bash test2.sh sanchuang</span></span><br><span class="line">21 sanchuang:x:1000:1000::/home/sanchuang:/bin/bash</span><br><span class="line"><span class="comment">#注：第1个$1  位置变量，第2个$1 第1个字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：使用双引号，但是awk内部的$0 $1等$符号前需要使用\转义</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># mv=&quot;zhangjie&quot;</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># useradd zhangjie_123</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &quot;/^$mv/&#123;print \$1,\$3&#125;&quot;</span></span><br><span class="line">zhangjie_123 12358</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：使用单引号，将变量引起来，然后前面加一个$符号再次引用变量的值，相当于取2次值</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sg=3</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;/root/&#123;print $1,$&#x27;$sg&#x27;&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">operator 11</span><br></pre></td></tr></table></figure><hr><h1 id="二-进程和进程之间通信的方式">二. 进程和进程之间通信的方式</h1><p>1、共享内存</p><p>2、信号量</p><p>3、信号</p><p>4、管道</p><p>5、队列</p><p>6、Socket</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/shadow</span></span><br><span class="line">第2个字段：密码字段</span><br><span class="line">*操作系统自带的，没有密码的</span><br><span class="line">!!用户建的，没有密码的</span><br><span class="line">提示：密码字段为*、!!表示没有设置密码；密码字段为空说明密码被清除。</span><br><span class="line"><span class="comment">#示例：没有设置密码的用户</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/shadow|awk -F: &#x27;BEGIN&#123;i=0&#125;length($2)&lt;=2&#123;print $1,&quot;没有设置密码&quot;;i++&#125;END&#123;print &quot;一共有&quot;i&quot;个用户&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="三-awk内置函数">三. awk内置函数</h1><p>awk内置的函数：</p><p>​length()</p><p>​int()</p><p>​sqrt()</p><p>​system()</p><p>String Functions</p><p>​sub()</p><p>​index()</p><p>​length()</p><p>​split()</p><p>Numeric Functions</p><p>yum install python3安装python3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：生成0-1之间随机数</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo |awk &#x27;&#123;print rand()&#125;&#x27;</span></span><br><span class="line">0.237788</span><br><span class="line"><span class="comment">#示例：产生0-100之间随机数</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo |awk &#x27;&#123;print rand()*100&#125;&#x27;</span></span><br><span class="line">23.7788</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo |awk &#x27;&#123;print int(rand()*100)&#125;&#x27;</span></span><br><span class="line">23</span><br></pre></td></tr></table></figure><hr><h1 id="四-流控">四. 流控</h1><p>流控：流程控制control flow</p><p>for</p><p>while</p><p>case</p><p>if</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>语句</span><br><span class="line">单分支</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;&#123;if($1 ~ /\&lt;...\&gt;/)print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;$1 ~ /\&lt;.&#123;3&#125;\&gt;/&#123;print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line"></span><br><span class="line">双分支</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;&#123;if($1 ~ /\&lt;...\&gt;/)print $0;else print &quot;不符合要求&quot;&#125;&#x27; /etc/passwd</span></span><br><span class="line">不符合要求</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/image-20221011220439733.png" alt="image-20221011220439733"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#练习</span></span><br><span class="line">/etc/passwd</span><br><span class="line"><span class="variable">$3</span>是uid 用户的编号</span><br><span class="line">如果用户的编号是0  --&gt; 管理员</span><br><span class="line">1~999  --&gt; 程序用户</span><br><span class="line">大于1000 --&gt; 普通用户</span><br><span class="line">最后统计出有多少管理员，多少程序用户，多少普通用户？</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">[root@cPen_A ~]<span class="comment"># awk -F: &#x27;BEGIN&#123;x=0;y=0;z=0&#125;&#123;if($3==&quot;0&quot;) &#123;print $1,&quot;管理员&quot;;x++&#125; else if($3&gt;=1 &amp;&amp; $3&lt;=999) &#123;print $1,&quot;程序用户&quot;;y++&#125; else  &#123;print $1,&quot;普通用户&quot;;z++&#125;&#125;END&#123;print &quot;管理员&quot;x,&quot;程序用户&quot;y,&quot;普通用户&quot;z&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 管理员</span><br><span class="line">bin 程序用户</span><br><span class="line">……</span><br><span class="line">管理员1 程序用户25 普通用户40</span><br></pre></td></tr></table></figure><hr><h1 id="五-awk的for循环、数组">五. awk的for循环、数组</h1><blockquote><p><img src="https://image.cpen.top/image/image-20221011220532360.png" alt="image-20221011220532360"></p><p><img src="https://image.cpen.top/image/image-20221011220538243.png" alt="image-20221011220538243"></p><p><img src="https://image.cpen.top/image/image-20221011220551647.png" alt="image-20221011220551647"></p><p><img src="https://image.cpen.top/image/image-20221011220605574.png" alt="image-20221011220605574"></p><p><img src="https://image.cpen.top/image/image-20221011220614623.png" alt="image-20221011220614623"></p></blockquote><hr><p>awk难点：</p><ol><li><p>正则表达</p></li><li><p>if</p></li><li><p>内置函数</p></li><li><p>内置变量</p></li><li><p>for，数组array</p></li></ol><hr><h1 id="六-sed">六. sed</h1><p>sed是什么？what --&gt; text stream editor<br>有什么用？where  how --&gt; 修改和替换文本 --&gt; modify and substitute</p><p>sed是一种支持正则表达式的非交互式流编工具（stream editor）</p><p>​脚本中修改文本或者文本替换的最佳工具</p><p>交互式：一问一答。比如python3里敲命令</p><blockquote><p><img src="https://image.cpen.top/image/image-20221011220732396.png" alt="image-20221011220732396"></p></blockquote><p><strong>2个空间</strong><br><strong>pattern space --&gt; 处理数据的地方 --&gt; 处理一行数据后，模式空间会清空</strong><br><strong>hold space --&gt; 临时存放数据的地方</strong></p><p>把pattern space放到hold space  命令：h、H</p><p>把hold space放到pattern space  命令：g、G</p><p>#注：性能意识，sed在内存里运行，比磁盘速度快</p><p>#注：容量意识</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：-i选项  直接在文件里进行修改，不输出到屏幕</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;s/xiaomi/redmi/g&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：通过管道传过来</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat chen |sed &#x27;s/xiaomi/redmi/g&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/image-20221011220845338.png" alt="image-20221011220845338"></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># cat -n /etc/passwd|head |tail -6</span></span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"><span class="comment">#示例：-n选项  值显示匹配处理的行 （否则会输出所有）</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;5,10p&#x27;</span></span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><hr><blockquote><p><img src="https://image.cpen.top/image/image-20221011220928234.png" alt="image-20221011220928234"></p></blockquote><h2 id="sed的p命令示例">sed的p命令示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">= :输出行号</span><br><span class="line"></span><br><span class="line">p命令输出的时候：</span><br><span class="line">连续的行</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;1,5p&#x27;</span></span><br><span class="line">不连续的行</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;10p;20p&#x27;</span></span><br><span class="line"></span><br><span class="line">示例：sed的p命令示例</span><br><span class="line">sed -n ‘行号1,行号2p’ 输出文件</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;1,5p&#x27;#注：连续用,号</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;=;1,5p&#x27;#注：=；输出行号</span></span><br><span class="line">1</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">3</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">4</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">5</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">……</span><br><span class="line">14</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;1,$p&#x27;#注：$p最后一行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;5,+5p&#x27;#注：第5行开始 往后加5行</span></span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;5,100!p&#x27;#注：取反，取1到4行</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="comment">#示例：步长值</span></span><br><span class="line"><span class="comment"># cat -n /etc/passwd|sed -n &#x27;1~2p&#x27;</span></span><br><span class="line"><span class="comment"># cat -n /etc/passwd|sed -n &#x27;2~2p&#x27;</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;1~2p&#x27;#注：单数行，1开始每次往后2行</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    11games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    13nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    15dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    17sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    19chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21chenpeng:x:1001:1001::/home/chenpeng:/bin/bash</span><br><span class="line">    23nginx:x:996:994:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;2~2p&#x27;#注：双数行</span></span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    12ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    14systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    16polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">    18postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20mysql:x:1000:1000::/home/mysql:/sbin/nologin</span><br><span class="line">    22redis:x:997:995:Redis Database Server:/var/lib/redis:/sbin/nologin</span><br><span class="line"><span class="comment">#示例：shell变量传到sed里</span></span><br><span class="line"><span class="comment">#双引号  推荐</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># num1=6</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># num2=10</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &quot;$&#123;num1&#125;,$&#123;num2&#125;p&quot;</span></span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"><span class="comment">#单引号</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat -n /etc/passwd|sed -n &#x27;&#x27;$&#123;num1&#125;,$&#123;num2&#125;&#x27;p&#x27;</span></span><br><span class="line">     6<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="comment">#示例：显示包含bash的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;/bash/p&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">chenpeng:x:1001:1001::/home/chenpeng:/bin/bash</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|egrep &quot;bash&quot;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">chenpeng:x:1001:1001::/home/chenpeng:/bin/bash</span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|awk &#x27;/bash/&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">chenpeng:x:1001:1001::/home/chenpeng:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：输出#号开头的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/ssh/ssh_config |sed -n &#x27;/^#/p&#x27;</span></span><br><span class="line"><span class="comment">#示例：输出不是#号开头的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/ssh/ssh_config |sed -n &#x27;/^#/!p&#x27;</span></span><br><span class="line"><span class="comment">#示例：显示 不是#号和!号开头的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/ssh/ssh_config |sed -r -n &#x27;/^#|^$/!p&#x27;#注：-r支持更多正则</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/ssh/ssh_config |egrep -v &#x27;^#|^$&#x27;</span></span><br><span class="line"><span class="comment">#示例：显示 以/结尾的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># df -h|egrep &quot;/$&quot;</span></span><br><span class="line">/dev/mapper/centos-root   17G  9.9G  7.2G   58% /</span><br><span class="line">[root@localhost lianxi]<span class="comment"># df -h|sed -n &#x27;/\/$/p&#x27;</span></span><br><span class="line">/dev/mapper/centos-root   17G  9.9G  7.2G   58% /</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：以a-Z开头的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;/^[a-Z]/p&#x27;</span></span><br><span class="line"><span class="comment">#示例：不以a-Z开头的行</span></span><br><span class="line">[root@localhost lianxi]<span class="comment"># cat /etc/passwd|sed -n &#x27;/^[^a-Z]/p&#x27;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">题目：截取nginx的access.log文件里3月18号15:30:00 -- 16:48:10时间段内的所有访问日志</span><br><span class="line"></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># service firewalld stop#注：立马停止firewalld服务</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># systemctl disable firewalld#注：设置firewalld服务开机不启动--&gt;下次重启机器的时候不启动</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># tail -f access.log#注：动态监控最后一行</span></span><br><span class="line">192.168.0.17 - - [09/Jan/2021:16:36:03 +0800] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 3650 <span class="string">&quot;http://192.168.0.118/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Linux; Android 10; PCT-AL10; HMSCore 5.1.0.300; GMSCore 20.26.14) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 HuaweiBrowser/11.0.5.304 Mobile Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># pwd</span></span><br><span class="line">/var/log/nginx<span class="comment">#注：nginx的日志文件的路径</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># ls</span></span><br><span class="line">access.log  access.log-20201202.gz  error.log  error.log-20201202.gz</span><br><span class="line"><span class="comment">#注：access.log是nginx的访问日志文件，记录访问过我们的网站的信息</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># cat access.log | awk -F&#x27;[()]&#x27; &#x27;&#123;print $2&#125;&#x27;|sort|uniq -c|sort -nr</span></span><br><span class="line">     13 Windows NT 10.0; WOW64<span class="comment">#注：排序去重 再降序排序 显示数量</span></span><br><span class="line">      4 Linux; Android 10; PCT-AL10; HMSCore 5.1.0.300; GMSCore 20.26.14</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">[09/Jan/2021:16:32:46 +0800] --&gt; 09/Jan/2021:16:32:46</span><br><span class="line">[09/Jan/2021:16:33:07 +0800] --&gt; 09/Jan/2021:16:32:46</span><br><span class="line"><span class="comment">#示例：查找该时间段的所有访问日志</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># cat access.log|sed -n &#x27;/09\/Jan\/2021:16:32:46/,/09\/Jan\/2021:16:33:07/p&#x27;</span></span><br><span class="line"><span class="comment">#示例：正则写法</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># cat access.log|sed -r -n &#x27;/09\/Jan\/2021:16:(3[789]|4[0-9]|5[01]):(0[1-9]|[1-5][0-9])/p&#x27;</span></span><br><span class="line"><span class="comment">#注：分钟的范围37~51  秒的范围01~59</span></span><br><span class="line"><span class="comment">#37~51</span></span><br><span class="line"><span class="comment">#37~39</span></span><br><span class="line"><span class="comment">#40~49</span></span><br><span class="line"><span class="comment">#50~51</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#01~59</span></span><br><span class="line">0[1-9]|[1-5][0-9]</span><br></pre></td></tr></table></figure><hr><h2 id="sed的d命令示例">sed的d命令示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sed的d命令示例</span><br><span class="line">删除操作可以根据行号和匹配模式进行操作</span><br><span class="line"><span class="comment">#示例：删除有denghui的行</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># cat /etc/passwd|sed &#x27;/denghui/d&#x27;</span></span><br><span class="line"><span class="comment">#示例：-i动原文件  删除有redmi这行</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;/redmi/d&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：根据行删除</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;2d&#x27; test.txt #注：删除第2行</span></span><br><span class="line">sed查找方式:</span><br><span class="line">1、根据行号</span><br><span class="line">2、根据模式 --&gt;正则表达式=字符+特殊符号</span><br><span class="line">3、根据字符串</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：在第4行后面追加huawei</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;4a huawei&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：在第4行前面插入apple</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;4i apple&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：在VIVO这行前一行插入OPPO</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;/VIVO/i OPPO&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：在VIVO同行后面添加APPLE.&amp;表示前面全部</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;s/VIVO/&amp; APPLE/&#x27; test.txt </span></span><br><span class="line"><span class="comment">#示例：将所有为huawei都替换成sanchuang</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># sed -i &#x27;s/huawei/sanchuang/g&#x27; test.txt </span></span><br><span class="line">sed的命令：</span><br><span class="line">p</span><br><span class="line">d</span><br><span class="line">a</span><br><span class="line">i</span><br><span class="line">s</span><br><span class="line">c</span><br><span class="line">r</span><br><span class="line">w</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;shell&lt;/code&gt; + &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;awk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入分隔符（-F、FS）、输出分隔符（OFS）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;awk里引用shell变量&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="Shell" scheme="https://cpen.top/blog/tags/Shell/"/>
    
    <category term="awk" scheme="https://cpen.top/blog/tags/awk/"/>
    
    <category term="sed" scheme="https://cpen.top/blog/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>28_Linux基础-shell编程-awk</title>
    <link href="https://cpen.top/blog/posts/29e2641c.html"/>
    <id>https://cpen.top/blog/posts/29e2641c.html</id>
    <published>2022-10-11T08:00:00.000Z</published>
    <updated>2022-10-11T08:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>shell</code> + <code>awk</code></p><hr><blockquote><p>/bin下面放二进制文件<br>lib 放系统的公共模块、公共库、公共工具<br>/dev设备文件</p><p>#标准输入、标准输出</p><p>/usr  安装的命令安装的模块 编译安装、rpm安装的程序</p><p>/boot  系统启动会到这里来找</p><p>/proc  保留正在运行的程序</p><p>/proc/sys  正在运行的内核参数进行修改<br>/etc/sysctl.conf  永久修改<br>[root@localhost net]# sysctl -p  生效</p><p>/run  保存pid文件</p><p>/var/log  系统日志</p></blockquote><hr><h1 id="一-脚本调试-x">一. 脚本调试 -x</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：脚本的调试  -x</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># bash -x test.sh </span></span><br><span class="line">+ <span class="built_in">ls</span></span><br><span class="line">aaa2  aaa.py  d.md5  mod1.py  __pycache__  test_class2.py  test_class.py  test.sh  </span><br><span class="line">+ <span class="built_in">echo</span> ok</span><br><span class="line">ok</span><br><span class="line">+ <span class="built_in">echo</span> err</span><br><span class="line">err</span><br></pre></td></tr></table></figure><hr><h1 id="二-小数计算">二. 小数计算</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：小数计算</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo &quot;scale=2;5/3&quot; |bc</span></span><br><span class="line">1.66</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo &quot;5 3&quot; |awk &#x27;&#123;print $1/$2&#125;&#x27;</span></span><br><span class="line">1.66667</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># echo &quot;5 3&quot; |awk &#x27;&#123;printf &quot;%.2f&quot;,$1/$2&#125;&#x27;</span></span><br><span class="line">1.67</span><br></pre></td></tr></table></figure><hr><h1 id="三-打印奇数">三. 打印奇数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：打印奇数</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># for i in `seq 1 2 100` ;do echo $i;done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：或者类似C语言for循环写法</span></span><br></pre></td></tr></table></figure><hr><h1 id="四-合并文件">四. 合并文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：合并文件</span></span><br><span class="line">把用户名字和用户金额统一在一起</span><br><span class="line"><span class="comment">#注：把2个文件按照列合并</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat user.txt </span></span><br><span class="line">100 cp1</span><br><span class="line">200 cp2</span><br><span class="line">300 cp3</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat money.txt </span></span><br><span class="line">100 <span class="variable">$500</span></span><br><span class="line">300 <span class="variable">$600</span></span><br><span class="line">200 <span class="variable">$400</span></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat money.txt |sort -t &quot; &quot; -n &gt;money2.txt</span></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat user.txt |sort -t &quot; &quot; -n &gt;user2.txt                                                                                            </span></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat user2.txt </span></span><br><span class="line">100 cp1</span><br><span class="line">200 cp2</span><br><span class="line">300 cp3</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat money2.txt </span></span><br><span class="line">100 <span class="variable">$500</span></span><br><span class="line">200 <span class="variable">$400</span></span><br><span class="line">300 <span class="variable">$600</span></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># join user2.txt money2.txt </span></span><br><span class="line">100 cp1 <span class="variable">$500</span></span><br><span class="line">200 cp2 <span class="variable">$400</span></span><br><span class="line">300 cp3 <span class="variable">$600</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># paste user2.txt money2.txt </span></span><br><span class="line">100 cp1 100 <span class="variable">$500</span></span><br><span class="line">200 cp2 200 <span class="variable">$400</span></span><br><span class="line">300 cp3 300 <span class="variable">$600</span></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> user_id user_name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> user_id2 user_money</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$user_id</span> == <span class="variable">$user_id2</span> ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$user_id</span> <span class="variable">$user_name</span> <span class="variable">$user_money</span> &gt;&gt; user_money.txt</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt; money.txt</span><br><span class="line"><span class="keyword">done</span> &lt; user.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>sed处理文本</p><p>vim替换文本，用替换模式  按r</p><p>sed在文本外部操作文本里面的内容。做更新替换和删除（比如修改一键化安装脚本  配置文件  用sed去修改）</p><p><a href="http://c.biancheng.net/linux/sed.html">http://c.biancheng.net/linux/sed.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A shell_test]<span class="comment"># vim test.txt</span></span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># sed &#x27;/a/d&#x27; test.txt </span></span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">def</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat test.txt </span></span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># sed -i &#x27;/a/d&#x27; test.txt #注：真正删除成功</span></span><br><span class="line">[root@cPen_A shell_test]<span class="comment"># cat test.txt </span></span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">def</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="五-文本处理">五. 文本处理</h1><blockquote><p><strong>1.文本处理（请使用shell脚本让其满足下列特性）：</strong></p><p>（1）给下列含有大写字母的行，在大写字母后追加数字2020  --》sed</p><p>abcdSdddde</p><p>islHishbxld</p><p>goBkefji</p><p>daanshXxge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i‘s/oldword/newword/g’ c.txt</span><br><span class="line"><span class="comment">#注：s  substitute替换</span></span><br><span class="line">&amp;代表前面匹配的oldword</span><br><span class="line"></span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat c.txt |sed &#x27;s/[A-Z]/&amp;2020/g&#x27;</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># sed -i &#x27;s/[A-Z]/&amp;2020/g&#x27; c.txt#注：对源文件做修改</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">（2）请取出下列以逗号分割符最后一个字段不为0的行,并对最后一个字段以100为最小单位取整取正</span><br><span class="line">   000001,2,115</span><br><span class="line">   000002,2,1,0</span><br><span class="line">   000002,2,1,-200</span><br><span class="line">awk，<span class="built_in">tr</span></span><br><span class="line"></span><br><span class="line">[root@cPen_A ~]<span class="comment"># vim c.txt</span></span><br><span class="line">? ?000001,2,115</span><br><span class="line">? ?000002,2,1,0</span><br><span class="line">? ?000002,2,1,-200</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat c.txt |tail -3|awk -F, &#x27;$NF != 0&#123;print $1,int($NF/100)&#125;&#x27;</span></span><br><span class="line">? ?000001 1</span><br><span class="line">? ?000002 -2</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat c.txt |tail -3|awk -F, &#x27;$NF != 0&#123;print $0,int($NF/100)&#125;&#x27;|tr -d &quot;-&quot;</span></span><br><span class="line">? ?000001,2,115 1</span><br><span class="line">? ?000002,2,1,200 2</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat c.txt |tail -3|awk -F, &#x27;$NF != 0&#123;print $0,sqrt(int($NF/100)*int($NF/100))&#125;&#x27;</span></span><br><span class="line">? ?000001,2,115 1</span><br><span class="line">? ?000002,2,1,-200 2</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat c.txt |tail -3|awk -F, &#x27;$NF != 0&#123;print $0,sqrt(int($NF/100)*int($NF/100)),length($1)&#125;&#x27;</span></span><br><span class="line">? ?000001,2,115 1 9</span><br><span class="line">? ?000002,2,1,-200 2 9</span><br><span class="line"><span class="comment">#注：$NF != 0 最后一项不为0</span></span><br><span class="line"><span class="comment">#注：$0 指全部。sqrt开平方</span></span><br><span class="line"></span><br><span class="line">AWK 里有很多的内置函数</span><br><span class="line">int()</span><br><span class="line">sqrt() 开根号</span><br><span class="line">length()</span><br><span class="line"></span><br><span class="line">[root@cPen_A ~]<span class="comment"># a=-488</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># echo $&#123;a#-&#125;#注：删除-号</span></span><br><span class="line">488</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="六-awk">六. awk</h1><blockquote><p>awk  是什么？</p><p>​awk是linux里的一个文本处理的命令（工具） --&gt; 程序 --&gt; c语言</p><p>unix --&gt; awk</p><p>​为什么要使用awk?</p><p>​截取内容</p><p>bc进行小数运算</p><p>awk也可以</p></blockquote><blockquote><p>字段：field --&gt; 列 column</p><p>name  age  sex  grade</p><p>cali       18   M    70</p><p>rose     19   F      90</p><p>#注：CSV文件  以,作为分割的文件</p><p>$0  存储的是整行数据</p><p>每个数据存入$1-$7中</p></blockquote><blockquote><p>AWK 默认的分隔符是空白（空格、tab）</p><p>输入分隔符</p><p>​-F</p><p>输出分隔符</p><p>​,</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F&quot;:&quot; &#x27;&#123;print $1$3$7&#125;&#x27;</span></span><br><span class="line">root0/bin/bash</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F&quot;:&quot; &#x27;&#123;print $1,$3,$7&#125;&#x27;</span></span><br><span class="line">root 0 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20221011213436007.png" alt="image-20221011213436007"></p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;BEGIN&#123;print &quot;######start######&quot;&#125; /bash$/&#123;print $1,$7&#125;END&#123;print &quot;######end######&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment">######start######</span></span><br><span class="line">root /bin/bash</span><br><span class="line">sanchuang /bin/bash</span><br><span class="line">……</span><br><span class="line">chen223344 /bin/bash</span><br><span class="line"><span class="comment">######end######</span></span><br><span class="line"><span class="comment">#注：/bash$ 以bash结尾的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：统计有多少行</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;BEGIN&#123;i=0&#125; &#123;i++&#125; END&#123;print i&#125;&#x27;</span></span><br><span class="line">65</span><br><span class="line"><span class="comment">#注：不需要用$，因为引用的不是变量</span></span><br><span class="line"><span class="comment">#注：多条命令使用，在&#123;花括号&#125;里放;号</span></span><br><span class="line"><span class="comment">#注：~波浪符号  模糊匹配  ~/feng/； ||  或；&amp;&amp;  且</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="AWK内置变量">AWK内置变量</h2><blockquote><p><strong>AWK内置变量</strong></p><p>NR  代表行号  number of record --&gt; record 记录 --&gt; 行</p><p>NF  代表一行的字段数量  number of field</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>F</mi><mtext>表示最后一个字段；</mtext></mrow><annotation encoding="application/x-tex">NF  表示最后一个字段；</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">NF</span><span class="mord cjk_fallback">表示最后一个字段；</span></span></span></span>(NF-1)倒数第一个字段</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd |awk -F: &#x27;BEGIN&#123;num=0;print &quot;开始统计/etc/passwd文件&quot;&#125; $1 ~ /feng/ || $3 &gt; 1005 &#123;print NR,NF,$1,length($1),$(NF-1),$NF,$3;num++&#125;END&#123;print &quot;统计结束&quot;,num&#125;&#x27;</span></span><br><span class="line">开始统计/etc/passwd文件</span><br><span class="line">24 7 chenpeng1 9 /home/chenpeng1 /bin/bash 1100</span><br><span class="line">25 7 chenpeng2 9 /home/chenpeng2 /bin/bash 1200</span><br><span class="line">……</span><br><span class="line">65 7 nfsnobody 9 /var/lib/nfs /sbin/nologin 65534</span><br><span class="line">统计结束 37</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment">#示例：AWK过滤功能</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;/xiexy/&#x27;</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|egrep &quot;xiexy&quot;</span></span><br><span class="line"><span class="comment">#示例：AWK截取功能</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># who |awk &#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line">tty1</span><br><span class="line">pts/2</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># who |awk &#x27;&#123;print $2,$4&#125;&#x27;</span></span><br><span class="line">tty1 11:23</span><br><span class="line">pts/2 09:38</span><br><span class="line"><span class="comment">#示例：自定义的字符串和字段拼接</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># who |awk &#x27;&#123;print &quot;time:&quot;$4,&quot;name:&quot;$2&#125;&#x27;</span></span><br><span class="line">time:11:23 name:tty1</span><br><span class="line">time:09:38 name:pts/2</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment">#示例：/^[^abcdefg]/  不是以abcdefg开头的行</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;/^[^abcdefg]/&#123;print $1,$7&#125;&#x27;</span></span><br><span class="line"><span class="comment">#示例：/^[^A-z]/  不是A-z字母开头的行</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;/^[^A-z]/&#123;print $1,$7&#125;&#x27;</span></span><br><span class="line"><span class="comment">#示例：指定2个分割符</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|tail -1|awk -F[:/] &#x27;&#123;print $8&#125;&#x27;</span></span><br><span class="line">lib</span><br></pre></td></tr></table></figure><h2 id="awk命令的操作符">awk命令的操作符</h2><blockquote><p>awk命令的操作符<br>比较操作符：匹配符号  ~  !~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># who</span></span><br><span class="line">root     tty1         2020-12-23 11:23</span><br><span class="line">root     pts/2        2021-01-08 09:38 (192.168.0.119)</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># who|awk &#x27;$2 ~ /pts/&#123;print $0&#125;&#x27;</span></span><br><span class="line">root     pts/2        2021-01-08 09:38 (192.168.0.119)</span><br><span class="line"></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;$1 ~/deng/ &amp;&amp; $3&gt;1058 &amp;&amp; $NF ~/bash$/&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="文本数据表达式">文本数据表达式</h2><blockquote><p>文本数据表达式:<br>==  精确匹配<br>~   模糊匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;$3 ~ /\&lt;...\&gt;/ &#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">systemd-network 192</span><br><span class="line">polkitd 999</span><br><span class="line">chrony 998</span><br><span class="line">nginx 997</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># awk -F: &#x27;$3 ~ /\&lt;.&#123;3&#125;\&gt;/ &#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">systemd-network 192</span><br><span class="line">polkitd 999</span><br><span class="line">chrony 998</span><br><span class="line">nginx 997</span><br><span class="line"></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;$1 ~ /deng/ &#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="awk-内置变量和函数">awk 内置变量和函数</h2><blockquote><p><strong>awk 内置变量和函数？</strong><br>NF每行$0的字段数<br>NR当前处理的行号<br>FS  当前的输入分隔符，默认是空白字符（空格和tab） field separator<br>OFS 当前的输出分隔符，默认是空格字符（空格）  output field separator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;&#123;print NR,$0&#125;&#x27;</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash<span class="comment">#注：NR行号</span></span><br><span class="line">2 bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;&#123;print NR,$0,NF&#125;&#x27;</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash 7</span><br><span class="line">2 bin:x:1:1:bin:/bin:/sbin/nologin 7</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk -F: &#x27;&#123;print NR,$0,$NF&#125;&#x27;</span></span><br><span class="line">1 root:x:0:0:root:/root:/bin/bash /bin/bash</span><br><span class="line">2 bin:x:1:1:bin:/bin:/sbin/nologin /sbin/nologin</span><br><span class="line"></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cat /etc/passwd|awk &#x27;FS=&quot;:&quot;;OFS=&quot;#&quot;&#123;print NR,$0,$NF&#125;&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">1<span class="comment">#root:x:0:0:root:/root:/bin/bash#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">2<span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin#/sbin/nologin</span></span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line"><span class="comment">#推荐使用-F指定输入分隔符</span></span><br><span class="line"></span><br><span class="line">===========================================================================================</span><br><span class="line">使用NF变量显示passwd文件倒数第二列的内容</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;&#123;print $(NF-1)&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">显示passwd文件中第5到第10行的用户名</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;NR &gt;= 5 &amp;&amp; NR &lt;= 10 &#123;print $1&#125;&#x27;</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;NR &gt;= 5 &amp;&amp; NR &lt;= 10 &#123;print NR,$1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">显示passwd文件中第7列不是bash的用户名</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;$7 ~ /bash/ &#123;print NR,$1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">显示passwd文件中行号是5结尾的行号和行</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;NR ~ /5$/ &#123;print NR,$1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">用ip add只显示ip(不能使用<span class="built_in">tr</span>或者<span class="built_in">cut</span>命令)</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ip add|awk &#x27;$NF ~ /ens33/ &#123;print $0&#125;&#x27;</span></span><br><span class="line">    inet 192.168.0.118/24 brd 192.168.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ip add|awk &#x27;$NF ~ /ens33/ &#123;print $2&#125;&#x27;</span></span><br><span class="line">192.168.0.118/24</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ip add|awk &#x27;$NF ~ /ens33/ &#123;print $2&#125;&#x27;|awk -F/ &#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line">192.168.0.118</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[root@localhost lianxi]<span class="comment"># yum  install net-tools -y</span></span><br><span class="line">先使用ifconfig，使用awk显示eth0的入站流量和出站流量(字节)</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ifconfig|head -8|awk &#x27;$1 ~ /RX/ &amp;&amp; $4 ~ /bytes/ || $1 ~ /TX/ &amp;&amp; $4 ~ /bytes/ &#123;print $0&#125;&#x27;</span></span><br><span class="line">        RX packets 494598  bytes 38344433 (36.5 MiB)</span><br><span class="line">        TX packets 17025  bytes 1718505 (1.6 MiB)</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ifconfig|head -8|awk &#x27;$1 ~ /RX/ &amp;&amp; $4 ~ /bytes/ || $1 ~ /TX/ &amp;&amp; $4 ~ /bytes/ &#123;print $5&#125;&#x27;</span></span><br><span class="line">38372669</span><br><span class="line">1719743</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ifconfig|head -8|awk &#x27;$0 ~ /RX.*bytes|TX.*bytes/  &#123;print $5&#125;&#x27;</span></span><br><span class="line">38476866</span><br><span class="line">1744541</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：当有&amp;&amp;或者||，&amp;&amp;（and）的优先级高</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">使用awk命令统计以r开头的用户数目，显示如下效果</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/passwd|awk -F: &#x27;BEGIN&#123;i=0&#125; $1 ~ /^r/ &#123;print $1;i++&#125; END&#123;print i&#125;&#x27;</span></span><br><span class="line">root</span><br><span class="line">rpc</span><br><span class="line">rpcuser</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;shell&lt;/code&gt; + &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;/bin下面放二进制文件&lt;br&gt;
lib 放系统的公共模块、公共库、公共工具&lt;br&gt;
/dev设备文件&lt;/p&gt;
&lt;p&gt;#标准输入、标准输出&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="Shell" scheme="https://cpen.top/blog/tags/Shell/"/>
    
    <category term="awk" scheme="https://cpen.top/blog/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>27_Linux基础-nginx</title>
    <link href="https://cpen.top/blog/posts/45562d6f.html"/>
    <id>https://cpen.top/blog/posts/45562d6f.html</id>
    <published>2022-10-11T07:30:00.000Z</published>
    <updated>2022-10-11T07:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>nginx</code></p><hr><p>web方向</p><p>​经典提问：</p><p>​在浏览器里输入一个www.baidu.com回车，到显示出内容，背后发生哪些事情？</p><p>​应用层 --&gt; 传输层 --&gt; 网络层 --&gt; 数据链路层 --&gt; 物理层</p><p>​nginx --&gt; 详细的使用</p><p>​flask --&gt; web服务器 --&gt; python写的 --&gt; 自己写的web服务器软件</p><p>​mvc, usgi等</p><p>​nginx --&gt; web服务器 --&gt; C语言</p><p>​go语言 --&gt; bingo</p><p>​http/https协议</p><hr><p>nginx</p><p>​1.安装 --&gt; 最新版本 --&gt; 编写脚本 --&gt; 一键安装</p><p>​2.nginx的配置文件深入讲解 --&gt; 经典的功能实现</p><p>​3.一定要使用一个云服务器 --&gt; 购买域名 --&gt; 备案 --&gt; 上线</p><p>​4.http协议</p><hr><h1 id="1-nginx是什么？">1. nginx是什么？</h1><p>nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server, originally written by Igor Sysoev.</p><p>​<a href="http://nginx.org/">http://nginx.org/</a></p><p>​http是什么？</p><p>​HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写</p><p>​工作：应用层</p><p>​www --&gt; World Wide Web 万维网</p><p>​协议：其实就规矩，方便双方沟通使用</p><p>​http协议是：浏览器和web服务器之间使用的</p><p>​谁能读懂http协议？</p><p>​所有的浏览器，所有web服务器，爬虫库（requests）等其他</p><hr><h1 id="2-nginx的安装">2. nginx的安装</h1><p>centos8.2nginx-1.19.5</p><p>nginx最新的nginx-1.19.5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen ~]<span class="comment"># cat /etc/centos-release#注：查看版本</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">1.下载</span><br><span class="line"><span class="built_in">mkdir</span> -p /nginx</span><br><span class="line"><span class="built_in">cd</span> /nginx</span><br><span class="line">curl -O http://nginx.org/download/nginx-1.19.5.tar.gz</span><br><span class="line">2.解压</span><br><span class="line">[root@cPen_B nginx]<span class="comment"># tar xf nginx-1.19.5.tar.gz </span></span><br><span class="line">[root@cPen_B nginx]<span class="comment"># cd nginx-1.19.5</span></span><br><span class="line">[root@cPen_B nginx-1.19.5]<span class="comment"># </span></span><br><span class="line">编译安装经典3步：</span><br><span class="line">1.编译前的配置：配置安装到哪里，启用哪些功能等</span><br><span class="line">./configure</span><br><span class="line">2.编译，将c的代码编译成二进制文件</span><br><span class="line">make</span><br><span class="line">3.编译安装，将编译好的二进制文件复制到第一步里我们指定的路径</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_B nginx-1.19.5]<span class="comment"># ./configure --help  查看哪些功能可以开启，哪些功能可以禁用</span></span><br><span class="line">prefix 前缀</span><br><span class="line"></span><br><span class="line">--prefix=/usr/local/nginx   指定安装路径</span><br><span class="line">--with-select_module  启用，默认没有启用</span><br><span class="line">--without-select_module  禁用，默认是启用</span><br><span class="line"></span><br><span class="line">--with-http_ssl_module   启用https功能</span><br><span class="line">--with-http_realip_module  --》修改http协议，里面增加一个字段realip--&gt;nginx服务器做反向代理服务器的时候使用</span><br><span class="line"></span><br><span class="line">============</span><br><span class="line">解决依赖关系</span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel gcc gcc-c++ autoconf automake make </span><br><span class="line"></span><br><span class="line">编译前的配置</span><br><span class="line">[root@cPen_B nginx-1.19.5]<span class="comment"># ./configure --prefix=/usr/local/nginx --user=cPen_nginx --group=cPen_nginx --build=scweb_server --with-threads --with-file-aio --with-http_v2_module --with-http_ssl_module --with-stream</span></span><br><span class="line"></span><br><span class="line">编译</span><br><span class="line">make -j 2</span><br><span class="line"></span><br><span class="line">编译安装</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">启动nginx</span><br><span class="line">[root@cPen_B nginx-1.19.5]<span class="comment"># cd /usr/local/nginx</span></span><br><span class="line">[root@cPen_B nginx]<span class="comment"># ls</span></span><br><span class="line">conf  html  logs  sbin</span><br><span class="line">conf 存放配置文件</span><br><span class="line">html 存放网页文件</span><br><span class="line">logs 存放日志</span><br><span class="line">sbin 存放启动nginx的程序</span><br><span class="line">[root@cPen_B nginx]<span class="comment"># cd sbin/</span></span><br><span class="line">[root@cPen_B sbin]<span class="comment"># ls</span></span><br><span class="line">nginx</span><br><span class="line">[root@cPen_B sbin]<span class="comment"># ./nginx</span></span><br><span class="line">[root@cPen_B sbin]<span class="comment"># lsof -i:80</span></span><br><span class="line">COMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   23548       root    9u  IPv4  66009      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   23549 cPen_nginx    9u  IPv4  66009      0t0  TCP *:http (LISTEN)</span><br><span class="line">[root@cPen_B sbin]<span class="comment"># ps aux|grep nginx</span></span><br><span class="line">root       23548  0.0  0.0  41072   836 ?        Ss   19:09   0:00 nginx: master process ./nginx</span><br><span class="line">cPen_ng+   23549  0.0  0.2  74636  4852 ?        S    19:09   0:00 nginx: worker process</span><br><span class="line"><span class="comment">#注：master是领导，worker真正干活的</span></span><br><span class="line">master process 父进程：管理进程</span><br><span class="line">worker process 子进程：被管理的进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：pstree  查看进程树  -p选项看到进程号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改PATH变量，方便启动nginx和停止nginx</span></span><br><span class="line">[root@cPen_B sbin]<span class="comment"># PATH=/usr/local/nginx/sbin/:$PATH</span></span><br><span class="line">[root@cPen_B sbin]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/nginx/sbin/:/lianxi/sc:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/nginx/sbin:/root/bin:/usr/local/nginx5/sbin:/root/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙和selinux</span></span><br><span class="line">[root@cPen nginx]<span class="comment"># service firewalld stop#注：立马关闭防火墙</span></span><br><span class="line">Redirecting to /bin/systemctl stop firewalld.service</span><br><span class="line">[root@cPen nginx]<span class="comment"># systemctl disable firewalld#注：设置防火墙开机不要启动</span></span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">setenforce 0    <span class="comment">#临时关闭</span></span><br><span class="line">sed -i <span class="string">&#x27;/^SELINUX/ s/enforcing/disabled/&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">sed -i <span class="string">&#x27;/^SELINUX/ s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">开机启动nginx的问题</span><br><span class="line">脚本的方式</span><br><span class="line">思考：如何让编译安装的nginx开机启动？</span><br><span class="line">1./etc/rc.local</span><br><span class="line">[root@sc-nginx sbin]<span class="comment"># echo &quot;/usr/local/nginx/sbin/nginx&quot; &gt;&gt;/etc/rc.local </span></span><br><span class="line">[root@sc-nginx sbin]<span class="comment"># chmod +x /etc/rc.d/rc.local </span></span><br><span class="line"><span class="comment"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span><br><span class="line">    ------------------------------------------------------------------------</span><br><span class="line">    [root@cPen_B ~]<span class="comment"># chmod +x /etc/rc.d/rc.local </span></span><br><span class="line">    <span class="comment">#注：这是给源文件可执行权限</span></span><br><span class="line">    [root@cPen_B ~]<span class="comment"># chmod +x /usr/local/nginx/sbin/nginx</span></span><br><span class="line">    [root@cPen_B ~]<span class="comment"># vim /etc/rc.local    #注：启动的时候会执行这个文件里的脚本</span></span><br><span class="line">    <span class="comment">#注：添加 /usr/local/nginx/sbin/nginx （最好是绝对路径）</span></span><br><span class="line"><span class="comment">#on boot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span> &gt;&gt;/etc/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><hr><p><strong>配置文件</strong></p><p>​路径  /usr/local/nginx/conf/</p><p>​nginx.conf #注：主配置文件</p><p>面试：请你说说nginx配置文件里有哪些常见的配置 （讲它的结构）</p><p>​日志</p><p>​access.log 记录正常的访问</p><p>​error.log  访问出错的信息</p><p>​listen</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">cPen</span> conf]<span class="comment"># cat nginx.conf</span></span><br><span class="line"><span class="comment">#user  nobody;#注：指定启动nginx的用户</span></span><br><span class="line">worker_processes  <span class="number">1</span>;<span class="comment">#注：工作进程的数量 需要和cpu核心的数量一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;#注：日志文件放在哪里，日志级别</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：块 &#123;&#125;</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;<span class="comment">#注：表示nginx可以同时支持的并发数，同时支持多少人访问，具体需要考虑机器的cpu，内存，磁盘IO，网络带宽 --》压力测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;<span class="comment">#注：与http协议相关的</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;<span class="comment">#注：提供http服务的，一个server对应一个网站</span></span><br><span class="line">        <span class="comment">#listen       80;#注：监听的端口</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="comment">#server_name  localhost;#注：为哪个网站(域名)提供网站的</span></span><br><span class="line">        <span class="attribute">server_name</span>  www.cpen.top;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;<span class="comment">#注：访问网页的根</span></span><br><span class="line">            <span class="attribute">root</span>   html;<span class="comment">#注：存放网页的位置</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;<span class="comment">#注：指定首页，其他页面通过链接过去</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;#注：和路由相关的</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置文件里相关配置</strong></p><blockquote><p><img src="https://image.cpen.top/image/image-20221011201523665.png" alt="image-20221011201523665"></p></blockquote><hr><p><strong>防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 8099 -j ACCEPT</span><br></pre></td></tr></table></figure><hr><p>nginx的首页文件</p><p>[root@cPen html]# cd /usr/local/nginx/html/</p><p>[root@cPen html]# vim index.html #注：修改首页</p><p>#注：修改内容自己定义</p><p>#注：修改网页内容不需要刷新nginx服务</p><p>​只有修改nginx的配置文件才需要刷新nginx服务</p><hr><p><strong>使用域名访问：</strong></p><p>​阿里云：没有备案的域名不允许访问</p><p>​腾讯云：没有备案的域名不允许访问</p><p>购买域名–》绑定公网ip–》搞一个首页–》去备案</p><hr><h1 id="3-shell编程语法">3. shell编程语法</h1><p><strong>shell编程语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\  续行</span><br><span class="line">cmd1 &amp;&amp; cmd2</span><br><span class="line">cmd1 || cmd2</span><br><span class="line">cmd1 &amp;&amp; cmd2 || cmd3</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -d <span class="string">&#x27;/usr/local/nginx8/logs&#x27;</span></span><br><span class="line">[ -d /usr/local/nginx8/logs ]  判断/usr/local/nginx8/logs这个目录是否存在</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -f <span class="string">&#x27;/usr/local/nginx8/conf/nginx.conf&#x27;</span> </span><br><span class="line">[ -f /usr/local/nginx8/conf/nginx.conf ]  判断/usr/local/nginx8/conf/nginx.conf这个文件是否存在</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@sc-nginx nginx-1.19.5]<span class="comment"># which killall</span></span><br><span class="line">/usr/bin/killall</span><br><span class="line">[root@sc-nginx nginx-1.19.5]<span class="comment"># rpm -qf /usr/bin/killall </span></span><br><span class="line">psmisc-23.1-5.el8.x86_64</span><br><span class="line"><span class="comment">#注：killall -9 nginx  杀死所有nginx进程</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注：vim编辑器 全部替换</span></span><br><span class="line">:%s/nginx8/nginx18/</span><br></pre></td></tr></table></figure><hr><h1 id="4-web">4. web</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br><span class="line">官方网站    http://nginx.org/en/</span><br><span class="line">     http://nginx.org/en/docs/</span><br><span class="line"></span><br><span class="line">安装        编译</span><br><span class="line"></span><br><span class="line">网站</span><br><span class="line">静态页面  纯html,css,js（没有和数据库交互）</span><br><span class="line"> nginx的强项是解析静态页面</span><br><span class="line">动态页面  需要使用动态编程语言：python，go，java，c#，php等</span><br><span class="line"> 和数据库交互 --&gt; 读写数据</span><br><span class="line">图解</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><img src="https://image.cpen.top/image/image-20221011202103199.png" alt="image-20221011202103199" style="zoom:150%;" /></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">模块</span><br><span class="line">    --with-http_realip_module</span><br><span class="line">    --with-http_ssl_module</span><br><span class="line">    --with-stream  让nginx具有负载均衡，支持4层</span><br><span class="line">     enables building the stream module <span class="keyword">for</span> generic TCP/UDP proxying and load balancing.</span><br><span class="line">启动nginx</span><br><span class="line">    ./nginx</span><br><span class="line">    启动</span><br><span class="line">        ./nginx -s stop  停止</span><br><span class="line">        nginx -s reload  重启</span><br><span class="line">    <span class="built_in">kill</span></span><br><span class="line">    killall</span><br><span class="line">    pstreeyum install psmisc</span><br><span class="line">    lsof -i:80</span><br><span class="line">    netstat -anplut</span><br><span class="line">    PATH变量的修改    PATH=/usr/local/nginx/sbin/:<span class="variable">$PATH</span>  临时修改</span><br><span class="line">                    永久修改 </span><br><span class="line">                    vim /etc/profile  在末尾添加 PATH=/usr/local/nginx/sbin:<span class="variable">$PATH</span></span><br><span class="line">                    </span><br></pre></td></tr></table></figure><hr><p>http协议</p><p>​1.0</p><p>​1.1</p><p>​2.0</p><p>​http2.0比http1.1好在哪里？</p><p>​http和https的区别</p><hr><p><strong>设置xshell小键盘可用</strong></p><blockquote><p><img src="https://image.cpen.top/image/image-20221011202303724.png" alt="image-20221011202303724"></p><p>#注：属性 --》 终端 --》 VT模式 --》 设置为普通</p></blockquote><hr><p>–with-http_realip_module  --》修改http协议，里面增加一个字段realip–&gt;nginx服务器做反向代理服务器的时候使用</p><blockquote><img src="https://image.cpen.top/image/image-20221011202334741.png" alt="image-20221011202334741" style="zoom:150%;" /></blockquote><hr><h1 id="5-nginx安装脚本">5. nginx安装脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen nginx]<span class="comment"># cat onekey_install_nginx.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#time:2020-12-12</span></span><br><span class="line"><span class="comment">#author: cPen</span></span><br><span class="line"><span class="comment">#company: cPen</span></span><br><span class="line"><span class="comment">#mail:1533431376@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建用户，用来启动nginx</span></span><br><span class="line">useradd -s /sbin/nologin cPen_nginx</span><br><span class="line"><span class="comment">#解决依赖关系</span></span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel gcc gcc-c++ autoconf automake make psmisc lsof net-tools vim</span><br><span class="line"></span><br><span class="line"><span class="comment">#download file</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nginx</span><br><span class="line"><span class="built_in">cd</span> /nginx</span><br><span class="line">curl -O http://nginx.org/download/nginx-1.19.5.tar.gz</span><br><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">tar xf nginx-1.19.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.19.5</span><br><span class="line"><span class="comment">#编译前的配置</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --user=cPen_nginx --group=cPen_nginx --build=scweb_server --with-threads --with-file-aio --with-http_v2_module --with-http_ssl_module --with-stream</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译，-j 2 启动2个进程去编译，需要你有2个核心的cpu</span></span><br><span class="line">make -j 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改PATH变量</span></span><br><span class="line">PATH=/usr/local/nginx/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/nginx/sbin:$PATH&#x27;</span> &gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">service firewalld stop</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">setenforce 0    <span class="comment">#临时关闭</span></span><br><span class="line">sed -i <span class="string">&#x27;/^SELINUX/ s/enforcing/disabled/&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">sed -i <span class="string">&#x27;/^SELINUX/ s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#on boot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span> &gt;&gt;/etc/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;nginx&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;web方向&lt;/p&gt;
&lt;p&gt;​		经典提问：&lt;/p&gt;
&lt;p&gt;​				在浏览器里输入一个www.baidu.com回车，到显示出内容，背后发生哪些事情？&lt;/p&gt;
&lt;p&gt;​				应用层 --&amp;gt; 传输层 </summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Nginx" scheme="https://cpen.top/blog/tags/Nginx/"/>
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>26_Linux基础-项目轮廓-回顾ansible-dns-nfs-nginx</title>
    <link href="https://cpen.top/blog/posts/dd4b1092.html"/>
    <id>https://cpen.top/blog/posts/dd4b1092.html</id>
    <published>2022-10-11T07:00:00.000Z</published>
    <updated>2022-10-11T07:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>Linux</code></p><hr><p>ansible<br>playbook<br>nfs<br>nginx<br>dns</p><hr><h1 id="一-ansible">一. ansible</h1><p><strong>ansible</strong></p><p>​是什么？由哪些组成？<br>​有什么作用？<br>​paramiko--》 这个库/模块 ansible实现ssh功能</p><p>---------------------------------------</p><p>是什么？</p><p>ansible是一个自动化运维工具的名称</p><p>---------------------------------------</p><p>由哪些组成？</p><p><strong>ansible组成：</strong></p><p>​1、host inventory--#定义客户机，可以对客户机进行分类：db类，web类…等等</p><p>​2、playbook  --#剧本 让主机按照我给定的剧本去完成一些事情</p><p>​3、module--#模块 实现一个个功能的程序</p><p>​4、pluging --#插件 实现一些额外的小功能</p><p>---------------------------------------</p><p>有什么作用？</p><p>装软件、卸软件、改配置、打补丁、做备份、跑脚本（运维工作）</p><p>---------------------------------------</p><p>ansible是python写的，底层是ssh</p><p>---------------------------------------</p><p>paramiko--》 这个库/模块 ansible实现ssh功能</p><p>---------------------------------------</p><p>sshpass 模块 --》linux命令 实现ssh登录</p><p>---------------------------------------</p><p>[root@cPen_A ~]# ansible --version#注：查看版本<br>ansible 2.9.15</p><hr><h1 id="二-grep">二. grep</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#grep相关命令</span></span><br><span class="line">[root@cPen_B network-scripts]<span class="comment"># cat /etc/passwd|grep -B 5 mail#注：查看前5行</span></span><br><span class="line">[root@cPen_B network-scripts]<span class="comment"># cat /etc/passwd|grep -A 5 mail#注：查看后5行</span></span><br><span class="line">[root@cPen_B network-scripts]<span class="comment"># cat /etc/passwd|grep -C 5 mail#注：中间 查看前后5行</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A ~]<span class="comment"># vim /etc/ansible/ansible.cfg #注：ansible配置文件</span></span><br><span class="line">forks          = 5<span class="comment">#注：起5个进程去处理 -f 选项</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip地址显示不出来</span><br><span class="line">service NetworkManager stop<span class="comment">#注：这个服务影响的</span></span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">template模板--&gt; 绝大部分固定的，有几个是变量，根据ansible取机器上的值</span><br><span class="line"></span><br><span class="line">[root@cPen_A ansible]<span class="comment"># ansible web -m setup#注：查看节点服务器的信息  以字典形式展示</span></span><br><span class="line">192.168.0.79 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">[root@cPen_A ansible]<span class="comment"># ansible web -m setup -a &quot;filter=ansible_all_ipv4_addresses&quot;</span></span><br><span class="line"><span class="comment">#注：过滤获得指定信息</span></span><br><span class="line"><span class="comment">#注：获取 ansible-demo3 主机的 IPV4 地址</span></span><br><span class="line">192.168.0.79 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;<span class="comment">#注：ansible_事实</span></span><br><span class="line">        <span class="string">&quot;ansible_all_ipv4_addresses&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;192.168.0.79&quot;</span></span><br><span class="line">        ], </span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================================================</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(<span class="string">&quot;某IP地址&quot;</span>,22,<span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;口令&quot;</span>)</span><br><span class="line">==========================================================</span><br><span class="line">解决使用密码连接，第一ssh过去的时候，需要输入<span class="built_in">yes</span>的问题</span><br><span class="line"></span><br><span class="line">[root@C ansible]<span class="comment"># vim hosts </span></span><br><span class="line">[web]</span><br><span class="line">192.168.0.77</span><br><span class="line">[db]</span><br><span class="line">192.168.0.35 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class="line"></span><br><span class="line">[root@C ansible]<span class="comment"># vim ansible.cfg </span></span><br><span class="line"><span class="comment"># uncomment this to disable SSH key host checking</span></span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">api接口 --&gt; application interface</span><br><span class="line"><span class="comment">#注：写接口</span></span><br><span class="line">json有什么用？轻量级的数据交换格式</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A ansible]<span class="comment"># ansible-doc -l#注：查看ansible的模块</span></span><br><span class="line"><span class="comment">#注：doc 文档，l list</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastest表示安装  不是指最新的</span><br></pre></td></tr></table></figure><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">项目</span><br><span class="line">ansible</span><br><span class="line"></span><br><span class="line">项目名称：使用ansible批量部署nginx集群和mysql集群</span><br><span class="line">项目环境：centos8.2，ansible2.9.15，nginx1.19.5,mysql5.7.31</span><br><span class="line">项目描述：</span><br><span class="line"><span class="code">使用ansible去批量部署6台nginx服务器，1台NFS文件服务器，3台MySQL服务器，其中nginx采用源码编译安装，MySQL采用二进制安装，NFS采用yum安装方法。nginx的编译安装和MySQL的二进制安装过程提前编写好脚本，通过ansible下发到nginx和MySQL服务器上执行，全程采用playbook来实现批量自动化部署</span></span><br><span class="line"><span class="code">项目步骤：</span></span><br><span class="line"><span class="code">1.部署好11台linux虚拟机，全部的配置，采用1核2G的内存的配置，安装好centos8.2的系统。</span></span><br><span class="line"><span class="code">2.然后在一台linux系统里安装部署ansible，采用yum安装。</span></span><br><span class="line"><span class="code">3.编写好一键安装nginx的脚本，连同nginx.conf配置文件都指定好内容，方便后面的playbook使用。</span></span><br><span class="line"><span class="code">4.编写好一键安装MySQL的脚本，连同my.cnf配置文件都指定好内容，方便后面的playbook使用。</span></span><br><span class="line"><span class="code">5.在ansible服务器和所有的nginx，MySQL，NFS服务器之间建立ssh免密通道</span></span><br><span class="line"><span class="code">6.最后编写ansible的playbook文件去统一部署nginx，MySQL，nfs服务器</span></span><br><span class="line"><span class="code">7.测试整个安装部署是否成功</span></span><br><span class="line"><span class="code">项目心得：</span></span><br><span class="line"><span class="code">1.对ansible的在大规模集群里的使用有了一些了解，深入体会到批量部署的便捷</span></span><br><span class="line"><span class="code">2.对集群有了一定的认识</span></span><br><span class="line"><span class="code">3.编写脚本的能力有了提升</span></span><br><span class="line"><span class="code">4.自己对*个故障的排除，提升自己的troubleshooting的能力</span></span><br><span class="line"><span class="code">============================================================================================</span></span><br><span class="line"><span class="code">写项目时</span></span><br><span class="line"><span class="code">1.摆数据</span></span><br></pre></td></tr></table></figure><hr><p>nginx</p><p>​是什么？有什么用？</p><p>​nginx是一个web服务器</p><p>​web就是网站</p><hr><p>dns</p><p>​domain name system  域名解析系统</p><p>​<a href="http://www.aliyun.com">www.aliyun.com</a> --&gt; ip</p><p>​为什么需要DNS？</p><p>​方便记住某个网站名字</p><p>​ip很难记</p><p>正向解析：域名 --&gt; ip</p><p>反向解析： ip --&gt; 域名</p><p>在浏览器输入www,baidu.com回车后发生了什么？</p><p>​1、浏览器缓存</p><p>​2、hosts文件</p><p>​3、本地dns服务器</p><p>​4、转发服务器</p><p>​5、根域名服务器</p><p>​6、迭代过程</p><p>​7、递归返回</p><p>​8、直接访问</p><hr><p>CDN内容分发网络：加速（就近解析）</p><p>#注：缓存有滞后的</p><p>#注：视频业务大量使用CDN</p><hr><p>记录类型</p><p>​A记录 --&gt; address record</p><p>​www --&gt; 120.77.248.190</p><hr><p>需要上线一个自己的网站，有哪些流程(工作要做)？</p><p>1、购买云服务器，部署nginx，mysql，Python等环境</p><p>2、购买域名 <a href="http://www.chenpeng.com">www.chenpeng.com</a>，绑定域名和云服务器 --&gt; A记录 --&gt; 备案(服务器在国内必须备案)</p><p>3、开发网站 --&gt; 写网站</p><p>4、测试网站</p><p>5、上传到云服务器的nginx网页根目录下 --&gt; 上线</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_C lianxi]<span class="comment"># yum provides nslookup</span></span><br><span class="line"><span class="comment">#注：查看命令从哪个包安装</span></span><br></pre></td></tr></table></figure><hr><p>NFS</p><p>​network file system网络文件系统</p><p>​有什么用？</p><p>​共享文件 --&gt; 多台服务器使用相同的内容</p><p>#注：NFS是最廉价的解放方案，受网络影响、服务器硬件配置低，磁盘的速度，CPU，内存，网络带宽 都是比较差的</p><p>#注：比较贵的解决方案：上专业存储</p><p>#注：更好的是 SAN 光纤设备</p><p>SAN --&gt;</p><p>NAS --&gt; 网络附加存储</p><p>SAN一般指存储区域网络。存储区域网络（Storage Area Network，简称SAN）采用网状通道（Fibre Channel ，简称FC，区别与Fiber Channel光纤通道）技术，通过FC交换机连接存储阵列和服务器主机，建立专用于数据存储的区域网络</p><p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。</p><hr><p>ansible</p><p>​项目</p><p>dns</p><p>nginx一键部署</p><p>网站上线</p><p>NFS</p><p>​SAN</p><p>​NAS</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">nginx一键安装 脚本</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#author:cali</span></span><br><span class="line"><span class="comment">#time:2020-49</span></span><br><span class="line"><span class="comment">#company:sanchuang</span></span><br><span class="line"><span class="comment">#email:695811769@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /nginx2</span><br><span class="line"><span class="built_in">cd</span> /nginx2</span><br><span class="line"><span class="comment">#download nginx</span></span><br><span class="line">curl -O http://nginx.org/download/nginx-1.17.9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">useradd lihu</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xf nginx-1.17.9.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment">#进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.17.9</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决依赖关系</span></span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel gcc gcc-c++ autoconf automake make </span><br><span class="line"></span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">./configure  --prefix=/usr/local/nginx9  --user=lihu --group=lihu --with-threads  --with-file-aio  --with-http_ssl_module  --with-http_stub_status_module  --with-stream </span><br><span class="line"></span><br><span class="line"><span class="comment">#编译和安装</span></span><br><span class="line">make -j 2 ; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local/nginx9/sbin/nginx&quot;</span> &gt;&gt;/etc/rc.local </span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改PATH变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PATH=/usr/local/nginx9/sbin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line">PATH=/usr/local/nginx9/sbin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;Linux&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ansible&lt;br&gt;
playbook&lt;br&gt;
nfs&lt;br&gt;
nginx&lt;br&gt;
dns&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-ansible&quot;&gt;一. ansible&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;a</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>25_Linux基础-NFS服务</title>
    <link href="https://cpen.top/blog/posts/317b0311.html"/>
    <id>https://cpen.top/blog/posts/317b0311.html</id>
    <published>2022-10-11T06:00:00.000Z</published>
    <updated>2022-10-11T06:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>NFS</code></p><hr><p>日志轮转：</p><p><a href="https://blog.csdn.net/weixin_43265596/article/details/85469405">https://blog.csdn.net/weixin_43265596/article/details/85469405</a></p><p><a href="https://www.cnblogs.com/liangyuxing/p/11962863.html">https://www.cnblogs.com/liangyuxing/p/11962863.html</a></p><p><a href="https://blog.csdn.net/dhxaohei/article/details/8014764">https://blog.csdn.net/dhxaohei/article/details/8014764</a></p><hr><h1 id="一-NFS简介">一. NFS简介</h1><p>**NFS（Network File System的简称，即网络文件系统）**可以通过网络，让不同的机器、不同的操作系统可以共享彼此的文件。NFS可以将远程的计算机磁盘挂载到本地，读写文件像访问本地磁盘一样操作</p><p><strong>前提</strong>：关闭selinx<br>关闭iptables</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1、安装</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># yum install nfs-utils</span></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">2、修改配置文件/etc/exports</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># vim /etc/exports#注：配置文件</span></span><br><span class="line">/opt/www 192.168.255.0/24(rw,no_root_squash)</span><br><span class="line"><span class="comment">#注：192.168.255.0/24共享，rw权限 读写，no_root_squash 将远程根用户当成本地根用户，即不压制root</span></span><br><span class="line">首先创建/opt/www目录，在这下面创建index.html文件，文件内容”this is <span class="built_in">test</span> nfs”</span><br><span class="line">再添加exports配置，nfs的配置：vim /etc/exports</span><br><span class="line">添加如下行：</span><br><span class="line">/opt/www 192.168.255.0/24(rw)</span><br><span class="line">表示共享/opt/www目录，给192.168.255./24这个网段的主机都可以通过nfs来访问我本地的/opt/www目录</span><br><span class="line">括号()里面的表示选项，rw表示读写</span><br><span class="line"></span><br><span class="line">生效配置：</span><br><span class="line">exportfs -a 或者重启服务</span><br><span class="line"></span><br><span class="line">[root@cPen_A opt]<span class="comment"># cd /opt</span></span><br><span class="line">[root@cPen_A opt]<span class="comment"># mkdir www</span></span><br><span class="line">[root@cPen_A opt]<span class="comment"># cd www</span></span><br><span class="line">[root@cPen_A www]<span class="comment"># vim index.html</span></span><br><span class="line">this is <span class="built_in">test</span> nfs</span><br><span class="line">[root@cPen_A www]<span class="comment"># pwd</span></span><br><span class="line">/opt/www</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：/opt放额外的软件包的目录</span></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">3、启动nfs服务</span><br><span class="line">[root@cPen_A www]<span class="comment"># service nfs start#注：启动服务</span></span><br><span class="line">[root@cPen_A www]<span class="comment"># showmount -e#注：检测是否可以连接</span></span><br><span class="line">Export list <span class="keyword">for</span> cPen_A:</span><br><span class="line">/opt/www 192.168.255.0/24</span><br><span class="line"><span class="comment">#注：centos8下 启动 [root@cPen_B ~]# service nfs-server start</span></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">NFS的连接查看</span><br><span class="line">可以在server端先自我测试一下是否可以连接。</span><br><span class="line">命令：showmount [-ae] [hostname  | IP]</span><br><span class="line">-a：显示当前主机与客户端的NFS连接共享的状态</span><br><span class="line">-e：显示某台主机的/etc/exports所共享的目录数据</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">4、在另一台机器上测试</span><br><span class="line">出现返回 表示ok</span><br><span class="line">[root@cPen_C ~]<span class="comment"># showmount -e 192.168.255.28#注：后面指定分析的机器的ip地址</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.255.28:<span class="comment">#注：出现这种情况，表示可以连接 连通性没有问题</span></span><br><span class="line">/opt/www 192.168.255.0/24</span><br><span class="line"></span><br><span class="line">5、挂载网络文件</span><br><span class="line">在另外一台机器</span><br><span class="line">[root@cPen_C ~]<span class="comment"># mkdir /mnt2</span></span><br><span class="line">[root@cPen_C ~]<span class="comment"># mount -t nfs 192.168.255.28:/opt/www /mnt2#注：挂载网络文件</span></span><br><span class="line">[root@cPen_C ~]<span class="comment"># df#注：使用df命令看磁盘挂载情况（这是网络磁盘挂载）</span></span><br><span class="line">192.168.255.28:/opt/www 17811456 2165760 15645696   13% /mnt2</span><br><span class="line"></span><br><span class="line">[root@cPen_C ~]<span class="comment"># cd /mnt2</span></span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># ls</span></span><br><span class="line">index.html</span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># cat index.html </span></span><br><span class="line">this is <span class="built_in">test</span> nfs</span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># ls</span></span><br><span class="line">index.html</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cd /opt/www/#注：服务端A主机 操作</span></span><br><span class="line">[root@cPen_A www]<span class="comment"># touch index2.html#注：服务端操作</span></span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># ls</span></span><br><span class="line">index2.html  index.html</span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># mkdir index2.html</span></span><br><span class="line"><span class="built_in">mkdir</span>: 无法创建目录<span class="string">&quot;index2.html&quot;</span>: 权限不够</span><br><span class="line"><span class="comment">#注：客户机C没有权限去操作服务器A文件</span></span><br><span class="line"><span class="comment">#没有权限的话 /etc/exports 设置 no_root_squash ，就可以操作了</span></span><br><span class="line">no_root_squash 将远程根用户当成本地根用户，即不压制root</span><br><span class="line"><span class="comment">#注：让服务器将 远端的root用户 识别成 本地根用户</span></span><br><span class="line"><span class="comment">#注：修改配置文件后，需要使用exportfs -a 生效配置；再重新挂载（先取消挂载，再重新挂载）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：取消挂载</span></span><br><span class="line">[root@cPen_C mnt2]<span class="comment"># cd ..#注：先退出mnt2目录，否则报繁忙</span></span><br><span class="line">[root@cPen_C /]<span class="comment"># umount /mnt2#注：然后取消挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件后，需要使用exportfs -a 生效</span></span><br><span class="line"><span class="comment">#重新挂载：</span></span><br><span class="line">    先退出/mnt2目录，然后执行：</span><br><span class="line">    umount /mnt2</span><br><span class="line">    再执行挂载</span><br></pre></td></tr></table></figure><hr><h1 id="二-npcbind和nfs">二. npcbind和nfs</h1><p>启动nfs之前，确保rpcbind服务已经启动<br>nfs启动的时候，会向rpcbind服务注册端口，会返回一个端口给nfs使用<br>可以使用<br><code>rpcinfo -p</code>命令 <strong>查看nfs端口是否已经注册成功</strong><br>rpcbind就像房东，nfs是租客<br>#注：nfs自己不能起端口，rpcbind为nfs注册端口<br>#注：nfs起来之前 要确保rpcbind起来<br>[root@cPen_A www]# <code>rpcinfo -p</code>#注：<strong>rpcbind为nfs起2049端口</strong><br>100003    3   tcp   2049  nfs</p><hr><h1 id="三-实验：nfs和nginx-搭配使用-负载均衡和文件共享">三. 实验：nfs和nginx 搭配使用 负载均衡和文件共享</h1><p>A:192.168.0.73nfs真实机<br>B:192.168.0.79代理机+真实机<br>C:192.168.0.53真实机</p><p>前提：<br>三台主机都安装好nginx，其中一台开启nfs服务<br>在A机器上开启了nfs服务，网站目录存放在/opt/www下，B、C可以挂载A的/opt/www目录到本地<br>A机器配置好nfs服务，开启nfs服务，然后在A、C两台上 执行：<br>[root@cPen_B ~]# mount -t nfs 192.168.0.73:/opt/www /opt/www<br>[root@cPen_C ~]# mount -t nfs 192.168.0.73:/opt/www /opt/www</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">B机器变成代理机</span><br><span class="line">第1步：把8080端口起来</span><br><span class="line">修改A、B、C三台主机nginx的配置，启动8080端口，绑定域名www.sc.com</span><br><span class="line"><span class="comment">#注：配置文件目录：/etc/nginx</span></span><br><span class="line"><span class="comment">#注：进入 /etc/nginx/conf.d目录下  创建 sc.conf</span></span><br><span class="line">输入以下内容</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@cPen_A nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@cPen_A conf.d]<span class="comment"># vim sc.conf#注：后缀必须是 .conf，自动加载读取 该配置文件</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen  8080;<span class="comment">#注：监听8080端口</span></span><br><span class="line">    server_name  www.sc.com;<span class="comment">#注：指定域名</span></span><br><span class="line"></span><br><span class="line">    root /opt/www;<span class="comment">#注：指定网站家目录，默认去家目录下找index.html</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">[root@cPen_A conf.d]<span class="comment"># nginx -t#注：进行语法检测</span></span><br><span class="line">[root@cPen_A conf.d]<span class="comment"># nginx -s reload#注：生效配置</span></span><br><span class="line">[root@cPen_A conf.d]<span class="comment"># lsof -i:8080#注：8080端口起来了</span></span><br><span class="line">COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   3193  root    6u  IPv4  50354      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">nginx   3194 nginx    6u  IPv4  50354      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">nginx   3195 nginx    6u  IPv4  50354      0t0  TCP *:webcache (LISTEN)</span><br><span class="line"></span><br><span class="line">使用lsof -i:8080端口是否启动</span><br><span class="line">使用curl -H <span class="string">&quot;Host: www.sc.com&quot;</span> http://192.168.0.73:8080 查看返回的内容是否一致</span><br><span class="line">访问192.168.0.68的8080端口，以www.sc.com域名去访问</span><br><span class="line">[root@cPen_A ~]<span class="comment"># curl -H &quot;Host: www.sc.com&quot; http://192.168.0.73:8080</span></span><br><span class="line">this is <span class="built_in">test</span> nfs</span><br><span class="line"><span class="comment">#注：三台机器访问返回的内容相同  都是 this is test nfs</span></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#注：在B机器上添加反向代理</span></span><br><span class="line">对B机器进行负载均衡：把请求转发到其他机器（代理转发）（高可用）</span><br><span class="line">[root@cPen_B conf.d]<span class="comment"># vim sc.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen  8080;</span><br><span class="line">    server_name  www.sc.com;</span><br><span class="line"></span><br><span class="line">    root /opt/www;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream sc &#123;<span class="comment">#注：代理转发，为upstream取名为sc</span></span><br><span class="line">    server 192.168.0.73:8080;</span><br><span class="line">    server 192.168.0.53:8080;</span><br><span class="line">    server 192.168.0.79:8080;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#注：虚拟主机，让不同的域名做不同的事情</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  www.sc.com;</span><br><span class="line"></span><br><span class="line">    root /opt/www;</span><br><span class="line"></span><br><span class="line">    location / &#123;<span class="comment">#注：访问网站的/目录，都会转发到sc</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;<span class="comment">#注：头部信息，不加的话  可能变成B的主机地址</span></span><br><span class="line"><span class="comment">#注：让客户端发过来的头部host字段信息 和转发包的头部host字段保持一致</span></span><br><span class="line">        proxy_pass http://sc;<span class="comment">#注：设置后端代理服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  www.sc1.com;</span><br><span class="line"></span><br><span class="line">    root /usr/share/www;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_pass http://sc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：输出www.sc.com时，请求时，会有数据包存放host头部信息:www.sc.com ，80端口收到这个包之后，知道是要转发到8080端口。B机器帮你请求A、B、C的8080端口发起请求</span></span><br><span class="line"><span class="comment">#注：客户机发起请求 www.sc.com，host头部信息www.sc.com（请求包里的，客户机携带的头部信息），B主机交给相应的server去处理，请求B主机的80端口去处理，转发到8080端口，B主机帮你去请求，B收到包的时候，交给server去处理。这时候A发起的这个包的头部信息 可能就是B的ip地址了（不是www.sc.com了），8080端口收到请求后，没有B的ip地址的server_name，会转发失败。所以 proxy_set_header Host $host 让它们的头部信息保持一致</span></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#生效配置</span></span><br><span class="line">[root@cPen_B conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">[root@cPen_B conf.d]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#然后多次访问80端口，查看返回内容是否一致，以及查看每台机器的/var/log/nginx/access.log日志是否有新的请求过来 tail -f  /var/log/nginx/access.log</span></span><br><span class="line"></span><br><span class="line">[root@cPen_B conf.d]<span class="comment"># curl -H &quot;Host: www.sc.com&quot; http://192.168.0.79</span></span><br><span class="line">this is <span class="built_in">test</span> nfs</span><br><span class="line"><span class="comment">#注：代理转发，访问80端口，转发到8080端口，分发到3台机器去执行了（负载均衡）</span></span><br><span class="line"></span><br><span class="line">[root@cPen_C conf.d]<span class="comment"># tail -f  /var/log/nginx/access.log #注：C主机下 ，B主机帮请求</span></span><br><span class="line">192.168.0.79 - - [01/Dec/2020:17:21:54 +0800] <span class="string">&quot;GET / HTTP/1.0&quot;</span> 200 17 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.61.1&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line"><span class="comment">#注：平均打到3台，默认做轮转</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://image.cpen.top/image/image-20221011191610524.png" alt="image-20221011191610524"></p></blockquote><p>#注：可以使用 killall nginx 全部杀死</p><p>#注：404 没找到，403 forbid 禁止</p><blockquote><p>#注：A、B换成B、A<br>nginx代理机+真实机</p><p>A</p><p>nginx真实机</p><p>B <strong>nfs</strong></p><p>nginx真实机</p><p>C</p><p><a href="http://xn--www-kg0fp40a2u2b2uy59q.sc.com">客户端访问www.sc.com</a>访问A nginx代理机的80端口（代理的意思是转发）<br>A机器 返回本机的8080去处理，或者B机器的8080去处理，或者C机器的8080去处理<br>负载均衡：2万人访问A机器80端口，80端口不会去处理请求，只是做代理转发，交给本机8080处理，或者B机器的8080处理，C机器的8080处理。A、B、C三台返回的页面网站 都要保持一致<br>把B机器/opt/www目录 挂载到A上和C上 （保存文件的一致性，改的都是B机器的nfs）</p></blockquote><blockquote><p><img src="https://image.cpen.top/image/image-20221011191803355.png" alt="image-20221011191803355"></p></blockquote><blockquote><p>#注：网络问题</p><p>桥接模式VMnet0同网段</p><p>NAT模式VMnet8同网段</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;NFS&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;日志轮转：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43265596/article/details/85469405&quot;&gt;https://blog.csdn.n</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="NFS" scheme="https://cpen.top/blog/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>24_Linux基础-DNS服务</title>
    <link href="https://cpen.top/blog/posts/ecc378ee.html"/>
    <id>https://cpen.top/blog/posts/ecc378ee.html</id>
    <published>2022-10-11T05:00:00.000Z</published>
    <updated>2022-10-11T05:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>DNS</code></p><hr><p>参考文章：<a href="https://blog.csdn.net/loukundeboke/article/details/80012231">https://blog.csdn.net/loukundeboke/article/details/80012231</a></p><p><strong>DNS服务</strong><br><strong>DNS( Domain Name System) 域名系统</strong></p><blockquote><p>前提：</p><p>我们网络中都是使用ip地址通信，无论是访问服务，还是不同主机间进行数据交换</p><p>ip地址非常多，如果每个服务都通过ip地址来登录的话，用户就需要记住这些很复杂的ip地址，不方便用户使用</p><p>就像保存在手机里的电话号码一样，会有一个备注，通过这个备注 就可以找到正确的相应联系人的电话</p><p>那域名解析跟这个实现差不多，在普通用户中，我们用域名来访问服务，域名就通过域名解析来获取到ip地址</p><p>dns服务就像电话簿，提供了可以查询的域名到ip地址的映射关系</p><p>#注：<a href="http://xn--www-u68d60m59inlbiy0ilt3c1dm.taobao.com">在浏览器中输入www.taobao.com</a>，敲回车的一瞬间，先去解析域名</p><p>#注：域名系统；提供域名解析；ip对于用户来说，使用没有域名方便</p></blockquote><hr><h1 id="1-完全限定域名-FQDN">1. 完全限定域名 FQDN</h1><p><strong>FQDN</strong>：Full Qualified Domain Name，<strong>完全限定域名</strong>，即每个域在全球网络都是唯一的；另外值得提到的一点是域并不是指诸如www.google.com这样的域名，而google.com才是域</p><p>#注：<a href="http://www.music.163.com/">www.music.163.com/</a>163.com是域，前面是主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装dns服务软件包<span class="built_in">bind</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum install bind</span></span><br><span class="line"><span class="comment">#注：安装后，数据存放在/var/named/下</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># cd /var/named/</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># ls</span></span><br><span class="line">data  dynamic  named.ca  named.empty  named.localhost  named.loopback  slaves</span><br></pre></td></tr></table></figure><hr><h1 id="2-域的分类">2. 域的分类</h1><blockquote><p>一、根域（.） 全球13组根域名服务器以英文字母A到M依序命名，域名格式为“<a href="http://xn--p8sy69a.root-servers.net">字母.root-servers.net</a>”</p><p>​在/var/named/name.ca文件中可以查看# 注：标识为.</p><p>二、顶级域</p><p>​顶级域：顶级域（Top Level Domain，简称TLD）分为三类</p><p>​   1&gt; 通用顶级域：诸如 .com(商业机构) .org(非营利性组织) .net(网络服务机构)等</p><pre><code>   2&gt; 国家顶级域：诸如 .cn(中国) .uk(英国) .us(美国) .jp(日本) .hk   3&gt; 反向域（基础建设顶级域）：.arpa,即从IP到FQDN的反向解析# 注：反向查找</code></pre><p>#注：正向域：从域名到ip; 反向域：从ip到域名</p><p>三、</p><p>​二级域</p><p>​三级域</p><p><a href="http://www.sc.163.com">www.sc.163.com</a>--&gt; <a href="http://xn--cjs751gkfr.com">顶级域.com</a>  --&gt;<a href="http://xn--163-pi9d993b6v0d.com">二级域163.com</a>  --&gt;<a href="http://xn--sc-mv2ck10bj02c.163.com">三级域sc.163.com</a></p><p>​#注：前面的www是它的主机名</p></blockquote><hr><h1 id="3-DNS解析">3. DNS解析</h1><p>正向解析域名 --&gt; ip</p><p>反向解析ip --&gt; 域名</p><h2 id="常用命令域名解析命令">常用命令域名解析命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">常用命令域名解析命令</span><br><span class="line">1、Ping</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ping www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (14.215.177.38) 56(84) bytes of data.</span><br><span class="line">64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=1 ttl=55 time=16.3 ms</span><br><span class="line"><span class="comment">#注：ping命令只能返回1个ip</span></span><br><span class="line"></span><br><span class="line">2、host</span><br><span class="line">安装bind-utils软件包</span><br><span class="line">yum install bind-utils</span><br><span class="line">[root@cPen_A ~]<span class="comment"># host www.baidu.com</span></span><br><span class="line">www.baidu.com is an <span class="built_in">alias</span> <span class="keyword">for</span> www.a.shifen.com.<span class="comment">#注：为www.a.shifen.com取别名www.baidu.com</span></span><br><span class="line">www.a.shifen.com has address 14.215.177.38<span class="comment">#注：ip地址</span></span><br><span class="line">www.a.shifen.com has address 14.215.177.39</span><br><span class="line"></span><br><span class="line">3、dig<span class="comment">#注：看的比较详细，推荐</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># dig www.baidu.com</span></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.34INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.216INA14.215.177.38</span><br><span class="line">www.a.shifen.com.216INA14.215.177.39</span><br><span class="line"></span><br><span class="line">4、nslookup</span><br><span class="line">[root@cPen_A ~]<span class="comment"># nslookup www.baidu.com</span></span><br><span class="line">www.baidu.comcanonical name = www.a.shifen.com.<span class="comment">#注：查询的时候会加上根域，平时感觉不到</span></span><br><span class="line">Address: 14.215.177.38</span><br><span class="line">Address: 14.215.177.39</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：可以拿DNS实现分流的作用。将新机器的域名地址解析成2个ip</span></span><br><span class="line"><span class="comment">#注：负载均衡：把很多机器当做1台机器使用。DNS可以做到负载均衡，把流量分发到很多机器</span></span><br><span class="line"><span class="comment">#注：高可用：1台机器去服务 它跪掉了，高可用就是这台机器跪掉了，把流量引导其他机器</span></span><br><span class="line"><span class="comment">#注：高可用避免单点故障</span></span><br><span class="line"><span class="comment">#注：运维思想：备份、高可用。比如系统盘2块，其中1块跪掉了，另外一块还能继续服务</span></span><br><span class="line"><span class="comment">#注：负载均衡和高可用 一般一起存在</span></span><br></pre></td></tr></table></figure><h2 id="DNS服务软件：bind">DNS服务软件：bind</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">DNS服务软件：<span class="built_in">bind</span></span><br><span class="line">默认端口 udp协议 53号端口</span><br><span class="line">[root@cPen_A ~]<span class="comment"># less /etc/services </span></span><br><span class="line">domain          53/udp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例：修改/etc/hosts文件</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ping localhost#注：解析成127.0.0.1</span></span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">127.0.0.1   www.baidu.com baid.com<span class="comment">#注：添加这一行</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># ping www.baidu.com</span></span><br><span class="line">PING www.baidu.com (127.0.0.1) 56(84) bytes of data.<span class="comment">#注：解析成127.0.0.1</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># ping baid.com</span></span><br><span class="line">PING www.baidu.com (127.0.0.1) 56(84) bytes of data.<span class="comment">#注：解析成127.0.0.1</span></span><br><span class="line"><span class="comment">#注：/etc/hosts文件 解析时 优先级最高</span></span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A html]<span class="comment"># pwd</span></span><br><span class="line">/usr/share/nginx/html</span><br><span class="line">[root@cPen_A html]<span class="comment"># vim index.html</span></span><br><span class="line">hello world</span><br><span class="line">cPen</span><br><span class="line">[root@cPen_A html]<span class="comment"># ip a</span></span><br><span class="line">inet 192.168.0.19/24 brd 192.168.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line"><span class="comment">#Windows机器上</span></span><br><span class="line">Windows：C:\Windows\System32\drivers\etc\hosts</span><br><span class="line"><span class="comment">#注：hosts文件里</span></span><br><span class="line"><span class="comment"># localhost name resolution is handled within DNS itself.</span></span><br><span class="line"><span class="comment">#127.0.0.1       localhost</span></span><br><span class="line"><span class="comment">#::1             localhost</span></span><br><span class="line">192.168.0.39 www.ldj.com<span class="comment">#注：添加这一条</span></span><br><span class="line">这样在浏览器查找 www.ldj.com 就会访问到linux机器上的网址。www.ldj.com被解析成192.168.0.39</span><br></pre></td></tr></table></figure><hr><h1 id="4-DNS解析过程">4. DNS解析过程</h1><blockquote><p>DNS解析过程：<br>#注：面试题：<strong><a href="http://xn--www-0v1ev05dwmi.baidu.com">当敲入www.baidu.com</a> 发生什么事情</strong><br>1、先查找<strong>本地hosts文件</strong>，linux：/etc/hosts;  Windows：C:\Windows\System32\drivers\etc\hosts<br>可以解析就直接返回地址<br>2、hosts文件不能解析，去看<strong>本地缓存</strong>。如果有，则返回结果，没有就进行下一步查找<br>linux下域名缓存：nscd服务<br>[root@cPen_A html]# yum install nscd<br>[root@cPen_A html]# service nscd restart#注：清除缓存 (重启服务就是清除缓存)<br>缓存会有缓存时间，缓存多久可以指定的<br>#注：设置了DNS服务，但是设置了没有生效，考虑1、缓存 清除缓存和2、/etc/hosts是否写死<br>3、本地缓存没有找到，就会去请求<strong>本地的域名服务器</strong>，本地域名服务器有 就返回查询结果<br><strong>Linux下指定域名解析服务器文件 /etc/resolv.conf  （配置本地域名服务器ip地址的文件）</strong><br>第1个指定的nameserver就是首选dns服务器，剩下的都是备选dns服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A html]<span class="comment"># vim /etc/resolv.conf </span></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">nameserver 114.114.114.114<span class="comment">#注：可以指定多个ip 去解析ip</span></span><br><span class="line">nameserver 192.168.0.1<span class="comment">#注：用nameserver指定</span></span><br><span class="line">[root@cPen_A html]<span class="comment"># dig www.baidu.com</span></span><br><span class="line">;; SERVER: 114.114.114.114<span class="comment">#53(114.114.114.114)#注：访问114.114.114.114 53号端口去解析ip</span></span><br></pre></td></tr></table></figure><p>4、本地域名服务器没有找到相应记录，如果<strong>设置转发</strong>查找，就会去<strong>转发的服务器</strong>上去查询。如果<strong>没有设置转发，或者都没有找到</strong>，就会去<strong>根域查找</strong> （迭代查找）<br>本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该<strong>顶级域名服务器的一个IP</strong>。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="http://qq.com">qq.com</a>)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机</p></blockquote><blockquote><p>#注：<strong>面试题：<a href="http://xn--www-0v1ev05dwmi.baidu.com">当敲入www.baidu.com</a> 发生什么事情 （DNS解析流程）</strong><br>答：DNS解析流程<br>第1步 先去 <code>本地hosts文件</code>(/etc/hosts)去找 <code>ip和域名的映射关系</code>。有就返回。没有就去<br>第2步 <code>本地DNS缓存</code> 找…。有就返回。没有就去<br>第3步 <code>本地的域名服务器</code> (/etc/resolv.conf)找…。有就返回。没有就<br>第4步 如果本地域名服务器 <code>设置转发</code>查找，就会去转发的服务器 上找…， 有就返回。<br>没有找到 或 没有设置 就去 <code>根域查找</code>，先在<code>根域</code>里找到<code>顶级域的服务器ip地址 返回顶级域</code>的ip地址给<code>本地域名服务器</code><br><code>本地域名服务器</code>再去<code>顶级域名服务器</code> 找，没有找到就返回<code>二级域服务器</code>的ip地址，本地域名服务器去<code>二级域里找</code>，没有找到 <code>返回三级域</code>的ip地址<code>给本地域名服务器</code>……迭代查找，直到找到整个域名才返回<br>或者说 去根域查找，迭代查找，  直到找到为止</p></blockquote><hr><h1 id="5-dns服务的类型">5. dns服务的类型</h1><p><strong>dns服务的类型</strong></p><ol><li><strong>缓存域名服务器</strong></li><li><strong>主域名服务器</strong><br>这上面定义了真正的ip到域名的映射关系</li><li><strong>从域名服务器</strong><br>上面的数据域名映射 从主域名服务器获取</li></ol><p><strong>1、缓存域名服务器</strong><br>也称为 唯高速缓存服务器<br>通过向其他域名服务器查询获得域名-&gt;IP地址记录<br>将域名查询结果缓存到本地，提高重复查询时的速度<br><strong>2、主域名服务器</strong><br>特定DNS区域的官方服务器，具有唯一性，权威性<br>负责维护该区域内所有域名-&gt;IP地址的映射记录<br><strong>3、从域名服务器</strong><br>也称为 辅助域名服务器<br>其维护的 域名-&gt;IP地址记录 来源于主域名服务器</p><hr><h1 id="6-域名服务器配置">6. 域名服务器配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">1、安装<span class="built_in">bind</span>、bind-utils</span><br><span class="line">域名解析主程序</span><br><span class="line">[root@cPen_B etc]<span class="comment"># which named</span></span><br><span class="line">/usr/sbin/named</span><br><span class="line"></span><br><span class="line">2、配置文件</span><br><span class="line">如果没有安装bind-chroot软件包</span><br><span class="line">主配置文件： /etc/named.conf   数据文件位于：/var/named/目录</span><br><span class="line">[root@cPen_B etc]<span class="comment"># less /etc/named.conf </span></span><br><span class="line"></span><br><span class="line">3、修改配置</span><br><span class="line">1、 vim /etc/named.conf<span class="comment"># 注：全局配置文件</span></span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on port 53 &#123; any; &#125;;<span class="comment"># 注：将监听地址改成any，设置监听在本机的任意ip上</span></span><br><span class="line">        allow-query     &#123; localhost; &#125;;<span class="comment"># 注：允许访问服务的主机 </span></span><br><span class="line">        allow-query     &#123; any; &#125;;<span class="comment"># 注：将权限设置为any，允许任何人来查询</span></span><br><span class="line">zone <span class="string">&quot;.&quot;</span> IN &#123;<span class="comment"># 注：定义根域</span></span><br><span class="line">        <span class="built_in">type</span> hint;<span class="comment"># 注：指定根域</span></span><br><span class="line">        file <span class="string">&quot;named.ca&quot;</span>;<span class="comment"># 注：在named.ca里去找 /var/named/named.ca</span></span><br><span class="line">&#125;;</span><br><span class="line">include <span class="string">&quot;/etc/named.rfc1912.zones&quot;</span>;<span class="comment"># 注：定义其他域</span></span><br><span class="line">include <span class="string">&quot;/etc/named.root.key&quot;</span>;</span><br><span class="line">2、域配置文件 /etc/named.rfc1912.zones</span><br><span class="line">添加域配置：</span><br><span class="line">[root@cPen_B ~]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">&quot;sc.com&quot;</span> IN &#123;<span class="comment"># 注：添加sc.com域的解析</span></span><br><span class="line">        <span class="built_in">type</span> master;<span class="comment"># 注：主域名服务器</span></span><br><span class="line">        file <span class="string">&quot;&quot;</span>sc.com<span class="string">&quot;&quot;</span>;<span class="comment"># 注：域名配置存放文件 (域的解析从哪里文件里去找)</span></span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">4、配置指定域的解析文件</span><br><span class="line">目录：/var/named</span><br><span class="line"><span class="comment">#注：注意权限， named用户要可读</span></span><br><span class="line"><span class="comment">#注：注意属组</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># cp named.empty sc.com</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># pwd</span></span><br><span class="line">/var/named</span><br><span class="line">[root@cPen_B named]<span class="comment"># vim sc.com </span></span><br><span class="line"><span class="variable">$TTL</span> 3H; 注：缓存时间</span><br><span class="line">@       IN SOA   sc.com. (; 注：修改的地方</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      @</span><br><span class="line">        A       127.0.0.1</span><br><span class="line">        AAAA    ::1</span><br><span class="line">;注：A记录正向解析记录</span><br><span class="line">dns A 192.168.136.129;注：dns服务器的IP地址</span><br><span class="line">www A 192.168.136.129;注：www服务器的IP地址</span><br><span class="line">*    A  192.168.136.123;注：配置泛域名解析</span><br><span class="line">;mail MX 192.168.136.129;注：分号注释</span><br><span class="line">;dns  IN 600 A  192.168.136.129;注：配置A记录解析 缓存时间为600s</span><br><span class="line">[root@cPen_B named]<span class="comment"># service named restart# 注：重启服务</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># lsof -i:53# 注：端口起来了</span></span><br><span class="line">COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">named   1839 named   21u  IPv4  42519      0t0  TCP localhost:domain (LISTEN)</span><br><span class="line">named   1839 named   22u  IPv4  42521      0t0  TCP cPen_B:domain (LISTEN)</span><br><span class="line">named   1839 named   23u  IPv6  42523      0t0  TCP localhost:domain (LISTEN)</span><br><span class="line">[root@cPen_B named]<span class="comment"># dig www.sanchuang.com</span></span><br><span class="line">;; SERVER: 192.168.136.2<span class="comment">#53(192.168.136.2)</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># cat /etc/resolv.conf # 注：指定本机的DNS服务器</span></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.136.2</span><br><span class="line">[root@cPen_B named]<span class="comment"># dig www.sc.com @192.168.136.129# 注：用192.168.136.129去解析</span></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.sc.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.sc.com.10800INA192.168.136.129<span class="comment"># 注：解析成功</span></span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">sc.com.10800INNSsc.com.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置反向域</span></span><br><span class="line">[root@cPen_B named]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">&quot;1.0.0.127.in-addr.arpa&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">&quot;named.loopback&quot;</span>;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[root@cPen_B named]<span class="comment"># pwd</span></span><br><span class="line">/var/named</span><br><span class="line">[root@cPen_B named]<span class="comment"># less named.loopback </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="7-资源记录类型">7. 资源记录类型</h1><blockquote><p><strong>资源记录类型</strong><br>（1）A记录（Address）正向解析<br>A记录是将一个主机名（全称域名FQDN）和一个IP地址关联起来。这也是大多数客户端程序默认的查询类型。</p><p>（2）PTR记录（Pointer）反向解析<br>PTR记录将一个IP地址对应到主机名（全称域名FQDN）。这些记录保存在in-addr.arpa域中。</p><p>（3）CNAME记录(Canonical Name)别名<br>别名记录，也称为规范名字(Canonical Name)。这种记录允许您将多个名字映射到同一台计算机。</p><p>（4）MX记录（Mail eXchange）<br>MX记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。MX记录也叫做邮件路由记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操控所有的邮箱设置。<br>当有多个MX记录（即有多个邮件服务器）时，则需要设置数值来确定其优先级。通过设置优先级数字来指明首选服务器，数字越小表示优先级越高。</p><p>（5）NS记录（Name Server）<br>NS（Name Server）记录是域名服务器记录，也称为授权服务器，用来指定该域名由哪个DNS服务器来进行解析。<br>将网站的NS记录指向到目标地址，在设置NS记录的同时还需要设置目标网站的指向，否则NS记录将无法正常解析<br>NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。</p></blockquote><hr><h1 id="8-小节">8. 小节</h1><p><strong>DNS服务</strong><br><strong>DNS( Domain Name System) 域名系统</strong><br>#注：域名系统；提供域名解析；ip对于用户来说，使用没有域名方便</p><blockquote><p>FQDN完全限定域名<br><a href="http://www.baidu.com">www.baidu.com</a><br>域：<a href="http://baidu.com">baidu.com</a><br>主机名：www</p></blockquote><blockquote><p><strong>域名分类</strong><br>根类（.）全国只有13组<br>顶级域通用域名<br>.com用于商业<br>.org非盈利性组织<br>.net网络服务<br>国家<br>.cn<br>.jp<br>.hk<br>.us<br>反向解析域.arpa<br>二级域，三级域……</p></blockquote><blockquote><p><strong>DNS解析</strong><br>正向解析把域名解析成ip<br>反向解析把ip解析成域名</p></blockquote><blockquote><p><strong>DNS解析流程（面试）</strong></p><p>1、先查找本地hosts文件 有没有对应ip和域名的映射关系，存在就返回</p><p>2、hosts文件里没有找到，就会在本地缓存中查找，如果找到就返回结果 完成解析</p><p>3、本地缓存中没有找到，就会去本地域名服务器查找，找到返回结果 完成解析</p><p>4、本地域名服务器中没有，如果设置了转发查找 就会去转发服务器查找。如果没有找到 就会去根域去找顶级域的服务器ip地址，返回给本地域名服务器，本地域名服务器再去顶级域服务器上 找二级域服务器ip地址，依次类推 直到找到整个域名结果为止</p><p>5、DNS迭代查询之后，如果拿到结果 就返回给本地域名服务器，本地域名服务器再返回给客户端</p><p>#注：DNS客户机迭代查找</p></blockquote><p><strong>DNS服务简单搭建</strong></p><blockquote><p><strong>软件包安装</strong><br>bind<br>bind-utils</p><p><strong>配置文件</strong><br>主配置文件/etc/named.conf<br>域配置文件/etc/named.rfc1912.zones<br>数据目录/var/named下面文件 需要给named用户可读权限</p><p><strong>DNS端口</strong>53UDP</p><p><strong>记录类型</strong><br>A记录正向解析记录<br>PTR记录反向解析记录<br>CNAME别名<br>MX邮件记录<br>NS授权dns服务器</p><p><strong>泛域名解析</strong><br>对于域sc.com添加：*    A  192.168.0.39#注：只是对主机名的泛域名解析<br>表示主机名任意<a href="http://123.sc.com">123.sc.com</a>#注：abc.123.sc.com不可以<br><a href="http://abc.sc.com">abc.sc.com</a></p></blockquote><p><strong>常见的域名解析命令</strong></p><blockquote><p>ping<br>host<br>dig<br>nslookup</p></blockquote><p><strong>相关配置文件</strong></p><blockquote><p>/etc/hosts  指定域名和ip的对应关系，优先级最高<br>/etc/resolv.conf指定dns服务器地址<br>网络连通性都是访问服务的前提条件</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;DNS&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://blog.csdn.net/loukundeboke/article/details/80012231&quot;&gt;https://blog.csdn.net/loukunde</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="DNS" scheme="https://cpen.top/blog/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>23_Linux基础-ansible2</title>
    <link href="https://cpen.top/blog/posts/b0a8892b.html"/>
    <id>https://cpen.top/blog/posts/b0a8892b.html</id>
    <published>2022-10-11T04:00:00.000Z</published>
    <updated>2022-10-11T04:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>ansible</code></p><hr><h1 id="一-云计算">一. 云计算</h1><blockquote><p><strong>云计算</strong><br>openstack<br>docker<br>kvm<br>虚拟化技术：在本身物理机的基础上虚拟出云主机<br>#唯一的不好是 安全性不高 数据保存在别人那里的 (影响不大)</p></blockquote><blockquote><p>#trouble shooting的能力 问题解答的能力</p><p>#注：ssh开启2种验证 - 先公钥认证再密码认证密码认证失败 提示permit deny</p></blockquote><hr><h1 id="二-ansible不是守护进程">二. ansible不是守护进程</h1><blockquote><p>#ansible 不是守护进程 执行ansible命令的时候才会执行ansible<br>#守护进程：一直在内存里面，等待别人连接<br>#ssh是守护进程<br>#执行1条命令 命令不是守护进程</p><p>#ansible不是一个守护进程（守护进程：起来后一直在内存中运行，等待其他人访问）<br>#ansible就是一个命令脚本，使用Python写的</p><p>#[root@cPen_A ansible]# sudo -i#注：直接回到root用户</p></blockquote><hr><h1 id="三-ansible的模块">三. ansible的模块</h1><p><strong>ansible的模块</strong></p><h2 id="1-copy模块">1. copy模块</h2><blockquote><p>从本地copy文件分发到目录主机路径<br>参数说明:<br>src= 源文件路径# 注：source 源</p><p>​dest= 目标路径 # 注：destination 目的地</p><p>​注意src= 路径后面带/ 表示带里面的所有内容复制到目标目录下，不带/是目录递归复制过去<br>​content= 自行填充的文件内容<br>​owner 属主<br>​group 属组<br>​mode权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例1：shell模块、copy模块</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#示例1：使用ansible 在B、C主机创建/lianxi 目录</span></span><br><span class="line"><span class="comment">#-m指定模块</span></span><br><span class="line"><span class="comment">#-a传的参数</span></span><br><span class="line">ansible 接 指定主机 -m 指定模块 -a 执行的参数</span><br><span class="line">[root@cPen_A ansible]<span class="comment"># ansible all -m shell -a &quot;mkdir /lianxi -p&quot;</span></span><br><span class="line"><span class="comment">#注：rc ==&gt; reutrn code --&gt; 为0表示执行成功</span></span><br><span class="line"><span class="comment">#注：rc ==&gt; reutrn code --&gt; 为1表示执行失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例2：将ansible-copy文件 复制到主机B、C/lianxi/ansible目录下，指定权限属主数组</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># vim ansible-copy</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible all -m copy -a &quot;src=/lianxi/ansible-copy dest=/lianxi/ansible mode=777 owner=sanchuang group=sanchuang&quot;</span></span><br><span class="line"><span class="comment">#注：确认B、C主机 指定的用户sanchuang和组sanchuang存在</span></span><br><span class="line"><span class="comment">#md5sum一般来说 是 信息的摘要判定文件是否被修改</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例2：指定webser组，将/etc/passwd 赋值到主机/tmp目录下，指定权限777</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible webser -m copy -a &quot;src=/etc/passwd dest=/tmp mode=777&quot;</span></span><br><span class="line"></span><br><span class="line">===========================================================================================</span><br><span class="line"></span><br><span class="line">示例3：copy src路径后面带/不带/的区别</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#注：src= 路径后面带/ 表示带里面的所有内容复制到目标目录下，不带/是目录递归复制过去</span></span><br><span class="line"><span class="comment">#注：不带/</span></span><br><span class="line">[root@cPen_A copy_dir]<span class="comment"># ansible all -m copy -a &quot;src=/lianxi/copy_dir dest=/lianxi/ansible&quot;</span></span><br><span class="line"><span class="comment">#注：带/</span></span><br><span class="line">[root@cPen_A copy_dir]<span class="comment"># ansible all -m copy -a &quot;src=/lianxi/copy_dir/ dest=/lianxi/ansible&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#带/表示拷贝目录下的子文件或者子文件夹</span></span><br><span class="line"><span class="comment">#不带/表示拷贝整个目录</span></span><br></pre></td></tr></table></figure><h2 id="2-fetch模块">2. fetch模块</h2><p>#注：从远程主机拉取文件到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible webser -m fetch -a &quot;src=/etc/hostname dest=/lianxi mode=644&quot;</span></span><br><span class="line">192.168.0.22 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;c468f7340237d9f531122f5b03345ce8ac5641b4&quot;</span>,   <span class="comment"># 注：拉去下来后会比较</span></span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/lianxi/192.168.0.22/etc/hostname&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;8d23b0947f191eb9c20728677271eb4d&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_checksum&quot;</span>: <span class="string">&quot;c468f7340237d9f531122f5b03345ce8ac5641b4&quot;</span>, <span class="comment"># 注：和远程比较 内容是否变更</span></span><br><span class="line">    <span class="string">&quot;remote_md5sum&quot;</span>: null</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#注：大文件传送中途 突然断掉了 ，文件没有传完  保存的md5sum和它的md5sum不一样</span></span><br><span class="line"><span class="comment">#注：如果2个值一致说明传完了</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ls# 注：路径自动加了个以ip地址为名的文件夹</span></span><br><span class="line">192.168.0.20  192.168.0.22  ansible-copy  copy_dir</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># cd 192.168.0.20</span></span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ls</span></span><br><span class="line">etc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">从远程主机拉取文件到本地</span><br><span class="line">fetch会自动的在dest指定目录后加上远程主机命名的目录结构后面接src目录结构</span><br><span class="line">fetch存储到本地的目录结构dest + 远程主机名 + src</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：md5可以判定1、文件是否修改；2、文件是否传完</span></span><br><span class="line"><span class="comment">#注：或者使用任何hash算法中的其中一种，去比较值是否相等</span></span><br></pre></td></tr></table></figure><h2 id="3-command模块">3. command模块</h2><p>在远程主机上执行命令,属于裸执行,非键值对显示;不进行shell解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例1：<span class="built_in">command</span>、shell</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ansible all -m command -a &quot;ifconfig&quot;</span></span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ansible all -m shell -a &quot;ifconfig&quot;</span></span><br><span class="line"></span><br><span class="line">示例2：<span class="built_in">command</span>裸执行 (后面传的参数不会做解析)</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#注：把ifconfig|grep inet整个当做1个命令去执行</span></span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ansible all -m command -a &quot;ifconfig|grep inet&quot;</span></span><br><span class="line">192.168.0.22 | FAILED | rc=2 &gt;&gt;</span><br><span class="line">[Errno 2] 没有那个文件或目录</span><br><span class="line"><span class="comment">#属于裸执行，不会解析它的管道符号 会认为ifconfig|grep inet 是一个命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注：shell可以 (后面传的参数会做解析)</span></span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ansible all -m shell -a &quot;ifconfig|grep inet&quot;</span></span><br><span class="line"></span><br><span class="line">============================================================================================</span><br><span class="line">[root@cPen_A ansible]<span class="comment"># ifconfig# 注：查看网卡(看的东西多一点)</span></span><br><span class="line"><span class="comment">#注：可以看接收包、返回包、字节，有多少错误</span></span><br><span class="line">[root@cPen_A ansible]<span class="comment"># ip a# 注：查看网卡</span></span><br></pre></td></tr></table></figure><h2 id="4-shell模块">4. shell模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A 192.168.0.20]<span class="comment"># ansible all -m shell -a &quot;ifconfig|grep inet&quot;</span></span><br><span class="line">跟<span class="built_in">command</span>一样，只不过shell模块可以解析管道之类的功能</span><br></pre></td></tr></table></figure><h2 id="5-file模块">5. file模块</h2><blockquote><p>设置文件属性(创建文件)<br>常用参数:<br>path目标路径<br>state directory为目录,link为软件链接<br>group 目录属组<br>owner 属主<br>等,其他参数通过ansible-doc -s file 获取</p><p>state –<br>absent删除文件和目录的<br>directory目录<br>touch  新建空文件<br>link  软链接<br>hard硬链接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例1：查看file文件帮助信息</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible-doc -s file# 注：查看file文件帮助信息</span></span><br><span class="line">============================================================================================</span><br><span class="line"></span><br><span class="line">示例2：在目标主机/tmp目录下创建目录</span><br><span class="line"><span class="comment">#注：创建文件目录</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible all -m file -a &quot;path=/tmp/sanchuang state=directory&quot;</span></span><br><span class="line">============================================================================================</span><br><span class="line"></span><br><span class="line">示例3：设置修改文件属性</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ansible all -m file -a &quot;path=/tmp/passwd owner=sanchuang&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-cron模块">6. cron模块</h2><p>通过cron模块对目标主机生成计划任务<br>常用参数:<br>除了分(minute)时(hour)日(day)月(month)周(week)外<br>name: 本次计划任务的名称<br>state: present 生成(默认) |absent 删除 (基于name)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注：首先查看程序有没有起来</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># ps -ef |grep crond</span></span><br><span class="line">root        702      1  0 10:59 ?        00:00:00 /usr/sbin/crond -n</span><br><span class="line">root       3582   3553  0 14:41 pts/3    00:00:00 grep --color=auto crond</span><br><span class="line"><span class="comment">#注：学会看日志</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># cd /var/log/</span></span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># less cron</span></span><br><span class="line">Nov 25 12:01:01 cPen_A run-parts(/etc/cron.hourly)[3498]: finished 0anacron</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例1：添加计划任务</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#注：每三分钟输出当前时间，到/tmp/time.txt文件中</span></span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m cron -a &quot;minute=*/3 job=&#x27;date &gt;&gt;/tmp/time.txt&#x27; name=date_test state=present&quot;# 注：minute=*/3指定每3分钟 date &gt;&gt;/tmp/time.txt 命令</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="comment">#Ansible: date_test</span></span><br><span class="line">*/3 * * * * <span class="built_in">date</span> &gt;&gt;/tmp/time.txt</span><br><span class="line"></span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible 192.168.0.20 -m cron -a &quot;minute=*/3 job=&#x27;date &gt;&gt;/tmp/time.txt&#x27; name=date_test state=present&quot;# 注：可以单独为某个主机设置  并非一定批量处理</span></span><br><span class="line"></span><br><span class="line">============================================================================================</span><br><span class="line"></span><br><span class="line">示例2：删除计划任务</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible 192.168.0.20 -m cron -a  &quot;name=date_test state=absent&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ntp服务是一个时间管理服务器</span><br><span class="line">示例：ntp服务 系统时间管理服务</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># yum install ntp# 注：centos7</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum install chrony# 注：centos8里面  ntp已被 chrony取代</span></span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ntpdate ntp1.aliyun.com# 注：同步阿里云的时间</span></span><br><span class="line"><span class="comment">#注：使用ntp客户端 同步ntp的服务器 把时间同步</span></span><br></pre></td></tr></table></figure><h2 id="7-yum模块">7. yum模块</h2><p>故名思义就是yum安装软件包的模块;<br>常用参数说明:<br>enablerepo,disablerepo表示启用与禁用某repo库<br>name 安装包名<br>state (present’ orinstalled’, latest’)表示安装, (absent’ or `removed’) 表示删除</p><p>#注：name安装的包名state 安装还是卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：安装wget</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m yum -a &quot;name=wget state=installed&quot;</span></span><br><span class="line">示例：卸载wget</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m yum -a &quot;name=wget state=absent&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8-service模块">8. service模块</h2><p>服务管理模块<br>常用参数:<br>name:服务名<br>state:服务状态 started（启动）stopped（关闭）restarted（重启）reloaded（重新加载）<br>enabled: 是否开机启动 true|false<br>runlevel: 启动级别 (systemed方式忽略)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装文件传输服务vsftpd</span></span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m yum -a &quot;name=vsftpd state=installed&quot;</span></span><br><span class="line"></span><br><span class="line">示例：关闭vsftpd服务</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m service -a &quot;name=vsftpd state=stopped&quot;</span></span><br><span class="line">示例：开启vsftpd服务</span><br><span class="line">[root@cPen_A <span class="built_in">log</span>]<span class="comment"># ansible all -m service -a &quot;name=vsftpd state=started&quot;</span></span><br></pre></td></tr></table></figure><h2 id="9-script模块">9. script模块</h2><p>1、把本地的脚本传到远端执行;前提是到远端可以执行,不要把Linux下的脚本同步到windows下执行;</p><p>#注：只在远程服务器执行脚本，不上传脚本到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@cPen_A ~]<span class="comment"># vim test.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test ansible&quot;</span> &gt;&gt;/tmp/ansible.txt</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ansible all -m script -a &quot;/root/test.sh&quot;# 注：/root/test.sh脚本路径</span></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">示例：执行慢 机器多  怎么解决</span><br><span class="line">答：可以使用多进程去执行</span><br><span class="line">-f 6指定6个进程去执行</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>模块不能识别管道符号、shell模块 可以识别</span><br><span class="line">copy模块 推送</span><br><span class="line">script模块 不需要上传脚本，在远程服务器执行脚本</span><br></pre></td></tr></table></figure><hr><h1 id="四-查看系统版本">四. 查看系统版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：查看系统版本</span><br><span class="line">[root@cPen_B ~]<span class="comment"># uname -r# 注：查看系统内核</span></span><br><span class="line">4.18.0-193.el8.x86_64</span><br><span class="line">[root@cPen_B ~]<span class="comment"># cat /etc/redhat-release # 注：查看/etc/redhat-release 去查看系统版本</span></span><br><span class="line">CentOS Linux release 8.2.2004 (Core) </span><br></pre></td></tr></table></figure><hr><h1 id="五-链接">五. 链接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">示例：软链接</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ln -s ansible-copy ansible-copy-likcs-s#注：前面原文件 后面链接文件</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ls -al # 注：-s soft软</span></span><br><span class="line">lrwxrwxrwx   1 root root  12 11月 25 11:30 ansible-copy-likcs-s -&gt; ansible-copy</span><br><span class="line"><span class="comment">#注：软连接相当于快捷方式</span></span><br><span class="line"><span class="comment">#注：软链接删掉不会影响原文件，软链接的原文件删掉了会影响链接文件</span></span><br><span class="line"></span><br><span class="line">示例：硬链接</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ln ansible-copy ansible-copy-link</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ls -al</span></span><br><span class="line">-rw-r--r--   2 root root  20 11月 25 10:12 ansible-copy-link</span><br><span class="line"><span class="built_in">rm</span> -rf 删除源文件 硬链接文件 依旧没事</span><br><span class="line"><span class="comment">#注：硬链接 可以去做备份</span></span><br><span class="line"><span class="comment">#注：硬链接的原文件删掉了不会影响链接文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#软链接、硬链接</span></span><br><span class="line"><span class="comment">#创建一个硬链接 文件的链接数会+1</span></span><br><span class="line"><span class="comment">#删除硬链接文件或者是源文件  只是把文件的链接数-1  文件不会被真正删除</span></span><br><span class="line"><span class="comment">#创建一个硬链接</span></span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># ls -al</span></span><br><span class="line">-rw-r--r--   2 root root  20 11月 25 10:12 ansible-copy<span class="comment"># 注：链接为2</span></span><br><span class="line"><span class="comment">#注：软链接</span></span><br><span class="line">lrwxrwxrwx   1 root root  12 11月 25 11:30 ansible-copy-likcs-s -&gt; ansible-copy <span class="comment"># 注：链接为1</span></span><br><span class="line"><span class="comment">#注：硬链接</span></span><br><span class="line">-rw-r--r--   2 root root  20 11月 25 10:12 ansible-copy-link<span class="comment"># 注：链接为2</span></span><br><span class="line">符号链接数 1 是</span><br><span class="line"><span class="built_in">rm</span> -rf 删除的是 文件名 和 磁盘里面data的链接</span><br><span class="line">data还存在于磁盘里 ，过一段时间 新的数据会覆盖 data</span><br><span class="line"><span class="comment">#注：为1表示删除了后就没有了，为2表示删除后还有</span></span><br></pre></td></tr></table></figure><hr><h1 id="六-playbook">六. playbook</h1><p>如果ansible的各模块(能实现各种功能)是车间里的各工具;playbook就是指导手册,目标远程主机就是库存和原料对象<br>#注：<strong>语法 yaml格式配置</strong></p><blockquote><p><strong>1、playbook的核心元素</strong><br>hosts : playbook配置文件作用的主机<br>tasks: 任务列表<br>variables: 变量<br>templates:包含模板语法的文本文件<br>handlers :由特定条件触发的任务<br>roles :用于层次性、结构化地组织playbook。roles 能够根据层次型结构自动装载变量文件、tasks以及handlers等<br><strong>2、playbook运行方式</strong><br>ansible-playbook --check 只检测可能会发生的改变,但不真执行操作<br>ansible-playbook --list-hosts 列出运行任务的主机<br>ansible-playbook --syntax-check playbook.yaml 语法检测<br>ansible-playbook -t TAGS_NAME playbook.yaml 只执行TAGS_NAME任务<br>ansible-playbook playbook.yaml 运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">示例：编写/执行 playbook</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#注：把A机器的/etc/passwd复制到其他机器的/tmp/passwd_tmp下</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># vim ansible_playbook_sc.yaml#注：编写playbook</span></span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: up file</span><br><span class="line">    copy: src=/etc/passwd dest=/tmp/passwd_tmp</span><br><span class="line"><span class="comment">#执行playbook</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># ansible-playbook ansible_playbook_sc.yaml </span></span><br><span class="line">============================================================================================</span><br><span class="line"></span><br><span class="line">示例：yaml文件怎么去编写</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#第1步 先安装python3：yum install python3</span></span><br><span class="line"><span class="comment">#第2步 使用pip3安装PyYaml模块</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># pip3 install PyYaml</span></span><br><span class="line">[root@cPen_A ~]<span class="comment"># python3</span></span><br><span class="line">&gt;&gt;&gt; import yaml</span><br><span class="line">&gt;&gt;&gt; fp = open(<span class="string">&quot;ansible_playbook_sc.yaml&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; dict = yaml.load(fp)</span><br><span class="line">&gt;&gt;&gt; dict</span><br><span class="line">[&#123;<span class="string">&#x27;hosts&#x27;</span>: <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;remote_user&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;tasks&#x27;</span>: [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;up file&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>: <span class="string">&#x27;src=/etc/passwd dest=/tmp/passwd_tmp&#x27;</span>&#125;]&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注：使用</span></span><br><span class="line">1、创建yaml文件</span><br><span class="line">[root@cPen_A ~]<span class="comment"># cat ansible_playbook_sc.yaml # 注：类似于字典形式 - 相当于list ；里面相当于字典</span></span><br><span class="line">- hosts: all<span class="comment"># 注：对所有主机生效（什么组）</span></span><br><span class="line">  remote_user: root<span class="comment"># 注：root用户执行</span></span><br><span class="line">  tasks:<span class="comment"># 注：让它做什么事情</span></span><br><span class="line">  - name: up file<span class="comment"># 注：事情名字叫up file</span></span><br><span class="line">    copy: src=/etc/passwd dest=/tmp/passwd_tmp<span class="comment"># 注：使用copy模块 执行源 目的地址</span></span><br><span class="line">2、可以使用Python解析yaml</span><br><span class="line">&gt;&gt;&gt; import yaml</span><br><span class="line">&gt;&gt;&gt; fp = open(<span class="string">&quot;ansible_playbook_sc.yaml&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; dict = yaml.load(fp)</span><br><span class="line">&gt;&gt;&gt; dict</span><br><span class="line">[&#123;<span class="string">&#x27;hosts&#x27;</span>: <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;remote_user&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;tasks&#x27;</span>: [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;up file&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>: <span class="string">&#x27;src=/etc/passwd dest=/tmp/passwd_tmp&#x27;</span>&#125;]&#125;]</span><br><span class="line"><span class="comment">#注：使用copy模块 来指定src dest</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例：多个操作</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">[root@cPen_A ~]<span class="comment"># vim ansible_playbook_sc.yaml# 注：编写</span></span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: up file</span><br><span class="line">    copy: src=/etc/passwd dest=/tmp/passwd_tmp</span><br><span class="line">  - name: download redis</span><br><span class="line">    yum: name=redis state=installed</span><br><span class="line">- hosts: webser</span><br><span class="line">  tasks:</span><br><span class="line">  - name: remove file</span><br><span class="line">    shell: <span class="built_in">rm</span> -rf /tmp/passwd_tmp</span><br><span class="line">[root@cPen_A ~]<span class="comment"># ansible-playbook ansible_playbook_sc.yaml # 注：运行</span></span><br></pre></td></tr></table></figure><h1 id="七-总结">七. 总结</h1><blockquote><p>ansible通过常用模块在命令行就可以针对主机清单来管理配置远程主机,无需要代理客户端程序,但需要目标主机有ssh和python2.4+;基于ssh协议既可以通过用户名和密码,也可以通过私钥,推荐使用私钥;<br>windows上需要安装powershell及winrm服务也可以做到,关于这方面 可以参考我之前的博客 <a href="http://blog.51cto.com/dyc2005/2064746">ansible自动化管理windows</a><br>通过ansib-doc来获取模块信息及指定模块帮助信息;<br>ansible-playbook 基于YAML语法配置;可以对playbook文件进行测试,解析并执行应用于指定无端主机;非常方便我们统一编排分发管理远程主机;</p></blockquote><h1 id="八-练习">八. 练习</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">示例：每天凌晨1点 检查/etc/passwd 文件是否被修改，并且生成检查报告</span><br><span class="line"></span><br><span class="line">示例：编写脚本 实现ansible node节点(管理的主机)服务器备份 备份/var/log/messages日志 备份到/backup目录下，并且取名2020-11-25-01-log.tar.gz，每一个小时执行一次</span><br><span class="line"><span class="comment">############################################################################################</span></span><br><span class="line">示例：每天凌晨1点 检查/etc/passwd 文件是否被修改，并且生成检查报告</span><br><span class="line">-----------------------------------------------------------------------------------------------------------</span><br><span class="line">方法1 <span class="built_in">md5sum</span> 检查文件是否修改 <span class="built_in">md5sum</span> -c --status</span><br><span class="line">check_file.sh</span><br><span class="line"><span class="built_in">md5sum</span> -c --status d.md5 &amp;&amp;<span class="built_in">echo</span> <span class="string">&quot;文件未被修改&quot;</span> ||<span class="built_in">echo</span> <span class="string">&quot;文件已被修改&quot;</span></span><br><span class="line"><span class="built_in">md5sum</span> /etc/passwd &amp;&gt; d.md5<span class="comment">#注：文件名必须是 d.md5</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------</span><br><span class="line">方法2</span><br><span class="line">check_ectpasswd.sh</span><br><span class="line">a=<span class="string">&#x27;md5sum /etc/passwd&#x27;</span><span class="comment">#注：现在的md5值</span></span><br><span class="line">b=<span class="string">&#x27;tail -n1 /root/b&#x27;</span> <span class="comment">#注：上次的md5值</span></span><br><span class="line">[[ <span class="variable">$a</span>==<span class="variable">$b</span> ]]&amp;&amp;<span class="built_in">echo</span> <span class="string">&quot;文件未被修改!&quot;</span> &gt;&gt; /root/c||<span class="built_in">echo</span> <span class="string">&quot;文件已被修改!&quot;</span> &gt;&gt; /root/c</span><br><span class="line"><span class="variable">$a</span>  &gt;&gt; /root/b</span><br><span class="line">-----------------------------------------------------------------------------------------------------------</span><br><span class="line">方法3</span><br><span class="line"><span class="built_in">touch</span> /tmp/passwd.log</span><br><span class="line"><span class="built_in">touch</span> /tmp/passwd.txt</span><br><span class="line">a=`<span class="built_in">md5sum</span> /etc/passwd`</span><br><span class="line">b=`<span class="built_in">md5sum</span> /tmp/passwd.txt`</span><br><span class="line">c=<span class="variable">$&#123;a:0:32&#125;</span><span class="comment">#注：因为md5sum是任意长度的输入 固定长度的输出</span></span><br><span class="line">d=<span class="variable">$&#123;b:0:32&#125;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$c</span> = <span class="variable">$d</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span>文件未被修改&quot;</span> &gt;&gt;/tmp/passwd.log  </span><br><span class="line">    <span class="built_in">cat</span> /etc/passwd &gt;/tmp/passwd.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span>文件已被修改&quot;</span> &gt;&gt;/tmp/passwd.log</span><br><span class="line">    <span class="built_in">cat</span> /etc/passwd &gt;/tmp/passwd.txt</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">===========================================================================================================</span><br><span class="line">ansible_playbook_zuoye.yaml</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   tasks: </span><br><span class="line">   - name: check file</span><br><span class="line">     cron: hour=1 day=*/1 job=<span class="string">&#x27;/usr/bin/bash ~/check_file.sh&#x27;</span></span><br><span class="line"><span class="comment">#注：需要把脚本file到各个虚拟机，没有写这一步</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：编写脚本 实现ansible node节点(管理的主机)服务器备份 备份/var/log/messages日志 备份到/backup目录下，并且取名2020-11-25-01-log.tar.gz，每一个小时执行一次</span><br><span class="line"> - hosts: all</span><br><span class="line">   remote_user: root</span><br><span class="line">   tasks: </span><br><span class="line">   - name: backup messages</span><br><span class="line">     cron: hour=1 job=<span class="string">&#x27;tar czf /backup/$(date +%Y-%m-%d-%H-log.tar.gz) /var/log/messages&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例：<span class="built_in">md5sum</span> 检查文件是否修改 <span class="built_in">md5sum</span> -c --status</span><br><span class="line">[root@cPen_A lianxi]<span class="comment"># man md5sum</span></span><br><span class="line">       -c, --check</span><br><span class="line">              <span class="built_in">read</span> MD5 sums from the FILEs and check them</span><br><span class="line">       --status</span><br><span class="line">              don<span class="string">&#x27;t output anything, status code shows success</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# md5sum /etc/passwd &gt; d.md5#注：写进这个文件 文件名必须是这个 不能变</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# cat d.md5 </span></span><br><span class="line"><span class="string">28b2503e7fb565ddc0b8ec1f9ad6a9c7  /etc/passwd</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# md5sum -c --status d.md5#注：检查文件是否修改</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# echo $?#注：文件未修改，返回0</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# useradd chen223344</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# md5sum -c --status d.md5</span></span><br><span class="line"><span class="string">[root@cPen_A lianxi]# echo $?#注：文件修改，返回1</span></span><br><span class="line"><span class="string">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摘要：&lt;code&gt;ansible&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-云计算&quot;&gt;一. 云计算&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;云计算&lt;/strong&gt;&lt;br&gt;
openstack&lt;br&gt;
docker&lt;br&gt;
kvm&lt;br&gt;
虚拟化</summary>
      
    
    
    
    <category term="Linux" scheme="https://cpen.top/blog/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://cpen.top/blog/tags/Linux/"/>
    
    <category term="Ansible" scheme="https://cpen.top/blog/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>01_Other-Supervisor管理进程</title>
    <link href="https://cpen.top/blog/posts/88a726.html"/>
    <id>https://cpen.top/blog/posts/88a726.html</id>
    <published>2022-10-10T17:00:00.000Z</published>
    <updated>2022-10-10T17:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>Supervisor</code> + <code>Twikoo</code><span id="more"></span></p><blockquote><p>参考文章：</p><p><a href="https://blog.csdn.net/cyt0906/article/details/107344361">https://blog.csdn.net/cyt0906/article/details/107344361</a></p><p><a href="https://www.cnblogs.com/loveCrane/p/15954893.html">https://www.cnblogs.com/loveCrane/p/15954893.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release  <span class="comment">#安装yum源</span></span><br><span class="line">yum install -y supervisor</span><br><span class="line"></span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/supervisord.d/test.conf</span><br><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:blog]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/opt/bin</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line"><span class="built_in">command</span>=/usr/bin/python /opt/bin/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=<span class="literal">false</span></span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line">user = <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line">stderr_logfile=/tmp/blog_stderr.log </span><br><span class="line">stdout_logfile=/tmp/blog_stdout.log </span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = <span class="literal">true</span></span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = 20MB</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = 20</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status        //查看所有进程的状态</span><br><span class="line">supervisorctl stop es       //停止es</span><br><span class="line">supervisorctl start es      //启动es</span><br><span class="line">supervisorctl restart       //重启es</span><br><span class="line">supervisorctl update        //配置文件修改后使用该命令加载新的配置</span><br><span class="line">supervisorctl reload        //重新启动配置中的所有程序</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> tkserver.ini</span><br><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:tkserver]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/root/sh_file/twikoo</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line"><span class="built_in">command</span>=/bin/bash /root/sh_file/twikoo/tkserver.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定 义的</span></span><br><span class="line">autorestart=<span class="literal">false</span></span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本运行的用户身份</span></span><br><span class="line">user = root</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出</span></span><br><span class="line">stderr_logfile=/tmp/blog_stderr.log</span><br><span class="line">stdout_logfile=/tmp/blog_stdout.log</span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = <span class="literal">true</span></span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = 20MB</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = 20</span><br><span class="line"></span><br><span class="line">$ supervisord -c /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line">$ supervisorctl status</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">零碎知识点</summary>
    
    
    
    <category term="Other" scheme="https://cpen.top/blog/categories/Other/"/>
    
    
    <category term="Other" scheme="https://cpen.top/blog/tags/Other/"/>
    
    <category term="Supervisor" scheme="https://cpen.top/blog/tags/Supervisor/"/>
    
    <category term="Twikoo" scheme="https://cpen.top/blog/tags/Twikoo/"/>
    
  </entry>
  
  <entry>
    <title>01_Error-Nginx 反代后端接口报错</title>
    <link href="https://cpen.top/blog/posts/5552.html"/>
    <id>https://cpen.top/blog/posts/5552.html</id>
    <published>2022-09-18T10:00:00.000Z</published>
    <updated>2022-09-18T10:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>Error</code> + <code>Nginx</code> + <code>readv() failed (104: Connection reset by peer)</code><span id="more"></span></p><h1 id="01-Error-Nginx反代后端接口报错">01_Error-Nginx反代后端接口报错</h1><h2 id="一-前言">一. 前言</h2><blockquote><p>NGINX 反向代理 后端接口时报错：<code>[error] ...: *1918 readv() failed (104: Connection reset by peer) while reading upstream ...</code></p><p>控制台报错信息</p><p><img src="https://image.cpen.top/image/image-20220917210427284.png" alt="image-20220917210427284"></p><p>NGINX错误日志</p><p><img src="https://image.cpen.top/image/image-20220917210540055.png" alt="image-20220917210540055"></p></blockquote><h2 id="二-解决办法">二. 解决办法</h2><blockquote><p><strong>参考文章</strong> <a href="http://blog.51yip.com/apachenginx/2203.html">http://blog.51yip.com/apachenginx/2203.html</a></p><p>查看nginx error错误，发现上传接口报以下错：</p><p><code>2019/10/10 19:58:25 [error] 299784#0: \*5967188 readv() failed (104: Connection reset by peer) while reading upstream, client: 59.34.155.7, server: xxxxxxxx, request: &quot;POST /stream/tracking/file HTTP/1.1&quot;, upstream: &quot;http://xxxxxxxx/stream/tracking/file&quot;, host: &quot;xxxxxxxx&quot;</code></p><p>这种错误日志不多，第一感觉就是上传文件过大，传输时间过长，然后连接被中断。</p><p><code>当使用nginx作为反向代理时，为了支持长连接，需要做到两点：</code></p><p><code>从client到nginx的连接是长连接，对于客户端来说，nginx长连接是默认开启的。 从nginx到server的连接是长连接，需要自己开启</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> bigdata &#123;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">10</span>.<span class="number">0</span>.<span class="number">20</span>.xx:<span class="number">18018</span>;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">10</span>.<span class="number">0</span>.<span class="number">20</span>.xx:<span class="number">18018</span>;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">10</span>.<span class="number">0</span>.<span class="number">20</span>.xx:<span class="number">18018</span>;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">10</span>.<span class="number">0</span>.<span class="number">20</span>.xx:<span class="number">18018</span>;  </span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">100</span>;   //根据qps来调整  </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="section">location</span> <span class="regexp">~ /</span> &#123;  </span><br><span class="line">。。。。。。。。。省略。。。。。。。。。。。。。  </span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span>      <span class="number">120</span>;   //加大120  </span><br><span class="line">    <span class="attribute">proxy_send_timeout</span>         <span class="number">120</span>;   //加大120  </span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>         <span class="number">120</span>;   //加大120  </span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;    //开启后端，长连接  </span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;  //开启后端，长连接  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>注意：<code>keepalive指定的数值是Nginx每个worker连接后端的最大长连接数，而不是整个Nginx的.</code></p><p>作者:海底苍鹰</p><p>地址:<a href="http://blog.51yip.com/apachenginx/2203.html">http://blog.51yip.com/apachenginx/2203.html</a></p></blockquote><h2 id="三-个人配置记录">三. 个人配置记录</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">cat</span> cpen.top.conf</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> xxx ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxx;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:xxx;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">120</span>;   <span class="comment"># 加大120</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">120</span>;   <span class="comment"># 加大120</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">120</span>;   <span class="comment"># 加大120</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;           <span class="comment"># 开启后端，长连接</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;   <span class="comment"># 开启后端，长连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /usr/local/nginx/ssl/xxx.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /usr/local/nginx/ssl/xxx.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /data/service_logs/nginx/xxx.log misc;</span><br><span class="line">    <span class="attribute">error_log</span>  /data/service_logs/nginx/xxx.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Troubleshooting</summary>
    
    
    
    <category term="Error" scheme="https://cpen.top/blog/categories/Error/"/>
    
    
    <category term="Error" scheme="https://cpen.top/blog/tags/Error/"/>
    
    <category term="Nginx" scheme="https://cpen.top/blog/tags/Nginx/"/>
    
    <category term="Troubleshooting" scheme="https://cpen.top/blog/tags/Troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>01_PHP-CentOS8.2 编译安装 PHP8.1.10</title>
    <link href="https://cpen.top/blog/posts/63259.html"/>
    <id>https://cpen.top/blog/posts/63259.html</id>
    <published>2022-09-10T04:00:00.000Z</published>
    <updated>2022-09-18T04:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：<code>PHP</code> + <code>编译安装</code> + <code>图床迁移</code><span id="more"></span></p><h1 id="01-PHP-CentOS8-2-编译安装-PHP8-1-10">01_PHP-CentOS8.2 编译安装 PHP8.1.10</h1><h2 id="一-前言">一. 前言</h2><p>因 <a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a> 失效，博主打算将 GitHub 托管的图床备份到其他平台。</p><p>网上看到 <a href="https://github.com/lsky-org/lsky-pro">兰空图床</a> 萌生了自建图床的念头，搭建环境要求 PHP &gt;= 8.0.2，于是打算编译安装 PHP。</p><p>最终因服务器配置太低（1核2G）编译失败而放弃。转而投身之前已经搭建好环境的又拍云平台。</p><p>博文内容：<code>PHP-CentOS8.2 编译安装 PHP8.1.10</code> + <code>编写GitHub图床迁移至又拍云的脚本（ftp）</code> + <code>编写批量修改文章内容的脚本</code></p><h2 id="二-正文">二. 正文</h2><h3 id="2-1❤-CentOS8-2-编译安装-PHP8-1-10">2.1❤ CentOS8.2 编译安装 PHP8.1.10</h3><p><strong>2.1.1</strong> PHP8 和 oniguruma 源码下载并上传至服务器 /mnt 目录</p><p><a href="https://www.php.net/distributions/php-8.1.10.tar.gz">https://www.php.net/distributions/php-8.1.10.tar.gz</a></p><p><a href="https://codeload.github.com/kkos/oniguruma/tar.gz/refs/tags/v6.9.4">https://codeload.github.com/kkos/oniguruma/tar.gz/refs/tags/v6.9.4</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf oniguruma-6.9.4.tar.gz</span><br><span class="line">tar xzf php-8.1.10.tar.gz</span><br></pre></td></tr></table></figure><p><strong>2.1.2</strong> 安装 PHP8 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2 安装 PHP8 依赖包</span></span><br><span class="line">yum -y install autoconf freetype gd libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel net-snmp-devel libjpeg-devel php-ldap openldap-devel openldap-clients freetype-devel gmp-devel libzip libzip-devel sqlite-devel automake libtool</span><br></pre></td></tr></table></figure><p><strong>2.1.3</strong> 编译 PHP8 依赖包 oniguruma</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.1 生成 configure</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/oniguruma-6.9.4</span><br><span class="line">./autogen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 生成编译配置文件</span></span><br><span class="line">./configure --prefix=/usr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>2.1.4</strong> 编译 PHP8 主包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.1 生成编译配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/php-8.1.10</span><br><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --enable-mysqlnd --with-mysqli --with-pdo-mysql --enable-opcache --with-pcre-jit --enable-gd --with-jpeg --with-freetype --with-gettext --with-curl --with-openssl --enable-sockets --enable-mbstring --enable-xml --with-zip --with-zlib --with-snmp --with-mhash --enable-ftp --enable-bcmath --enable-soap --enable-shmop --enable-sysvsem --enable-pcntl --with-gmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>因为配置过低，编译失败。</p><p><strong>2.1.5</strong> 编译安装后目录</p><p>/usr/local/php</p><p><strong>参考</strong></p><p><a href="https://www.bilibili.com/read/cv9248283/">https://www.bilibili.com/read/cv9248283/</a></p><p><a href="https://www.bilibili.com/video/BV13U4y1T7VS">https://www.bilibili.com/video/BV13U4y1T7VS</a></p><h3 id="2-2-基于-FTP-将GitHub图床迁移至又拍云">2.2 基于 FTP 将GitHub图床迁移至又拍云</h3><p><strong>参考</strong></p><p><a href="https://techs.upyun.com/videos/cdnpage/creating_storage.html">官方视频教程 - 创建存储服务和使用 FTP 上传</a>可以得到用户名和密码</p><p>默认已经完成了又拍云云存储服务的申请 + 绑定自定义域名 <a href="https://help.upyun.com/knowledge-base/quick_start/">https://help.upyun.com/knowledge-base/quick_start/</a></p><p><strong>2.2.1</strong> 编写 Python 脚本 实现批量</p><p>源码来自<a href="http://blog.csdn.net/ouyang_peng/article/details/79271113">http://blog.csdn.net/ouyang_peng/article/details/79271113</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cmath <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFTP</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        ftp自动下载、自动上传脚本，可以递归目录操作</span></span><br><span class="line"><span class="string">        作者：欧阳鹏</span></span><br><span class="line"><span class="string">        博客地址：http://blog.csdn.net/ouyang_peng/article/details/79271113</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, port=<span class="number">21</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 初始化 FTP 客户端</span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">                 host:ip地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 port:端口号</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(&quot;__init__()---&gt; host = %s ,port = %s&quot; % (host, port))</span></span><br><span class="line"></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.ftp = FTP()</span><br><span class="line">        <span class="comment"># 重新设置下编码方式</span></span><br><span class="line">        <span class="comment">#self.ftp.encoding = &#x27;gbk&#x27;</span></span><br><span class="line">        self.ftp.encoding = <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">        <span class="comment"># 获取脚本路径</span></span><br><span class="line">        path = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        self.log_file = <span class="built_in">open</span>(path + <span class="string">&quot;/log.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.file_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 初始化 FTP 客户端</span></span><br><span class="line"><span class="string">            参数:</span></span><br><span class="line"><span class="string">                  username: 用户名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 password: 密码</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            timeout = <span class="number">60</span></span><br><span class="line">            socket.setdefaulttimeout(timeout)</span><br><span class="line">            <span class="comment"># 0主动模式 1 #被动模式</span></span><br><span class="line">            self.ftp.set_pasv(<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 打开调试级别2，显示详细信息</span></span><br><span class="line">            <span class="comment"># self.ftp.set_debuglevel(2)</span></span><br><span class="line"></span><br><span class="line">            self.debug_print(<span class="string">&#x27;开始尝试连接到 %s&#x27;</span> % self.host)</span><br><span class="line">            self.ftp.connect(self.host, self.port)</span><br><span class="line">            self.debug_print(<span class="string">&#x27;成功连接到 %s&#x27;</span> % self.host)</span><br><span class="line"></span><br><span class="line">            self.debug_print(<span class="string">&#x27;开始尝试登录到 %s&#x27;</span> % self.host)</span><br><span class="line">            self.ftp.login(username, password)</span><br><span class="line">            self.debug_print(<span class="string">&#x27;成功登录到 %s&#x27;</span> % self.host)</span><br><span class="line"></span><br><span class="line">            self.debug_print(self.ftp.welcome)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            self.deal_error(<span class="string">&quot;FTP 连接或登录失败 ，错误描述为：%s&quot;</span> % err)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_same_size</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断远程文件和本地文件大小是否一致</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string">             local_file: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_file: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            remote_file_size = self.ftp.size(remote_file)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="comment"># self.debug_print(&quot;is_same_size() 错误描述为：%s&quot; % err)</span></span><br><span class="line">            remote_file_size = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            local_file_size = os.path.getsize(local_file)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="comment"># self.debug_print(&quot;is_same_size() 错误描述为：%s&quot; % err)</span></span><br><span class="line">            local_file_size = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.debug_print(<span class="string">&#x27;local_file_size:%d  , remote_file_size:%d&#x27;</span> % (local_file_size, remote_file_size))</span><br><span class="line">        <span class="keyword">if</span> remote_file_size == local_file_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从ftp下载文件</span></span><br><span class="line"><span class="string">            参数:</span></span><br><span class="line"><span class="string">                local_file: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                remote_file: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.debug_print(<span class="string">&quot;download_file()---&gt; local_path = %s ,remote_path = %s&quot;</span> % (local_file, remote_file))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.is_same_size(local_file, remote_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;%s 文件大小相同，无需下载&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.debug_print(<span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;下载文件 %s ... ...&#x27;</span> % local_file)</span><br><span class="line">                buf_size = <span class="number">1024</span></span><br><span class="line">                file_handler = <span class="built_in">open</span>(local_file, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">                self.ftp.retrbinary(<span class="string">&#x27;RETR %s&#x27;</span> % remote_file, file_handler.write, buf_size)</span><br><span class="line">                file_handler.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                self.debug_print(<span class="string">&#x27;下载文件出错，出现异常：%s &#x27;</span> % err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file_tree</span>(<span class="params">self, local_path, remote_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从远程目录下载多个文件到本地目录</span></span><br><span class="line"><span class="string">                       参数:</span></span><br><span class="line"><span class="string">                         local_path: 本地路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                         remote_path: 远程路径</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;download_file_tree()---&gt;  local_path = %s ,remote_path = %s&quot;</span> % (local_path, remote_path))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(remote_path)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            self.debug_print(<span class="string">&#x27;远程目录%s不存在，继续...&#x27;</span> % remote_path + <span class="string">&quot; ,具体错误描述为：%s&quot;</span> % err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(local_path):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;本地目录%s不存在，先创建本地目录&#x27;</span> % local_path)</span><br><span class="line">            os.makedirs(local_path)</span><br><span class="line"></span><br><span class="line">        self.debug_print(<span class="string">&#x27;切换至目录: %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line"></span><br><span class="line">        self.file_list = []</span><br><span class="line">        <span class="comment"># 方法回调</span></span><br><span class="line">        self.ftp.<span class="built_in">dir</span>(self.get_file_list)</span><br><span class="line"></span><br><span class="line">        remote_names = self.file_list</span><br><span class="line">        self.debug_print(<span class="string">&#x27;远程目录 列表: %s&#x27;</span> % remote_names)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> remote_names:</span><br><span class="line">            file_type = item[<span class="number">0</span>]</span><br><span class="line">            file_name = item[<span class="number">1</span>]</span><br><span class="line">            local = os.path.join(local_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> file_type == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;download_file_tree()---&gt; 下载目录： %s&quot;</span> % file_name)</span><br><span class="line">                self.download_file_tree(local, file_name)</span><br><span class="line">            <span class="keyword">elif</span> file_type == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;download_file()---&gt; 下载文件： %s&quot;</span> % file_name)</span><br><span class="line">                self.download_file(local, file_name)</span><br><span class="line">        self.ftp.cwd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">        self.debug_print(<span class="string">&#x27;返回上层目录 %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">self, local_file, remote_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从本地上传文件到ftp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string">             local_path: 本地文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_path: 远程文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(local_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;%s 不存在&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.is_same_size(local_file, remote_file):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;跳过相等的文件: %s&#x27;</span> % local_file)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        buf_size = <span class="number">1024</span></span><br><span class="line">        file_handler = <span class="built_in">open</span>(local_file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        self.ftp.storbinary(<span class="string">&#x27;STOR %s&#x27;</span> % remote_file, file_handler, buf_size)</span><br><span class="line">        file_handler.close()</span><br><span class="line">        self.debug_print(<span class="string">&#x27;上传: %s&#x27;</span> % local_file + <span class="string">&quot;成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file_tree</span>(<span class="params">self, local_path, remote_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从本地上传目录下多个文件到ftp</span></span><br><span class="line"><span class="string">           参数:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             local_path: 本地路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             remote_path: 远程路径</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(local_path):</span><br><span class="line">            self.debug_print(<span class="string">&#x27;本地目录 %s 不存在&#x27;</span> % local_path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.ftp.cwd(remote_path)</span><br><span class="line">        self.debug_print(<span class="string">&#x27;切换至远程目录: %s&#x27;</span> % self.ftp.pwd())</span><br><span class="line"></span><br><span class="line">        local_name_list = os.listdir(local_path)</span><br><span class="line">        <span class="keyword">for</span> local_name <span class="keyword">in</span> local_name_list:</span><br><span class="line">            src = os.path.join(local_path, local_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(src):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.ftp.mkd(local_name)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                    self.debug_print(<span class="string">&quot;目录已存在 %s ,具体错误描述为：%s&quot;</span> % (local_name, err))</span><br><span class="line">                self.debug_print(<span class="string">&quot;upload_file_tree()---&gt; 上传目录： %s&quot;</span> % local_name)</span><br><span class="line">                self.upload_file_tree(src, local_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.debug_print(<span class="string">&quot;upload_file_tree()---&gt; 上传文件： %s&quot;</span> % local_name)</span><br><span class="line">                self.upload_file(src, local_name)</span><br><span class="line">        self.ftp.cwd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 退出ftp</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.debug_print(<span class="string">&quot;close()---&gt; FTP退出&quot;</span>)</span><br><span class="line">        self.ftp.quit()</span><br><span class="line">        self.log_file.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug_print</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 打印日志</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.write_log(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_error</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 处理错误异常</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                e：异常</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        log_str = <span class="string">&#x27;发生错误: %s&#x27;</span> % e</span><br><span class="line">        self.write_log(log_str)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_log</span>(<span class="params">self, log_str</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 记录日志</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                log_str：日志</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time_now = time.localtime()</span><br><span class="line">        date_now = time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time_now)</span><br><span class="line">        format_log_str = <span class="string">&quot;%s ---&gt; %s \n &quot;</span> % (date_now, log_str)</span><br><span class="line">        <span class="built_in">print</span>(format_log_str)</span><br><span class="line">        self.log_file.write(format_log_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file_list</span>(<span class="params">self, line</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 获取文件列表</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                line：</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        file_arr = self.get_file_name(line)</span><br><span class="line">        <span class="comment"># 去除  . 和  ..</span></span><br><span class="line">        <span class="keyword">if</span> file_arr[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;..&#x27;</span>]:</span><br><span class="line">            self.file_list.append(file_arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file_name</span>(<span class="params">self, line</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 获取文件名</span></span><br><span class="line"><span class="string">            参数：</span></span><br><span class="line"><span class="string">                line：</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pos = line.rfind(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> (line[pos] != <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (line[pos] == <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        file_arr = [line[<span class="number">0</span>], line[pos:]]</span><br><span class="line">        <span class="keyword">return</span> file_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 清除日志</span></span><br><span class="line">    path = os.path.dirname(os.path.realpath(__file__))      <span class="comment"># 脚本路径</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path + <span class="string">&#x27;/log.txt&#x27;</span>):</span><br><span class="line">        log_file = path + <span class="string">&#x27;/log.txt &#x27;</span><span class="keyword">if</span> os.sep == <span class="string">&quot;/&quot;</span> <span class="keyword">else</span> path + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;log.txt&#x27;</span></span><br><span class="line">        subprocess.Popen(<span class="string">f&#x27;rm -rf <span class="subst">&#123;log_file&#125;</span>&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    my_ftp = MyFTP(<span class="string">&quot;xxx.ftp.upyun.com&quot;</span>)</span><br><span class="line">    my_ftp.login(<span class="string">&quot;xxx/xxx&quot;</span>, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载单个文件</span></span><br><span class="line">    <span class="comment"># my_ftp.download_file(&quot;E:/code_zone/image_bed/image/wallpaper/1.jpg&quot;, &quot;/image/wallpaper/1.jpg&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传单个文件</span></span><br><span class="line">    <span class="comment"># my_ftp.upload_file(&quot;G:/ftp_test/Release/XTCLauncher.apk&quot;, &quot;/App/AutoUpload/ouyangpeng/I12/Release/XTCLauncher.apk&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载目录</span></span><br><span class="line">    <span class="comment"># image.cpen.top/image/ → 本地 E:/code_zone/image_bed/image/    (本地图床目录, 又拍云路径)</span></span><br><span class="line">    <span class="keyword">if</span> os.sep == <span class="string">&quot;\\&quot;</span>:</span><br><span class="line">        my_ftp.download_file_tree(<span class="string">&quot;E:/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> os.sep == <span class="string">&quot;/&quot;</span>:     <span class="comment"># aliyun</span></span><br><span class="line">        my_ftp.download_file_tree(<span class="string">&quot;/root/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传目录</span></span><br><span class="line">    <span class="comment"># 本地 E:/code_zone/image_bed/image/ → image.cpen.top/image/    (本地图床目录, 又拍云路径)</span></span><br><span class="line">    <span class="keyword">if</span> os.sep == <span class="string">&quot;\\&quot;</span>:      <span class="comment"># Windows</span></span><br><span class="line">        my_ftp.upload_file_tree(<span class="string">&quot;E:/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)    </span><br><span class="line">        my_ftp.close()</span><br><span class="line">    <span class="keyword">elif</span> os.sep == <span class="string">&quot;/&quot;</span>:     <span class="comment"># aliyun</span></span><br><span class="line">        my_ftp.upload_file_tree(<span class="string">&quot;/root/code_zone/image_bed/image/&quot;</span>, <span class="string">&quot;/image/&quot;</span>)  </span><br><span class="line">        my_ftp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="comment"># python E:/code_zone/tools/python-ftp/ftp.py</span></span><br><span class="line"><span class="comment"># python3 /root/code_zone/tools/python-ftp/ftp.py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.2.2</strong> 说明</p><p><code>my_ftp.login(&quot;用户名xxx/xxx&quot;, &quot;密码xxx&quot;)</code> 参考 <a href="https://techs.upyun.com/videos/cdnpage/creating_storage.html">https://techs.upyun.com/videos/cdnpage/creating_storage.html</a></p><p>后期又将脚本传到云服务器上，通过计划任务，每15分钟同步，保持 GitHub 与又拍云图床一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ CentOS in ~ [18:05:59]</span></span><br><span class="line">$ crontab -l</span><br><span class="line">*/15 * * * *  <span class="built_in">cd</span> /root/code_zone/image_bed/; git pull; python3 /root/code_zone/tools/python-ftp/ftp.py; bash git.sh</span><br></pre></td></tr></table></figure><p>迁移好图床后，博客中调用图片资源时 浏览器自动 http 跳 https，因为没有证书导致图片失效，于是又申请了 ssl 证书，上传至又拍云。</p><blockquote><p><img src="https://image.cpen.top/image/image-20220910180219146.png" alt="image-20220910180219146"></p></blockquote><h3 id="2-3-编写批量修改文章内容的脚本">2.3 编写批量修改文章内容的脚本</h3><p>源码参考<a href="https://blog.csdn.net/qq_38150250/article/details/118026219">https://blog.csdn.net/qq_38150250/article/details/118026219</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源码参考  https://blog.csdn.net/qq_38150250/article/details/118026219</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件查找 find . -name file_name -type f</span></span><br><span class="line"><span class="comment"># 查找函数：search_path 查找根路径 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文章路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">search_path, search_result</span>):</span><br><span class="line">    <span class="comment"># 获取当前路径下地所有文件</span></span><br><span class="line">    all_file = os.listdir(search_path)</span><br><span class="line">    <span class="comment"># 对于每一个文件</span></span><br><span class="line">    <span class="keyword">for</span> each_file <span class="keyword">in</span> all_file:</span><br><span class="line">        <span class="comment"># 若文件为一个文件夹</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(search_path + each_file):</span><br><span class="line">            <span class="comment"># 递归查找</span></span><br><span class="line">            search(search_path + each_file + <span class="string">&#x27;/&#x27;</span>, search_result)</span><br><span class="line">        <span class="comment"># 如果是需要被查找的文件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> re.findall(<span class="string">&#x27;.*\.md$&#x27;</span>, each_file) == [each_file]:</span><br><span class="line">            <span class="comment"># 输出路径</span></span><br><span class="line">                search_result.append(search_path + each_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 sed -i &#x27;s/old_str/new_str/&#x27;</span></span><br><span class="line"><span class="comment"># 文本替换 replace_file_name 需要替换的文件路径，replace_old_str 要替换的字符，replace_new_str 替换的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">replace_file_name, replace_old_str, replace_new_str</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(replace_file_name, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f1: </span><br><span class="line">        content = f1.read()</span><br><span class="line">        f1.close()</span><br><span class="line">        t = content.replace(replace_old_str, replace_new_str)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(replace_file_name, <span class="string">&quot;w&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        f2.write(t)</span><br><span class="line">    f2.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要改的地方</span></span><br><span class="line"><span class="comment">#path = &#x27;E:/code_zone/.history/20220831_blog/source/_posts/&#x27;</span></span><br><span class="line">path_list = [</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source/source/_posts/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source-butterfly/source/_posts/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:/code_zone/hexo-source-diary/source/_posts/&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">old_str = <span class="string">&#x27;https://image.cpen.top/image/&#x27;</span></span><br><span class="line">new_str = <span class="string">&#x27;https://image.cpen.top/image/&#x27;</span></span><br><span class="line">search_result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = []                 <span class="comment"># 存放文件路径</span></span><br><span class="line">    <span class="comment"># 默认当前目录</span></span><br><span class="line">    <span class="comment"># path = os.getcwd()</span></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> path_list:</span><br><span class="line">        search(path, result)    <span class="comment"># 获取文章路径</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> result:</span><br><span class="line">        replace(file_name, old_str, new_str)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; done  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_name, count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="comment"># python E:/code_zone/tools/python-replace/replace.py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.3.1</strong> 说明</p><p><code>search</code>函数指定文件类型为 .md，可获得文章的完整路径；</p><p><code>path_list</code>列表存放需要修改的文章父目录路径，可以递归查询子目录；</p><p><code>old_str</code>需要替换的内容</p><p><code>new_str</code>新内容</p>]]></content>
    
    
    <summary type="html">一种开源的通用计算机脚本语言</summary>
    
    
    
    <category term="PHP" scheme="https://cpen.top/blog/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://cpen.top/blog/tags/PHP/"/>
    
    <category term="脚本" scheme="https://cpen.top/blog/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>10_Python-CSDN_内存管理</title>
    <link href="https://cpen.top/blog/posts/62975.html"/>
    <id>https://cpen.top/blog/posts/62975.html</id>
    <published>2022-09-01T09:10:00.000Z</published>
    <updated>2022-09-01T09:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="10-Python-内存管理">10_Python-内存管理</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python内存管理三大块</span><br><span class="line">○ 引用计数</span><br><span class="line">○ 垃圾回收</span><br><span class="line">○ 内存池</span><br><span class="line">Python的内存管理以引用计数为主，垃圾回收为辅，还有个内存池</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="一-引用机制">一. 引用机制</h2><blockquote><p>● 引用机制</p><p>Python动态类型</p><p>○ ==对象==是储存在内存中的实体。</p><p>○ 我们在程序中写的==对象名==，只是指向这一对象的引用(reference)</p><p>○ ==引用和对象分离==，是动态类型的核心</p><p>○ 引用可以随时指向一个新的对象（内存地址会不一样）</p></blockquote><hr><h2 id="二-引用计数">二. 引用计数</h2><blockquote><p>● 引用计数</p><p><strong>在Python中，每个对象都有存有指向该对象的引用总数，即引用计数(reference count)</strong></p><p>引用计数器原理</p><p>○ 每个对象维护一个 ob_ref 字段，用来记录该对象当前被引用的次数 每当<strong>新的引用指向该对象</strong>时，它的<strong>引用计数ob_ref加1</strong></p><p>○ 每当该对象的<strong>引用失效时计数ob_ref减1</strong></p><p>○ <strong>一旦对象的引用计数为0</strong>，该<strong>对象可以被回收，对象占用的内存空间将被释放</strong>。 它的缺点是需要额外的空间维护引用计数，这个问题是其次的</p><p>○ 最主要的问题是它不能解决对象的“循环引用”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># a = 1 , b = 1 ，1的引用计数为2（保存它被引用的次数）</span></span><br><span class="line"><span class="comment"># a = 2 , b = 3 , 1的引用计数为0（内存里面不需要它了，回收销毁，这块对象被回收了，对象占用的内存空间将被释放）</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取引用计数: getrefcount()</span><br><span class="line">○ 当使用某个引用作为参数，传递给getrefcount()时，参数实际上创建了一个临时的引用。因此，</span><br><span class="line">getrefcount()所得到的结果，会比期望的多<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount<span class="comment"># 导入模块</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(getrefcount(a))   <span class="comment"># 获取对象a的引用计数 ， 结果为2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">增加引用计数</span><br><span class="line">○ 当一个对象A被另一个对象B引用时，A的引用计数将增加<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">减少引用计数</span><br><span class="line">○ <span class="keyword">del</span>删除或重新引用时，引用计数会变化（<span class="keyword">del</span>只是删除引用）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment"># 真实引用计数：1</span></span><br><span class="line">b = a<span class="comment"># 真实引用计数：2</span></span><br><span class="line">c = [a,a]<span class="comment"># 真实引用计数：4</span></span><br><span class="line"><span class="keyword">del</span> c[<span class="number">0</span>]            <span class="comment"># del删除引用引用计数 - 1 ； 真实引用计数: 3</span></span><br><span class="line"><span class="built_in">print</span>(c)            <span class="comment"># c 是列表对象输出为 [[1, 2, 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getrefcount(a))   <span class="comment"># 引用计数为4，真实引用计数为3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">循环引用的情况</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line">x.append(y)  y.append(x)</span><br><span class="line">○ 对于上面相互引用的情况,如果不存在其他对象对他们的引用,这两个对象所占用的内存也还是无法回收,从而导致内存泄漏</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.append(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">2</span>, [<span class="number">1</span>, [...]]]<span class="comment"># 注：发生死循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="string">&quot;y&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(y)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(y)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.append(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(x)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, [<span class="string">&#x27;y&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;y&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="string">&#x27;y&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y<span class="comment"># del x;del y引用删除，这块内存区域获取不到了</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">引用计数机制的优点：</span><br><span class="line">○ 简单</span><br><span class="line">○ 实时性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">引用计数机制的缺点：</span><br><span class="line">○ 维护引用计数消耗资源</span><br><span class="line">○ 循环引用时，无法回收</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-垃圾回收">三. 垃圾回收</h2><blockquote><p><strong>● 垃圾回收</strong></p><p><strong>回收原则</strong></p><p>○ 当Python的某个对象的引用计数降为0时，==可以==被垃圾回收</p><p><strong>gc机制</strong></p><p>○ GC作为现代编程语言的自动内存管理机制，专注于两件事</p><p>○ 找到内存中无用的垃圾资源</p><p>○ 清除这些垃圾并把内存让出来给其他对象使用</p><p>GC彻底把程序员从资源管理的重担中解放出来，让他们有更多的时间放在业务逻辑上。但这并不意味着码农就可以不去了解GC，毕竟多了解GC知识还是有利于我们写出更健壮的代码</p><p><strong>效率问题</strong></p><p>○ 垃圾回收时，Python不能进行其它的任务。频繁的垃圾回收将大大降低Python的工作效率</p><p>○ 当Python运行时，会记录其中分配对象(object allocation)和取消分配对象(object deallocation)的次数。当两者的差值高于某个阈值时，垃圾回收才会启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> gc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(gc.get_threshold())</span><br><span class="line">(<span class="number">700</span>, <span class="number">10</span>, <span class="number">10</span>)<span class="comment"># 注：默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect()</span><br><span class="line"><span class="number">2</span><span class="comment"># 删除了2个循环引用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x1 xx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x1 xx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gc.collect()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三种情况触发垃圾回收</span><br><span class="line">○ 调用gc.collect()</span><br><span class="line">○ GC达到阀值时</span><br><span class="line">○ 程序退出时</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分代(generation)回收</span><br><span class="line">这一策略的基本假设是：存活时间越久的对象，越不可能在后面的程序中变成垃圾</span><br><span class="line">○ Python将所有的对象分为0，1，2三代</span><br><span class="line">○ 所有的新建对象都是0代对象</span><br><span class="line">○ 当某一代对象经历过垃圾回收，依然存活，那么它就被归入下一代对象</span><br><span class="line">○ 垃圾回收启动时，一定会扫描所有的0代对象</span><br><span class="line">○ 如果0代经过一定次数垃圾回收，那么就启动对0代和1代的扫描清理</span><br><span class="line">○ 当1代也经历了一定次数的垃圾回收后，那么会启动对0，1，2，即对所有对象进行扫描</span><br></pre></td></tr></table></figure><p>标记清除</p><p>​标记-清除机制，顾名思义，首先标记对象（垃圾检测），然后清除垃圾（垃圾回收）。</p><p>​主要用于解决==循环引用==。</p><p>○ 1.标记：活动（有被引用）, 非活动（可被删除）</p><p>○ 2.清除：清除所有非活动的对象</p></blockquote><hr><h2 id="四-缓冲池">四. 缓冲池</h2><blockquote><p>● 缓冲池</p><p><strong>整数对象缓冲池</strong></p><p>○ 对于==[-5,256]== 这样的<strong>小整数</strong>，系统已经初始化好，可以直接拿来用。而对于其他的大整数，系统则提前申请了一块内存空间，等需要的时候在这上面创建大整数对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：小整数而言 id都是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">777</span><span class="comment"># a和b不是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545530064</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545530384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = b = <span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545530480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545530480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span><span class="comment"># a和b是一样的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span><span class="comment"># python的整数对象缓冲池</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133544871840</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133544871840</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getrefcount(a)</span><br><span class="line"><span class="number">801</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">字符串缓存</span><br><span class="line">○ 为了检验两个引用指向同一个对象，我们可以用<span class="keyword">is</span>关键字。<span class="keyword">is</span>用于判断两个引用所指的对象是否相同。</span><br><span class="line">当触发缓存机制时，只是创造了新的引用，而不是对象本身</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx &quot;</span><span class="comment"># 注：特殊字符不能放到缓冲区</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760672</span><span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760728</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;xxx_&quot;</span><span class="comment"># 注：数字、字母、下划线的组合 放在字符串缓冲区</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;xxx_&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545760616</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545760616</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="number">140133545242928</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545242992</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="number">140133545243120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545243120</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140612691332856</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140612688894592</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：对于乘法创建的字符  只会缓冲20个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x&quot;</span>*<span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x&quot;</span>*<span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不一样</span></span><br><span class="line"><span class="number">140133545742176</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545742248</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;x&quot;</span>*<span class="number">20</span><span class="comment"># 内存地址一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;x&quot;</span>*<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140133545246768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545246768</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>○ 这对于经常使用的数字和字符串来说也是一种优化的方案</p><p><strong>字符串的intern机制</strong></p><p>○ python对于短小的，只含有==字母数字==的字符串自动触发缓存机制。其他情况不会缓存</p></blockquote><hr><h2 id="五-深拷贝与浅拷贝">五. 深拷贝与浅拷贝</h2><blockquote><p><strong>● 深拷贝与浅拷贝</strong></p><p><strong>浅拷贝</strong></p><p>○ 拷贝第一层数据（地址）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;first&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.copy()<span class="comment"># 拷贝第一层数据（地址）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># a、b引用变了</span></span><br><span class="line"><span class="number">140133410603584</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133545741768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;second&quot;</span>] = <span class="string">&quot;No.2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;first&quot;</span>].append(<span class="number">4</span>)<span class="comment"># a、b里面的”first”引用 没有改变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 拷贝第一层数据（地址）</span></span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a[<span class="string">&quot;first&quot;</span>])<span class="comment"># 第一层数据（地址） 内存地址相同</span></span><br><span class="line"><span class="number">140133413100296</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b[<span class="string">&quot;first&quot;</span>])</span><br><span class="line"><span class="number">140133413100296</span></span><br></pre></td></tr></table></figure><p><strong>深拷贝</strong></p><p>○ 递归拷贝所有层的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;first&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy<span class="comment"># 导入模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)<span class="comment"># 内存地址不同</span></span><br><span class="line"><span class="number">140133545248160</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140133410604736</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;second&quot;</span>] = <span class="string">&quot;No.2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;first&quot;</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;No.2&#x27;</span>&#125;<span class="comment"># 递归拷贝所有层的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;<span class="comment"># 递归拷贝所有层的数据</span></span><br></pre></td></tr></table></figure><p>小结</p><p>○ 数字和字符串、元组，不能改变对象本身，只能改变引用的指向，称为==不可变数据对象==(immutable  object)</p><p>○ 列表、字典、集合可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为==可变数据对象==(mutable object)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">4</span>,<span class="number">5</span>]]<span class="comment"># 可变数据对象，有影响</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment"># 不可变数据对象，没有影响</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b[:]</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="内存管理" scheme="https://cpen.top/blog/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>09_Python-CSDN_上下文管理器</title>
    <link href="https://cpen.top/blog/posts/9186.html"/>
    <id>https://cpen.top/blog/posts/9186.html</id>
    <published>2022-09-01T09:00:00.000Z</published>
    <updated>2022-09-01T09:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="09-Python-上下文管理器">09_Python-上下文管理器</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-介绍">一. 介绍</h2><blockquote><p>● 介绍</p><p>上下文管理器是装饰器的近亲，与装饰器类似的，它们都是包装其他代码的工具</p><p>○ 装饰器：包装用于定义的代码块</p><p>○ 上下文管理器：可以包装任意格式的代码块</p><p><strong>上下文管理器是一个包装任意代码块的对象，上下文管理器保证:</strong></p><p>○ 进入上下文管理器时，每次代码执行的一致性</p><p>○ 当退出上下文管理器时，相关的资源会被正确地回收（即使内部代码出错，退出步骤也执行）</p><p><strong>上下文管理器的应用</strong></p><p>○ 上下文管理器被用到最多的就是——作为确保资源正确清理的一种方式</p></blockquote><hr><h2 id="二-语法">二. 语法</h2><blockquote><p><strong>with语句</strong></p><p>○ python2.5中加入的关键字with</p><p>○ with语句仅仅能对支持上下文管理协议的对象使用。</p><p>○ with语句的表达式的作用是返回一个遵循特定协议的对象，具体来说，该对象必须定义一个==__enter__==方法和==__exit__==方法</p><p><strong>with语句执行的解析</strong></p><p>○ 语法：with context_expr as cm:  do_sth()</p><p>○ 当with语句执行时，便执行上下文表达式（context_expr）来获得一个上下文管理器对象，上下文管理器的职责是提供一个上下文对象，用于在with语句块中处理细节：</p><p>​○ 一旦获得了上下文对象，就会调用它的__enter__()方法</p><p>​○ 将完成with语句块执行前的所有准备工作</p><p>​○ 如果with语句后面跟了as语句，==方法返回的结果==会被赋值给as关键字后面的变量</p><p>​○ 除了self参数，__enter__方法不接受任何其他参数。</p><p>​○ __enter__方法一般负责执行一些配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：上下文管理器 基本语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、普通方法打开文件对象</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)  <span class="comment"># a+ 追加写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(fp))</span><br><span class="line"><span class="comment">#结果为 [ …&#x27;__enter__&#x27;, …, &#x27;__exit__&#x27;…]</span></span><br><span class="line"><span class="comment">#注：有__enter__、__exit__方法，是上下文管理器</span></span><br><span class="line">fp.write(<span class="string">&quot;this is test&quot;</span>)</span><br><span class="line">fp.close()  <span class="comment">#注：处理结束后，把它关掉，不然占资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、用with语句执行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>) <span class="keyword">as</span> f:    <span class="comment">#注：赋给f对象</span></span><br><span class="line">    f.write(<span class="string">&quot;write test&quot;</span>)</span><br><span class="line">    <span class="comment">#退出语句执行之后 with自动回收对象</span></span><br><span class="line">    <span class="comment">#因为打开的文件对象是上下文管理器</span></span><br><span class="line">    <span class="comment">#注：open(&quot;test.txt&quot;,&quot;a+&quot;):上下文表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>语句执行的解析</span><br><span class="line">○ 当<span class="keyword">with</span>语句块结束时，无论是正常结束，还是由于异常，都会调用上下文对象的__exit__()方法</span><br><span class="line">○ __exit__()方法有<span class="number">3</span>个参数</span><br><span class="line">○ 如果<span class="keyword">with</span>语句正常结束，三个参数全部都是 <span class="literal">None</span></span><br><span class="line">○ 如果发生异常，三个参数的值分别等于调用sys.exc_info()函数返回的三个值：类型（异常类）、值（异常实例）和跟踪记录（traceback），相应的跟踪记录对象。</span><br><span class="line">○ 因为上下文管理器主要作用于共享资源，__enter__()和__exit__()方法基本是完成的是分配和释放资源的低层次工作，比如：数据库连接、锁分配、信号量加/减、状态管理、文件打开/关闭、异常处理等</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-异常处理">三. 异常处理</h2><blockquote><p>● 异常处理</p><p><strong>上下文管理器必须定义__exit__方法，该方法可以选择性地处理包装代码块中出现的异常，或者处理其他需要关闭上下文状态的事情</strong></p><p><strong>__exit__方法接收了异常信息，就有处理这个异常的义务，通常可以做以下几件：</strong></p><p>○ 传播异常</p><p>○ 中止异常</p><p>○ 抛出不同异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：__exit__</span></span><br><span class="line"><span class="comment">#__exit__ 接受三个参数  异常类，异常值，回溯信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上下文管理器  传播异常  终止异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> exc_val: <span class="comment">#注：如果有异常发生</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;My exception: <span class="subst">&#123;exc_val&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># return False   #注：传播异常，给解释器识别</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>     <span class="comment">#注：中止异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyException():<span class="comment">#使用上下文管理器</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)  <span class="comment">#注：没有异常，输出为2</span></span><br><span class="line"><span class="keyword">with</span> MyException():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)  <span class="comment">#注：False时 有异常</span></span><br><span class="line"><span class="comment">#False时 结果为 My exception: division by zero</span></span><br><span class="line"><span class="comment">#True时 结果为</span></span><br><span class="line"><span class="comment"># My exception: division by zero#注：True时  不报错，程序不中断</span></span><br><span class="line"><span class="comment">#注：True时 把异常传递出去，给解释器知道</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end......&quot;</span>)</span><br><span class="line"><span class="comment">#注：return False 不会执行 end......</span></span><br><span class="line"><span class="comment">#注：return True  执行了   end......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：如果是ValueError异常，终止异常；如果不是，传播异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">issubclass</span>(exc_type, ValueError): <span class="comment">#注：如果是ValueError异常及子类异常</span></span><br><span class="line">        <span class="comment"># if exc_type == ValueError:  #注：exc_type是类，所以判断条件ValueError类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment">#终止异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment">#传播异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyException():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;test value error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：issubclass(exc_type, ValueError) 如果是ValueError异常及子类异常</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="四-contextlib模块">四. contextlib模块</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● contextlib模块</span><br><span class="line"></span><br><span class="line">contextlib模块介绍</span><br><span class="line">○ contextlib模块实现上下文自动管理</span><br><span class="line">○ 这个生成器可以用更简单的方法创建上下文管理器</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：contextlib实现上下文管理器</span></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mycontext</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;enter context&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span>   <span class="comment">#注：生成器函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;exit context&quot;</span>)</span><br><span class="line"></span><br><span class="line">c1 = mycontext()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(c1))</span><br><span class="line"><span class="comment">#结果为 […&#x27;__enter__&#x27;,  &#x27;__exit__&#x27;…]</span></span><br><span class="line"><span class="comment">#注：使用装饰器后 就是上下文管理器了。不使用装饰器，只是生成器对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> c1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xxxxxxxxxx&quot;</span>)</span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line"><span class="comment"># enter context</span></span><br><span class="line"><span class="comment"># xxxxxxxxxx</span></span><br><span class="line"><span class="comment"># exit context</span></span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="上下文管理器" scheme="https://cpen.top/blog/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>08_Python-CSDN_面向对象练习</title>
    <link href="https://cpen.top/blog/posts/13683.html"/>
    <id>https://cpen.top/blog/posts/13683.html</id>
    <published>2022-09-01T08:50:00.000Z</published>
    <updated>2022-09-01T08:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="08-Python-面向对象练习">08_Python-面向对象练习</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><p><a href="https://www.runoob.com/python3/python3-class.html">菜鸟教程：面向对象<br>https://www.runoob.com/python3/python3-class.html</a></p><hr><h2 id="一-回合制对战游戏">一. 回合制对战游戏</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● ①、回合制对战游戏</span><br><span class="line"></span><br><span class="line"> ○回合制对战游戏</span><br><span class="line"> ●创建角色：名字、性别、血量、装备  ●战斗</span><br><span class="line"> ●创建房间：                          ●装备-防弹衣</span><br><span class="line"> ●角色可加入房间                      ●血量默认100</span><br><span class="line"> ●房间内的人可互打                    ●正常被攻击-10滴血</span><br><span class="line"> ●房间上限2人                        ●有防弹衣-5滴血</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,blood=<span class="number">100</span>,body_armor=<span class="literal">None</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.blood = blood</span><br><span class="line">        self.body_armor = body_armor</span><br><span class="line">        self.room = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.room == other.room:<span class="comment"># 注：同一房间</span></span><br><span class="line">            <span class="keyword">if</span> self != other:<span class="comment"># 注：不同的人</span></span><br><span class="line">                <span class="keyword">if</span> self.blood &gt; <span class="number">0</span> <span class="keyword">and</span> other.blood &gt; <span class="number">0</span>:</span><br><span class="line">                    reduce_blood = <span class="number">5</span> <span class="keyword">if</span> other.body_armor <span class="keyword">else</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 注：body_armor为假 返回10(没有设置防弹衣)</span></span><br><span class="line">                    other.blood -= reduce_blood</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>攻击<span class="subst">&#123;other.name&#125;</span> <span class="subst">&#123;reduce_blood&#125;</span>点血量\t<span class="subst">&#123;self.name&#125;</span>当前血量：<span class="subst">&#123;self.blood&#125;</span>\t<span class="subst">&#123;other.name&#125;</span>当前血量：<span class="subst">&#123;other.blood&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;其中一方已死亡，不能攻击&quot;</span>)</span><br><span class="line">                    exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你不能攻击自己&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;攻击对象，不在同一个房间&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.member = []</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">join</span>(<span class="params">self,role</span>):</span><br><span class="line">        <span class="keyword">if</span> role.room == <span class="literal">None</span>:</span><br><span class="line"><span class="comment"># 注：在角色的类里定义的属性room</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.member) &lt; <span class="number">2</span>:</span><br><span class="line">                self.member.append(role)</span><br><span class="line"><span class="comment"># 注：member房间的属性，房间只能加2个人 所以&lt;2</span></span><br><span class="line">                role.room = self.name</span><br><span class="line"><span class="comment"># 注：达到条件，定义角色加入到 某个房间</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;此房间已满&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此角色已经加入房间了&quot;</span>)</span><br><span class="line"></span><br><span class="line">role_dict = &#123;&#125;  <span class="comment"># 存放初始化实例# 注：存放名字和对象的关系</span></span><br><span class="line">room_dict = &#123;&#125;  <span class="comment"># 存放初始化实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建角色\t2.创建房间\t3.加入房间\t4.开始战斗\t5.退出&quot;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                name, sex = <span class="built_in">input</span>(<span class="string">&quot;请输入角色的姓名与性别，空格隔开\n&quot;</span>).split()</span><br><span class="line"><span class="comment">#注：split()是为了 分割 将字符 赋给2个变量</span></span><br><span class="line">                role_dict[name] = Role(name, sex)</span><br><span class="line">                def_blood = <span class="built_in">input</span>(<span class="string">&quot;输入自定义血量\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> def_blood.isdigit():</span><br><span class="line">                    role_dict[name].blood = <span class="built_in">int</span>(def_blood)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;自定义成功，用户<span class="subst">&#123;name&#125;</span>当前血量<span class="subst">&#123;role_dict[name].blood&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;自定义失败，用户<span class="subst">&#123;name&#125;</span>当前血量<span class="subst">&#123;role_dict[name].blood&#125;</span>&quot;</span>)</span><br><span class="line">                wear_body_armor = <span class="built_in">input</span>(<span class="string">&quot;输入y装备防弹衣\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> wear_body_armor == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                    role_dict[name].body_armor = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入房间的名字\n&quot;</span>)</span><br><span class="line">                room_dict[name] = Room(name)</span><br><span class="line"><span class="comment"># 注：创建好的对象(实例化对象) 保存在字典里</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;当前角色有<span class="subst">&#123;role_dict.keys()&#125;</span>，当前房间有<span class="subst">&#123;room_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                role_name, room_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要加入的角色和房间名，空格隔开\n&quot;</span>).split()</span><br><span class="line"><span class="comment"># 注：这里可以做1个判断 (考虑到各种情况)</span></span><br><span class="line">                room_dict[room_name].join(role_dict[role_name])</span><br><span class="line"><span class="comment"># 注：从字典 取出房间对象，调用房间对象的join()方法</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;当前房间有<span class="subst">&#123;room_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                room_name = <span class="built_in">input</span>(<span class="string">&quot;请输入房间的名字\n&quot;</span>)<span class="comment"># 注：选择房间</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(room_dict[room_name].member) == <span class="number">2</span>:</span><br><span class="line"><span class="comment"># 注：len()==2 这是保证房间里有2个人  才能对打</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        room_dict[room_name].member[<span class="number">0</span>].attack(room_dict[room_name].member[<span class="number">1</span>])</span><br><span class="line">                        room_dict[room_name].member[<span class="number">1</span>].attack(room_dict[room_name].member[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 注：通过字典获取房间实例对象，member是房间的属性</span></span><br><span class="line"><span class="comment"># 注：为什么房间实例能获取到创建角色类的对象？因为选项3 是角色类属性 加入 房间member属性，保证了这一步能调用成功实例化对象</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;房间<span class="subst">&#123;room_name&#125;</span>人数不足2人，对战失败！&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出对战&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20220505044926926.png" alt="image-20220505044926926"></p></blockquote><hr><h2 id="二-模拟ATM">二. 模拟ATM</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">● ②、模拟ATM</span><br><span class="line"></span><br><span class="line">○模拟ATM</span><br><span class="line">●1、创建ATM</span><br><span class="line">    ○ATM里的总金额</span><br><span class="line">    ○ATM可向里面加钱</span><br><span class="line">    ○ATM里的钱取出来</span><br><span class="line"></span><br><span class="line">●2、创建账户去取钱</span><br><span class="line">    ○账户属性   名称、余额、密码</span><br><span class="line">    ○账户要选择1台ATM进行操作</span><br><span class="line">    ○可以取钱、存钱、查询余额</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Atm</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,atm_total</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.atm_total = atm_total</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,money</span>):</span><br><span class="line">        self.atm_total += money</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;机器<span class="subst">&#123;self.name&#125;</span>增加金额<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前总金额为<span class="subst">&#123;self.atm_total&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrease</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.atm_total &lt; money:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>余额不足，取钱失败&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.atm_total -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;机器<span class="subst">&#123;self.name&#125;</span>取出金额<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前总金额为<span class="subst">&#123;self.atm_total&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,balance,passwd</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.passwd = passwd</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self,atm,money</span>):</span><br><span class="line">        <span class="keyword">if</span> money &lt;= self.balance:</span><br><span class="line">            <span class="keyword">if</span> money &lt;= atm.atm_total:</span><br><span class="line">                self.balance -= money</span><br><span class="line">                atm.atm_total -= money</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功取款<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ATM机 <span class="subst">&#123;atm.name&#125;</span>余额不足，取款失败！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;您输入的金额大于您的账户余额，取款失败！&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self,atm,money</span>):</span><br><span class="line">        self.balance += money</span><br><span class="line">        atm.atm_total += money</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功存款<span class="subst">&#123;money&#125;</span>元，<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">look</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>当前余额为<span class="subst">&#123;self.balance&#125;</span>元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">atm_os</span>():</span><br><span class="line">    <span class="comment"># 管理员登录验证</span></span><br><span class="line">    name, paaswd = <span class="built_in">input</span>(<span class="string">&quot;请输入管理员账号和密码，空格隔开\n&quot;</span>).split()</span><br><span class="line">    <span class="keyword">if</span> (name, paaswd) <span class="keyword">in</span> admin_dict.items():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;管理员账号出错&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建ATM\t2.ATM加钱\t3.ATM取钱\t4.返回上一级&quot;</span>)</span><br><span class="line">        enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">            enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 1、创建ATM</span></span><br><span class="line">                <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                    name, atm_total = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称，总金额，空格隔开\n&quot;</span>).split()</span><br><span class="line">                    atm_total = <span class="built_in">int</span>(atm_total)</span><br><span class="line">                    atm_dict[name] = Atm(name,atm_total)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;创建ATM机 <span class="subst">&#123;name&#125;</span>成功，<span class="subst">&#123;name&#125;</span>当前总金额<span class="subst">&#123;atm_total&#125;</span>元&quot;</span>)</span><br><span class="line">                <span class="comment"># 2、ATM加钱</span></span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前存在的ATM机器：<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm_name = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> atm_name <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入金额\n&quot;</span>))</span><br><span class="line">                        atm_dict[atm_name].add(money)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm_name&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="comment"># 3、ATM取钱</span></span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前存在的ATM机器：<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm_name = <span class="built_in">input</span>(<span class="string">&quot;请输入ATM名称\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> atm_name <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入金额\n&quot;</span>))</span><br><span class="line">                        <span class="keyword">if</span> money &gt; <span class="number">0</span>:</span><br><span class="line">                            atm_dict[atm_name].decrease(money)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;取出的金额不能为负&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm_name&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;退出ATM操作&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-4选择操作&quot;</span>)</span><br><span class="line"><span class="comment"># 账户操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_os</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择：1.创建账户\t2.取钱\t3.存钱\t4.查询余额\t5.返回上一级&quot;</span>)</span><br><span class="line">        enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">            enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 1、创建账户</span></span><br><span class="line">                <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                    name, balance, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入账户名称、余额和密码进行创建，空格分割\n&quot;</span>).split()</span><br><span class="line">                    balance = <span class="built_in">int</span>(balance)</span><br><span class="line">                    account_dict[name] = Account(name,balance,passwd)</span><br><span class="line">                    account_passwd[name] = passwd</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;创建用户 <span class="subst">&#123;name&#125;</span>成功，余额为<span class="subst">&#123;balance&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">2</span> <span class="keyword">or</span> enter_number == <span class="number">3</span> <span class="keyword">or</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;当前的ATM机有<span class="subst">&#123;atm_dict.keys()&#125;</span>&quot;</span>)</span><br><span class="line">                    atm, name, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入您选择的ATM机、您的账户名称和密码进行登陆，空格分割\n&quot;</span>).split()</span><br><span class="line">                    <span class="comment"># 验证ATM是否存在</span></span><br><span class="line">                    <span class="keyword">if</span> atm <span class="keyword">in</span> atm_dict.keys():</span><br><span class="line">                        <span class="comment"># 验证账户</span></span><br><span class="line">                        <span class="keyword">if</span> (name, passwd) <span class="keyword">in</span> account_passwd.items():</span><br><span class="line">                            atm = atm_dict[atm]</span><br><span class="line">                            <span class="comment"># 2、取钱</span></span><br><span class="line">                            <span class="keyword">if</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                                money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入取款金额\n&quot;</span>))</span><br><span class="line">                                account_dict[name].draw(atm, money)</span><br><span class="line">                            <span class="comment"># 3、存钱</span></span><br><span class="line">                            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                                money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入存款金额\n&quot;</span>))</span><br><span class="line">                                account_dict[name].save(atm, money)</span><br><span class="line">                            <span class="comment"># 4、查询余额</span></span><br><span class="line">                            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                                account_dict[name].look()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;账户错误&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;atm&#125;</span>不存在&quot;</span>)</span><br><span class="line">                <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;退出账户操作&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作&quot;</span>)</span><br><span class="line"></span><br><span class="line">admin_dict = &#123;<span class="string">&quot;admin&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125; <span class="comment"># 管理员信息</span></span><br><span class="line">account_passwd = &#123;&#125; <span class="comment"># 账户信息</span></span><br><span class="line">atm_dict = &#123;&#125;       <span class="comment"># 存放初始化实例</span></span><br><span class="line">account_dict = &#123;&#125;   <span class="comment"># 存放初始化实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择：1.ATM操作\t2.账户操作\t3.退出&quot;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># 1、ATM操作</span></span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                atm_os()</span><br><span class="line">            <span class="comment"># 2、账户操作</span></span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                account_os()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出操作！&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-3选择操作&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-3选择操作&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.cpen.top/image/image-20220505045128067.png" alt="image-20220505045128067"></p></blockquote><hr><h2 id="三-Linux用户管理类">三. Linux用户管理类</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">● ③、Linux用户管理类</span><br><span class="line"></span><br><span class="line"> Linux用户管理类</span><br><span class="line"> ●基类：实现往linux系统里添加用户</span><br><span class="line"> ●子类A：</span><br><span class="line">   ○能够查看、修改uid和gid、shell等信息   ●子类C(A,B)：</span><br><span class="line"> ●子类B：                                  ○1.可以单独新建组</span><br><span class="line">   ○1.能删除用户                           ○2.可以将某个用户的gid修改为新建的组的gid</span><br><span class="line">   ○2.能删除组                             ○3.加入异常机制，异常的名字需要自己定义</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,name,passwd</span>):</span><br><span class="line">        subprocess.Popen(<span class="string">f&#x27;useradd <span class="subst">&#123;name&#125;</span> -p <span class="subst">&#123;passwd&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;<span class="subst">&#123;name&#125;</span>创建成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">look</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;cut -d &quot;:&quot; -f 1,3,4,7 /etc/passwd|grep -E ^<span class="subst">&#123;name&#125;</span>:&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">self,name,uid,gid,shell</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;usermod -u <span class="subst">&#123;uid&#125;</span> -g <span class="subst">&#123;gid&#125;</span> -s <span class="subst">&#123;shell&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;修改成功&quot; ||echo &quot;修改失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_user</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;userdel -r <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;删除成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_group</span>(<span class="params">self,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;groupdel <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;删除成功&quot; ||echo &quot;删除失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line">    group_member = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">group_add</span>(<span class="params">self,gid,name</span>):</span><br><span class="line">        p = subprocess.Popen(<span class="string">f&#x27;groupadd -g <span class="subst">&#123;gid&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;创建成功&quot; ||echo &quot;创建失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        C.group_member.append(gid)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gid_modify</span>(<span class="params">self,gid,name</span>):</span><br><span class="line">        <span class="keyword">if</span> gid <span class="keyword">in</span> C.group_member:</span><br><span class="line">            p = subprocess.Popen(<span class="string">f&#x27;usermod -g <span class="subst">&#123;gid&#125;</span> <span class="subst">&#123;name&#125;</span>&amp;&gt;/dev/null &amp;&amp; echo &quot;修改成功&quot; ||echo &quot;修改失败&quot;&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;修改失败，<span class="subst">&#123;gid&#125;</span>不是新建的组id&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefinedError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是自定义异常&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;请选择：</span></span><br><span class="line"><span class="string">1.添加用户\t2.查看uid、gid和shell信息\t3.修改uid、gid和shell信息</span></span><br><span class="line"><span class="string">4.删除用户\t5.删除组\t6.新建组\t7.修改用户gid\t8.触发异常\t9.退出&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    enter_number = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> enter_number.isdigit():</span><br><span class="line">        enter_number = <span class="built_in">int</span>(enter_number)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= enter_number &lt;= <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">if</span> enter_number == <span class="number">1</span>:</span><br><span class="line">                sample = Base()</span><br><span class="line">                name, passwd = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名和密码，空格分割\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.add(name, passwd)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">2</span>:</span><br><span class="line">                sample = A()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名\n&quot;</span>)</span><br><span class="line">                sample.look(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">3</span>:</span><br><span class="line">                sample = A()</span><br><span class="line">                name,uid,gid,shell = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名，修改后的uid、gid和shell，空格分割\n(4个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.modify(name,uid,gid,shell)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">4</span>:</span><br><span class="line">                sample = B()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名\n&quot;</span>)</span><br><span class="line">                sample.del_user(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">5</span>:</span><br><span class="line">                sample = B()</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&quot;请输入组名\n&quot;</span>)</span><br><span class="line">                sample.del_group(name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">6</span>:</span><br><span class="line">                sample = C()</span><br><span class="line">                name, gid = <span class="built_in">input</span>(<span class="string">&quot;请输入组名、指定的gid，空格分割\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.group_add(gid,name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">7</span>:</span><br><span class="line">                sample = C()</span><br><span class="line">                name, gid = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名、gid\n(2个参数)\t&quot;</span>).split()</span><br><span class="line">                sample.gid_modify(gid,name)</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">raise</span> DefinedError</span><br><span class="line">            <span class="keyword">elif</span> enter_number == <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;退出系统&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请输入1-5选择操作！&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="OOP" scheme="https://cpen.top/blog/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>07_Python-CSDN_高阶函数</title>
    <link href="https://cpen.top/blog/posts/46.html"/>
    <id>https://cpen.top/blog/posts/46.html</id>
    <published>2022-09-01T08:40:00.000Z</published>
    <updated>2022-09-01T08:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="07-Python-高阶函数">07_Python-高阶函数</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">高阶函数：把函数作为参数传入，这样的函数称为高阶函数。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func01</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func02</span>(<span class="params">func,a,b</span>):   <span class="comment"># 注：把函数作为参数传递;func02称为高阶函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start func......&quot;</span>)</span><br><span class="line">    func(a,b)</span><br><span class="line"></span><br><span class="line">func02(func01,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="常用高阶函数">常用高阶函数</h2><h3 id="map">map</h3><blockquote><p>● map</p><p><strong>用Python-map代码实现：f(x)=x*x</strong></p><p>●内置函数map，map()函数接收两个参数，一个是==函数==，一个是==Iterable（可多个）。==</p><p>●map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><p>●map()传入的第一个参数是f，即函数对象本身。</p><p>●由于结果r是一个Iterator，Iterator是惰性序列。</p><p>●可通过list()函数让它把整个序列都计算出来并返回一个list。</p><p>●map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x**2，还可以计算任意复杂的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：map 映射</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">item</span>):         <span class="comment"># 接收1个参数item</span></span><br><span class="line">    <span class="keyword">return</span> item*item    <span class="comment"># 返回数的平方</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]       <span class="comment"># 注：a是可迭代对象</span></span><br><span class="line">result = <span class="built_in">map</span>(func, a)</span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment"># 注：返回 map对象</span></span><br><span class="line"><span class="comment">#结果为 &lt;map object at 0x0000020EDE156970&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 4, 9, 16, 25, 36]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：保留2位小数</span></span><br><span class="line">b = [<span class="number">1.239865</span>,<span class="number">4.56</span>,<span class="number">3.2</span>,<span class="number">9.82356</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">round</span>(x,<span class="number">2</span>), b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1.24, 4.56, 3.2, 9.82]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：转化为百分数，并且保留2位小数</span></span><br><span class="line">c = [<span class="number">0.000564</span>, <span class="number">0.456723</span>, <span class="number">0.5</span>, <span class="number">0.71345</span>]</span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">format</span>(x,<span class="string">&#x27;.2%&#x27;</span>), c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [&#x27;0.06%&#x27;, &#x27;45.67%&#x27;, &#x27;50.00%&#x27;, &#x27;71.34%&#x27;]</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="filter">filter</h3><blockquote><p>○ filter</p><p><strong>用Python-filter代码实现：在一个list中，删掉偶数，只保留奇数</strong></p><p>○Python内建的filter()函数用于过滤序列。和map()类似，filter()也接收一个函数和一个序列。</p><p>○filter()把传入的函数依次作用于每个元素，然后==根据返回值是True还是False决定保留还是丢弃==该元素。</p><p>○注意到filter()函数返回的是一个Iterator，也就是一个惰性序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：保留奇数</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func01</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span>   <span class="comment"># 注：保留奇数；返回结果true\false</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(func01, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 3, 5, 7]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：返回100以内的回数</span></span><br><span class="line">b = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>) <span class="comment"># 注：字符串反向切片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func02</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(x) == <span class="built_in">str</span>(x)[::-<span class="number">1</span>]</span><br><span class="line">result = <span class="built_in">filter</span>(func02, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment">#结果为 [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：过滤出 1-100 以内 开平方根 是整数的数</span></span><br><span class="line"><span class="comment"># 方法：开平方后还在原列表里</span></span><br><span class="line"><span class="comment"># 过滤出 1-100 以内 开平方根 是整数的数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">c = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:sqrt(x) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>) , <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result)) <span class="comment"># 注：开平方后的数还在 c 里面</span></span><br><span class="line"><span class="comment">#结果为 [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="sorted">sorted</h3><blockquote><p>● sorted</p><p><strong>用Python-sorted代码实现：按绝对值大小排序</strong></p><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序。</p><p>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p><p>对比原始的list和经过key=abs处理过的list：</p><p>●执行语句：==sorted([36, 5, -12, 9, -21], key=abs)==</p><ol><li><p>原始字符：list = [36, 5, -12, 9, -21]</p></li><li><p>经过key-abs对应得到：[36, 5, 12, 9, 21]</p></li><li><p>按照keys-abs排序结果：[5, 9, 12, 21, 36]</p></li><li><p>原始字符串最终结果：[5, 9, -12, -21, 36]</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：sorted(a)和a.sort()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>]<span class="comment"># 注：不会改变a的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)<span class="comment"># 注：从小到大排序</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()<span class="comment"># 注：会改变a的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：全为布尔型，可以排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="literal">True</span>,<span class="number">0</span>,<span class="literal">False</span>,<span class="string">&quot;c&quot;</span>==<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[<span class="number">0</span>, <span class="literal">False</span>, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：按照字符串长度排序</span></span><br><span class="line"><span class="comment"># 注：按照首字母的ASCII码排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;defg&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;sbbbfg&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;defg&#x27;</span>, <span class="string">&#x27;sbbbfg&#x27;</span>]</span><br><span class="line"><span class="comment"># 注：按照字符串长度排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a,key=<span class="built_in">len</span>)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;defg&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;sbbbfg&#x27;</span>]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例4：元组排序</span></span><br><span class="line"><span class="comment"># 元组的排序，先比较第一个值，再比较第二个，依次类推</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="literal">True</span>,<span class="literal">False</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">0</span>), (<span class="literal">True</span>, <span class="literal">False</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(a,reverse=<span class="literal">True</span>)<span class="comment"># 注：反序 reverse=True</span></span><br><span class="line">[(<span class="number">2</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="literal">True</span>, <span class="literal">False</span>)]</span><br></pre></td></tr></table></figure></blockquote><h3 id="reduce">reduce</h3><blockquote><p>○ reduce</p><p><strong>用Python-reduce代码实现：将列表[1,3,5,7,9]，变成整数13579</strong></p><p>○reduce把一个函数作用在一个序列[x1, x2, x3, …]上</p><p>○这个函数必须接收两个参数</p><p>○reduce把结果继续和序列的下一个元素做累积计算</p><p>○==reduce(f, [x1, x2, x3, x4]) =&gt; f(f(f(x1, x2), x3), x4)==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1：[1,2,3,4] --&gt; 转化成1234</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce<span class="comment"># 注：导入模块</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x,y</span>):<span class="comment"># 注：这个函数接收2个参数</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line"><span class="built_in">print</span>(reduce(func1,a))</span><br><span class="line"><span class="comment">#结果为 1234</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例2：reduce 实现python的int功能</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;输入想要转化的数字：&quot;</span>)</span><br><span class="line">b = &#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;4&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;5&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>:<span class="number">6</span>,<span class="string">&#x27;7&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;8&#x27;</span>:<span class="number">8</span>,<span class="string">&#x27;9&#x27;</span>:<span class="number">9</span>,<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i:b.get(i),a))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">result = reduce(func,c)</span><br><span class="line"><span class="built_in">print</span>(result,<span class="built_in">type</span>(result))</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 示例3：实现阶乘</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入&quot;</span>))</span><br><span class="line">redu =reduce(<span class="keyword">lambda</span> x,y:x*y,<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(redu)</span><br><span class="line"><span class="comment">#结果为 输入:4</span></span><br><span class="line"><span class="comment">#24</span></span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="函数" scheme="https://cpen.top/blog/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>06_Python-CSDN_psutil模块</title>
    <link href="https://cpen.top/blog/posts/314.html"/>
    <id>https://cpen.top/blog/posts/314.html</id>
    <published>2022-09-01T08:30:00.000Z</published>
    <updated>2022-09-01T08:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="06-Python-psutil模块">06_Python-psutil模块</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-介绍">一. 介绍</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">介绍</span><br><span class="line">● process and system utilities</span><br><span class="line">● 能够轻松的实现获取系统运行的进程和系统利用率（CPU、内存、磁盘、网络等）信息，主要应用于系统监控</span><br><span class="line">● 实现了同等命令命令行实现的功能：ps、top、lsof、netstat、ifconfig、who、df、kill、free、nice、ionice、iostat、iotop、uptime、pidof、tty、taskset、pmap等</span><br><span class="line">● 跨平台：linux、windows、OS X、FreeBSD和Sun Solaris等</span><br><span class="line">● 主要功能包含：CPU、磁盘、内存、网络、进程</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="二-安装">二. 安装</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">● 源码安装：git <span class="built_in">clone</span> https://github.com/giampaolo/psutil.git</span><br><span class="line"><span class="built_in">cd</span> psutil</span><br><span class="line">python3 setup.py install</span><br><span class="line">● 先安装相关库：yum install python3-devel,(用yum list |grep python|grep dev  找到包名)， pip3 install psutil</span><br><span class="line">● 导入使用模块： import psutil</span><br><span class="line"></span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum list |grep python |grep dev</span></span><br><span class="line">python36-devel.x86_64                                3.6.8-2.module_el8.1.0+245+c39af44f              @AppStream</span><br><span class="line">[root@cPen_B ~]<span class="comment"># yum install python36-devel.x86_64</span></span><br><span class="line">[root@cPen_B ~]<span class="comment"># pip3 install psutil</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="三-获取系统基本信息">三. 获取系统基本信息</h2><h3 id="CPU">CPU</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、cpu</span><br><span class="line">● psutil.cpu_count(,[logical]):默认返回逻辑CPU的个数,当设置logical的参数为<span class="literal">False</span>时，返回物理CPU的个数</span><br><span class="line">● psutil.cpu_percent(,[percpu],[interval])：返回CPU的利用率,percpu为<span class="literal">True</span>时显示所有物理核心的利用率,interval不为<span class="number">0</span>时,则阻塞时显示interval执行的时间内的平均利用率</span><br><span class="line">● psutil.cpu_times(,[percpu])：以命名元组(namedtuple)的形式返回cpu的时间花费,percpu=<span class="literal">True</span>表示获取每个CPU的时间花费</span><br><span class="line">user：执行用户进程的时间</span><br><span class="line">system：执行内核进程时间</span><br><span class="line">idle：闲置的时间</span><br><span class="line">iowait：等待io操作的时间</span><br><span class="line">irp：硬中断时间</span><br><span class="line">softirq：软中断时间</span><br><span class="line">● psutil.cpu_times_percent(,[percpu])：功能和cpu_times大致相同，返回耗时比例</span><br><span class="line">● psutil.cpu_stats(): 以命名元组的形式返回CPU的统计信息，包括上下文切换，中断，软中断和系统调用次数</span><br><span class="line">ctx_switches:上下文切换次数</span><br><span class="line">interrupts：中断次数</span><br><span class="line">soft_interrupts：软中断次数</span><br><span class="line">syscalls：系统调用次数，linux上始终为<span class="number">0</span></span><br><span class="line">● psutil.cpu_freq(): 返回cpu频率</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：返回CPU个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count()<span class="comment"># 注：返回逻辑CPU个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count(logical=<span class="literal">False</span>)<span class="comment"># 注：返回物理CPU个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># 示例2：CPU使用率 百分比利用率</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_percent()                                                                                                        </span><br><span class="line"><span class="number">0.1</span></span><br><span class="line"><span class="comment"># 示例3：cpu_times</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times()<span class="comment"># 注：花费的时间占用总时间的百分比</span></span><br><span class="line">scputimes(user=<span class="number">105.27</span>, nice=<span class="number">0.1</span>, system=<span class="number">81.87</span>, idle=<span class="number">69229.05</span>, iowait=<span class="number">11.17</span>, irq=<span class="number">0.0</span>, softirq=<span class="number">5.25</span>, steal=<span class="number">0.0</span>, guest=<span class="number">0.0</span>, guest_nice=<span class="number">0.0</span>)</span><br><span class="line"><span class="comment"># 示例4：返回每个核的利用率</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_percent(percpu = <span class="literal">True</span>)</span><br><span class="line">[<span class="number">0.1</span>, <span class="number">0.1</span>]</span><br></pre></td></tr></table></figure></blockquote><h3 id="memory">memory</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、memory</span><br><span class="line">● virtual_memory():以命名元组的形式返回内存使用情况,单位为字节</span><br><span class="line">total:总物理内存</span><br><span class="line">available:可用内存，available ～free + buffers + cached</span><br><span class="line">percent:使用率： percent = (total - available) / total * <span class="number">100</span></span><br><span class="line">used：使用的内存： used  =  total - free - buffers - cache</span><br><span class="line">free：完全没用使用内存</span><br><span class="line">active：最近被访问的内存</span><br><span class="line">inactive：长时间未被访问的内存</span><br><span class="line">buffers：缓存</span><br><span class="line">cached：缓存</span><br><span class="line">slab：内核数据结构缓存的内存</span><br><span class="line">● swap_memory：以命名元组的形式返回swap/memory使用情况，包含swap中页的换入和换出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：virtual_memory</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.virtual_memory()</span><br><span class="line">svmem(total=<span class="number">3953979392</span>, available=<span class="number">3447025664</span>, percent=<span class="number">12.8</span>, used=<span class="number">249577472</span>, free=<span class="number">3045027840</span>, active=<span class="number">350208000</span>, inactive=<span class="number">329723904</span>, buffers=<span class="number">2162688</span>, cached=<span class="number">657211392</span>, shared=<span class="number">12365824</span>, slab=<span class="number">117297152</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="disk">disk</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、disk（linux命令：iostat，df）</span><br><span class="line">● psutil.disk_io_counters([perdisk])：以命名元组的形式返回磁盘io统计信息(汇总的)，包括读、写的次数，读、写的字节数等</span><br><span class="line">● psutil.disk_partitions(）:磁盘挂载分区信息</span><br><span class="line">device：分区</span><br><span class="line">mountpoint：挂载点</span><br><span class="line">fstype：文件系统格式（fat、ext4、 xfs）</span><br><span class="line">opts：挂载参数</span><br><span class="line">● disk_usage：磁盘使用情况，需要传入一个路径参数</span><br><span class="line">&gt;&gt;&gt; psutil.disk_usage(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">sdiskusage(total=<span class="number">250685575168</span>, used=<span class="number">103938019328</span>, free=<span class="number">134242258944</span>, percent=<span class="number">43.6</span>)</span><br><span class="line">● iostat   ：  %util 数值越大越忙碌，到达了io瓶颈（安装包：yum install sysstat）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：磁盘挂载分区信息 disk_partitions</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_partitions()                                                                                                                </span><br><span class="line">[sdiskpart(device=<span class="string">&#x27;/dev/mapper/centos-root&#x27;</span>, mountpoint=<span class="string">&#x27;/&#x27;</span>, fstype=<span class="string">&#x27;xfs&#x27;</span>, opts=<span class="string">&#x27;rw,relatime,attr2,inode64,noquota&#x27;</span>), sdiskpart(device=<span class="string">&#x27;/dev/sda1&#x27;</span>, mountpoint=<span class="string">&#x27;/boot&#x27;</span>, fstype=<span class="string">&#x27;xfs&#x27;</span>, opts=<span class="string">&#x27;rw,relatime,attr2,inode64,noquota&#x27;</span>)]</span><br><span class="line"><span class="comment"># 示例2：磁盘使用情况 disk_usage</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_usage(<span class="string">&quot;/&quot;</span>)<span class="comment"># 注：需要接挂载点</span></span><br><span class="line">sdiskusage(total=<span class="number">18238930944</span>, used=<span class="number">2300264448</span>, free=<span class="number">15938666496</span>, percent=<span class="number">12.6</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Network">Network</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、Network（linux命令：ifconfig、who、uptime，netstat）</span><br><span class="line">● psutil.net_io_counters([pernic])：以命名元组的形式返回当前系统中每块网卡的网络io统计信息，包括收发字节数，收发包的数量、出错的情况和删包情况。当pernic为<span class="literal">True</span>时，则列出所有网卡的统计信息</span><br><span class="line">● psutil.net_connections([kind])：以列表的形式返回每个网络连接的详细信息(namedtuple)</span><br><span class="line">fd：文件描述符</span><br><span class="line">family：地址簇，ipv4（AF_INET），ipv6</span><br><span class="line"><span class="built_in">type</span>：SOCK_STREAM（tcp）、udp</span><br><span class="line">laddr:本地ip地址</span><br><span class="line">raddr</span><br><span class="line">status</span><br><span class="line">pid</span><br><span class="line">● psutil.net_if_addrs()：以字典的形式返回网卡的配置信息，包括IP地址和mac地址、子网掩码和广播地址</span><br><span class="line">● psutil.net_if_stats()：返回网卡的详细信息，包括是否启动、通信类型、传输速度与mtu</span><br><span class="line">mtu：最大传输单元</span><br><span class="line">● psutil.users()：以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端</span><br><span class="line">● psutil.boot_time()：以时间戳的形式返回系统的启动时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例1：psutil.users 以命名元组的方式返回当前登陆用户的信息，包括用户名，登陆时间，终端</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.users()<span class="comment"># 注：w、who命令</span></span><br><span class="line">[suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;tty1&#x27;</span>, host=<span class="string">&#x27;&#x27;</span>, started=<span class="number">1606217600.0</span>, pid=<span class="number">708</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/0&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606361216.0</span>, pid=<span class="number">5921</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/2&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606361216.0</span>, pid=<span class="number">5942</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/6&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606354816.0</span>, pid=<span class="number">5239</span>), suser(name=<span class="string">&#x27;root&#x27;</span>, terminal=<span class="string">&#x27;pts/7&#x27;</span>, host=<span class="string">&#x27;192.168.0.42&#x27;</span>, started=<span class="number">1606357120.0</span>, pid=<span class="number">5312</span>)]</span><br><span class="line"><span class="comment"># 示例2：net_if_addrs</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.net_if_addrs()<span class="comment"># 注：lo本地回环地址 127.0.0.1</span></span><br><span class="line">&#123;<span class="string">&#x27;lo&#x27;</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">&#x27;127.0.0.1&#x27;</span>, netmask=<span class="string">&#x27;255.0.0.0&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">&#x27;::1&#x27;</span>, netmask=<span class="string">&#x27;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">&#x27;00:00:00:00:00:00&#x27;</span>, netmask=<span class="literal">None</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>)], <span class="string">&#x27;ens33&#x27;</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, address=<span class="string">&#x27;192.168.0.21&#x27;</span>, netmask=<span class="string">&#x27;255.255.255.0&#x27;</span>, broadcast=<span class="string">&#x27;192.168.0.255&#x27;</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">10</span>&gt;, address=<span class="string">&#x27;fe80::22d8:5740:d6d7:d1ff%ens33&#x27;</span>, netmask=<span class="string">&#x27;ffff:ffff:ffff:ffff::&#x27;</span>, broadcast=<span class="literal">None</span>, ptp=<span class="literal">None</span>), snicaddr(family=&lt;AddressFamily.AF_PACKET: <span class="number">17</span>&gt;, address=<span class="string">&#x27;00:0c:29:d1:80:fa&#x27;</span>, netmask=<span class="literal">None</span>, broadcast=<span class="string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>, ptp=<span class="literal">None</span>)]&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="进程管理">进程管理</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>、进程管理（linux命令：ps、kill）</span><br><span class="line">● psutil.pids()：以列表的形式返回当前正在运行的进程</span><br><span class="line">● psutil.pid_exists(<span class="number">1</span>)：判断给点定的pid是否存在</span><br><span class="line">● psutil.Process(<span class="number">1</span>)：对进程进行封装，可以使用该类的方法获取进行的详细信息，或者给进程发送信号</span><br><span class="line">● psutil.process_iter()：迭代当前正在运行的进程，返回的是每个进程的Process对象</span><br><span class="line">name：获取进程的名称</span><br><span class="line">cmdline：获取启动进程的命令行参数</span><br><span class="line">create_time：获取进程的创建时间</span><br><span class="line">uids：进程uid信息</span><br><span class="line">num_threads：开启的线程数</span><br><span class="line">exe：进程工作的绝对路径</span><br><span class="line">kill：发送SIGKILL信号结束进程</span><br><span class="line"></span><br><span class="line">示例：process_iter 迭代当前正在运行的进程</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.process_iter()                                                                                                                   </span><br><span class="line">&lt;generator <span class="built_in">object</span> process_iter at <span class="number">0x7f56eb912888</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = psutil.process_iter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(p)</span><br><span class="line">psutil.Process(pid=<span class="number">1</span>, name=<span class="string">&#x27;systemd&#x27;</span>, status=<span class="string">&#x27;sleeping&#x27;</span>, started=<span class="string">&#x27;01:52:52&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="模块" scheme="https://cpen.top/blog/tags/%E6%A8%A1%E5%9D%97/"/>
    
    <category term="psutil" scheme="https://cpen.top/blog/tags/psutil/"/>
    
  </entry>
  
  <entry>
    <title>05_Python-CSDN_排序算法</title>
    <link href="https://cpen.top/blog/posts/49827.html"/>
    <id>https://cpen.top/blog/posts/49827.html</id>
    <published>2022-09-01T08:20:00.000Z</published>
    <updated>2022-09-01T08:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="05-Python-排序算法">05_Python-排序算法</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-顺序查找">一. 顺序查找</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">● 顺序查找</span><br><span class="line">顺序查找：也叫线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span><br><span class="line">时间复杂度：O(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Linear_search</span>(<span class="params">li, val</span>):     <span class="comment"># 注：li列表 ；val待查找的元素</span></span><br><span class="line">    <span class="keyword">for</span> ind, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):       <span class="comment"># 注：因为要返回个下标 所以用 enumerate index和值都需要</span></span><br><span class="line">        <span class="keyword">if</span> v == val:    <span class="comment"># 注：如果v == 我们要找的那个值 那就返回 它的index</span></span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 如果for循环结束后还没有找到 返回None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=7">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=7</a><br><a href="https://www.runoob.com/python3/python-linear-search.html">菜鸟教程 Python线性查找<br>https://www.runoob.com/python3/python-linear-search.html</a></p></blockquote><hr><h2 id="二-二分查找">二. 二分查找</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">● 二分查找</span><br><span class="line">二分查找：又叫折半查找，从有序列表的初始候选区li[<span class="number">0</span>:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。</span><br><span class="line"></span><br><span class="line">时间复杂度：O(logn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val</span>): <span class="comment"># li 列表  val待查找的值</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:    <span class="comment"># 注：循环条件 说明候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span>   <span class="comment"># 注：中间值(下标) 是整除2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:  <span class="comment"># 注：== 找到的情况   每次对比都是对比的li[mid]</span></span><br><span class="line">            <span class="keyword">return</span> mid      <span class="comment"># 注：返回下标 mid</span></span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:  <span class="comment"># 注：代表 待查找的值val在 mid左边</span></span><br><span class="line">            right = mid - <span class="number">1</span>  <span class="comment"># 注：更新候选区了 这种情况就可以继续循环</span></span><br><span class="line">        <span class="keyword">else</span>:               <span class="comment"># 注：第3种情况 li[mid] &lt; val  待查找的值在mid右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span>   <span class="comment"># 注：更新候选区  继续循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>         <span class="comment"># 注：如果找不到的情况 即不满足 left &lt;= right 时</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(li,<span class="number">3</span>))       <span class="comment"># 注：调用二分查找 查3</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=8">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=8</a><br><a href="https://www.runoob.com/python3/python-binary-search.html">菜鸟教程 Python二分查找<br>https://www.runoob.com/python3/python-binary-search.html</a></p></blockquote><hr><h2 id="三-冒泡排序">三. 冒泡排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序：列表每两个相邻的数，如果前面比后面大，则交换这两个数。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort2</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line"></span><br><span class="line">改进：如果冒泡排序中的一趟排序没有发生交换，则说明列表已经有序，可以直接结束算法。</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_1</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span>        <span class="comment"># 在第i趟那加标志位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span> <span class="comment"># 注：如果有交换 把它识成True  交换这里也是1个标志位</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:    <span class="comment"># 注：如果每1趟结束后 exchange没有发生交换 (这个在for里面)</span></span><br><span class="line">            <span class="keyword">return</span>          <span class="comment"># 注：就直接结束掉这个函数</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=12">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=12</a><br><a href="https://www.runoob.com/python3/python-bubble-sort.html">菜鸟教程 Python冒泡排序<br>https://www.runoob.com/python3/python-bubble-sort.html</a></p></blockquote><hr><h2 id="四-选择排序">四. 选择排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">选择排序：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        <span class="keyword">if</span> min_loc != i:</span><br><span class="line">            li[i], li[min_loc] = li[min_loc], li[i]</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=14">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=14</a><br><a href="https://www.runoob.com/python3/python-selection-sort.html">菜鸟教程 Python选择排序<br>https://www.runoob.com/python3/python-selection-sort.html</a></p></blockquote><hr><h2 id="五-插入排序">五. 插入排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入排序：它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</span><br><span class="line">时间复杂度：O(n**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        li[j + <span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=15">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=15</a><br><a href="https://www.runoob.com/python3/python-insertion-sort.html">菜鸟教程 Python插入排序<br>https://www.runoob.com/python3/python-insertion-sort.html</a></p></blockquote><hr><h2 id="六-快速排序">六. 快速排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">快速排序：快速排序使用分治法（Divide <span class="keyword">and</span> conquer）策略来把一个序列（<span class="built_in">list</span>）分为较小和较大的<span class="number">2</span>个子序列，然后递归地排序两个子序列。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序-partition函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp: <span class="comment"># 从右边找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>          <span class="comment"># 往右走一步</span></span><br><span class="line">        li[left] = li[right]    <span class="comment"># 把右边的值写到左边空位上</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]    <span class="comment"># 把左边的值写到右边空位上</span></span><br><span class="line">    li[left] = tmp              <span class="comment"># 把tmp归位</span></span><br><span class="line">    <span class="keyword">return</span> left     <span class="comment"># mid 是 这个函数返回left值的目的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序-框架</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:    <span class="comment"># 至少2个元素</span></span><br><span class="line">        mid = partition(li, left, right)    <span class="comment"># 这个函数返回left值的目的</span></span><br><span class="line">        quick_sort(li, left, mid - <span class="number">1</span>)   <span class="comment"># 左边部分</span></span><br><span class="line">        quick_sort(li, mid + <span class="number">1</span>, right)  <span class="comment"># 右边部分</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br><span class="line">quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li)-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=16">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=16</a><br><a href="https://www.runoob.com/python3/python-quicksort.html">菜鸟教程 Python快速排序<br>https://www.runoob.com/python3/python-quicksort.html</a></p></blockquote><hr><h2 id="七-堆排序">七. 堆排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">堆排序：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):   <span class="comment"># 向下调整函数</span></span><br><span class="line">    <span class="comment"># li：列表</span></span><br><span class="line">    <span class="comment"># low: 堆的根节点位置</span></span><br><span class="line">    <span class="comment"># high: 堆的最后一个元素的位置</span></span><br><span class="line">    i = low <span class="comment"># i最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>   <span class="comment"># j开始是左孩子</span></span><br><span class="line">    tmp = li[low]   <span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:    <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]: <span class="comment"># 如果有孩子有并且比较大</span></span><br><span class="line">            j = j + <span class="number">1</span>   <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j       <span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment"># tmp更大，把tmp放到i的位置上</span></span><br><span class="line">            li[i] = tmp <span class="comment"># 该语句可省 # 把tmp放到某一级领导位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):    <span class="comment"># 建堆函数</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n-<span class="number">1</span>)    <span class="comment"># 这里不是递归</span></span><br><span class="line">    <span class="comment">#建堆完成了</span></span><br><span class="line"><span class="comment">#---------------------这一步 挨个出数的步骤</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>)  <span class="comment"># i-1是新的high</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=22">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=22</a><br><a href="https://www.runoob.com/python3/python-heap-sort.html">菜鸟教程 Python堆排序<br>https://www.runoob.com/python3/python-heap-sort.html</a></p></blockquote><hr><h2 id="八-归并排序">八. 归并排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">归并排序：创建在归并操作上的一种有效的排序算法。</span><br><span class="line">时间复杂度：O(nlogn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i&lt;=mid <span class="keyword">and</span> j&lt;=high:   <span class="comment"># 只要左右两边都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while执行完，肯定有一部分没数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有2个元素，递归</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=30">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=30</a><br><a href="https://www.runoob.com/python3/python-merge-sort.html">菜鸟教程 Python归并排序<br>https://www.runoob.com/python3/python-merge-sort.html</a></p></blockquote><hr><h2 id="九-希尔排序">九. 希尔排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">希尔排序：希尔排序(Shell Sort)是一种分组插入排序算法。</span><br><span class="line">时间复杂度讨论比较复杂，并且和选取的gap序列有关。</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort_gap</span>(<span class="params">li, gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):   <span class="comment"># i 表示摸到的牌的下标</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap <span class="comment"># j指的是手里牌的下标</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j = j - gap</span><br><span class="line">        li[j+gap] = tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=34">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=34</a><br><a href="https://www.runoob.com/python3/python-shellsort.html">菜鸟教程 Python希尔排序<br>https://www.runoob.com/python3/python-shellsort.html</a></p></blockquote><hr><h2 id="十-计数排序">十. 计数排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">计数排序：计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。</span><br><span class="line">时间复杂度：O(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li, max_count=<span class="number">100</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=36">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=36</a><br><a href="https://www.runoob.com/python3/python-counting-sort.html">菜鸟教程 Python计数排序<br>https://www.runoob.com/python3/python-counting-sort.html</a></p></blockquote><hr><h2 id="十一-桶排序">十一. 桶排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">桶排序：首先将元素分在不同的桶中，在对每个桶中的元素排序。</span><br><span class="line">时间复杂度 取决于数据的分布</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li, n=<span class="number">100</span>, max_num=<span class="number">10000</span></span>):</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]    <span class="comment"># 创建桶</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var // (max_num // n), n-<span class="number">1</span>) <span class="comment"># i表示var放到几号桶里</span></span><br><span class="line">        buckets[i].append(var)  <span class="comment"># 把var加到桶里面</span></span><br><span class="line">        <span class="comment"># 保持桶内的顺序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">                buckets[i][j], buckets[i][j-<span class="number">1</span>] = buckets[i][j-<span class="number">1</span>], buckets[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    sorted_li = []</span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        sorted_li.extend(buc)</span><br><span class="line">    <span class="keyword">return</span> sorted_li</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=37">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=37</a><br><a href="https://www.runoob.com/w3cnote/bucket-sort.html">菜鸟教程 桶排序<br>https://www.runoob.com/w3cnote/bucket-sort.html</a></p></blockquote><hr><h2 id="十二-基数排序">十二. 基数排序</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">基数排序：基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。</span><br><span class="line">时间复杂度：O(kn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_buckets</span>(<span class="params">li, base, iteration</span>):</span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(base)]</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> li:</span><br><span class="line">        digit = (number // (base ** iteration)) % base</span><br><span class="line">        buckets[digit].append(number)</span><br><span class="line">    <span class="keyword">return</span> buckets</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buckets_to_list</span>(<span class="params">buckets</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets <span class="keyword">for</span> x <span class="keyword">in</span> bucket]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li, base=<span class="number">10</span></span>):</span><br><span class="line">    maxval = <span class="built_in">max</span>(li)</span><br><span class="line">    it = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> base ** it &lt;= maxval:</span><br><span class="line">        li = buckets_to_list(list_to_buckets(list_to_buckets(li, base, it)))</span><br><span class="line">        it += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=39">b站视频 路飞IT学城<br>https://www.bilibili.com/video/BV1mp4y1D7UP?p=39</a><br><a href="https://www.runoob.com/w3cnote/radix-sort.html">菜鸟教程 基数排序<br>https://www.runoob.com/w3cnote/radix-sort.html</a></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="算法" scheme="https://cpen.top/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>04_Python-CSDN_mail模块</title>
    <link href="https://cpen.top/blog/posts/33188.html"/>
    <id>https://cpen.top/blog/posts/33188.html</id>
    <published>2022-09-01T08:10:00.000Z</published>
    <updated>2022-09-01T08:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="04-Python-mail模块">04_Python-mail模块</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="一-理论">一. 理论</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mail模块作用</span><br><span class="line">1、邮件报警</span><br><span class="line">2、发送报表</span><br><span class="line"></span><br><span class="line">邮件协议</span><br><span class="line">1、smtp (simple mail transfer protocol) 简单邮件传输协议，主要用来发送文件  默认端口 25号</span><br><span class="line">2、pop3  主要用来接收邮件   默认端口 110    客户端的操作不会反馈到服务器端</span><br><span class="line">3、imap  主要用来接收邮件   默认端口 143    客户端的操作会反馈到服务器端</span><br><span class="line"></span><br><span class="line">[参考：菜鸟教程 https://www.runoob.com/python3/python3-smtp.html</span><br><span class="line">](https://www.runoob.com/python3/python3-smtp.html)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="二-步骤">二. 步骤</h2><h3 id="QQ邮箱获取授权码">QQ邮箱获取授权码</h3><blockquote><p>○ QQ邮箱获取授权码</p><p>[参考：获取授权码]</p><p>(<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</a>)</p><p>先进入设置 －&gt; 帐户页面找到入口</p><p>（1）点击“开启”</p><p>（2）验证密保</p><p>（3）获取授权码</p><p><img src="https://image.cpen.top/image/image-20220505035438263.png" alt="image-20220505035438263"></p><p><img src="https://image.cpen.top/image/image-20220505035449933.png" alt="image-20220505035449933"></p><p><img src="https://image.cpen.top/image/image-20220505035503147.png" alt="image-20220505035503147"></p><p>或者开启IMAP/SMTP服务，同理</p><p><img src="https://image.cpen.top/image/image-20220505035521956.png" alt="image-20220505035521956"></p></blockquote><h3 id="代码部分">代码部分</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">○ 代码部分</span><br><span class="line">□ 示例<span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP    <span class="comment"># 导入smtplib模块的SMTP类</span></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 发件人邮箱账号、授权码</span></span><br><span class="line">tolist = [<span class="string">&quot;1533431376@qq.com&quot;</span>]      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line">msg = <span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string">From: 848723505@qq.com@qq.com</span></span><br><span class="line"><span class="string">TO: 1533431376@qq.com</span></span><br><span class="line"><span class="string">Subject: mail module study</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this is cPen test</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">s.sendmail(<span class="string">&quot;848723505@qq.com&quot;</span>,tolist, msg)</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035651514.png" alt="image-20220505035651514"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">□ 示例<span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方smtp服务设置</span></span><br><span class="line">mail_host = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">mail_user = <span class="string">&quot;848723505@qq.com&quot;</span>  <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">mail_pass = <span class="string">&quot;hopo**secret**bbdj&quot;</span>  <span class="comment"># 发件人授权码</span></span><br><span class="line"></span><br><span class="line">recv = <span class="string">&quot;1533431376@qq.com&quot;</span>      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造邮件内容</span></span><br><span class="line"><span class="comment"># 正文内容、正文内容类型、正文内容编码</span></span><br><span class="line">message = MIMEText(<span class="string">&quot;Hello World ~ cPen&quot;</span>, <span class="string">&quot;plain&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># plain是普通的文本</span></span><br><span class="line"></span><br><span class="line">message[<span class="string">&quot;From&quot;</span>] = mail_user <span class="comment"># 把对象像字典一样传参</span></span><br><span class="line">message[<span class="string">&quot;To&quot;</span>] = recv</span><br><span class="line">message[<span class="string">&quot;Subject&quot;</span>] = <span class="string">&quot;I Love Coding&quot;</span></span><br><span class="line"></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 登录</span></span><br><span class="line">s.sendmail(mail_user,recv,message.as_string())    <span class="comment"># 文件内容需要转换成字符型</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035746706.png" alt="image-20220505035746706"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">□ 示例<span class="number">3</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方smtp服务设置</span></span><br><span class="line">mail_host = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">mail_user = <span class="string">&quot;848723505@qq.com&quot;</span>  <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">mail_pass = <span class="string">&quot;hopo**secret**bbdj&quot;</span>  <span class="comment"># 发件人授权码</span></span><br><span class="line"></span><br><span class="line">recv = <span class="string">&quot;1533431376@qq.com&quot;</span>      <span class="comment"># 收件人邮箱账号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把内容识别成网页传送</span></span><br><span class="line">html_msg = <span class="string">&quot; &lt;p&gt;Python mail module test&lt;/p&gt;&lt;p&gt;&lt;a href=&#x27;https://www.baidu.com&#x27;&gt;点击进入百度&lt;/a&gt;&lt;/p&gt;&quot;</span></span><br><span class="line">message = MIMEText(html_msg,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">message[<span class="string">&quot;From&quot;</span>] = mail_user <span class="comment"># 把对象像字典一样传参</span></span><br><span class="line">message[<span class="string">&quot;To&quot;</span>] = recv</span><br><span class="line">message[<span class="string">&quot;Subject&quot;</span>] = <span class="string">&quot;cPen mail&quot;</span></span><br><span class="line"></span><br><span class="line">s = SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>)    <span class="comment"># 使用qq邮箱去发送</span></span><br><span class="line">s.login(<span class="string">&quot;848723505@qq.com&quot;</span>,<span class="string">&quot;hopo**secret**bbdj&quot;</span>)    <span class="comment"># 登录</span></span><br><span class="line">s.sendmail(mail_user,recv,message.as_string())    <span class="comment"># 文件内容转换成字符型</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505035846092.png" alt="image-20220505035846092"></p></blockquote><h3 id="Foxmail登录">Foxmail登录</h3><blockquote><p>○ Foxmail登录</p><p>[下载Foxmail客户端](<a href="https://www.foxmail.com/">https://www.foxmail.com/</a>)</p><p>先进入设置 －&gt; 新建账号，填入E-mail地址和授权码</p><p>□ 使用POP3协议登录</p><p><img src="https://image.cpen.top/image/image-20220505040116717.png" alt="image-20220505040116717"></p><p>□ 使用IMAP协议登录</p><p><img src="https://image.cpen.top/image/image-20220505040144841.png" alt="image-20220505040144841"></p><p>效果图</p><p><img src="https://image.cpen.top/image/image-20220505040202531.png" alt="image-20220505040202531"></p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="模块" scheme="https://cpen.top/blog/tags/%E6%A8%A1%E5%9D%97/"/>
    
    <category term="mail" scheme="https://cpen.top/blog/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>03_Python-CSDN_数据类型2</title>
    <link href="https://cpen.top/blog/posts/37069.html"/>
    <id>https://cpen.top/blog/posts/37069.html</id>
    <published>2022-09-01T08:00:00.000Z</published>
    <updated>2022-09-01T08:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="03-Python-数据类型2">03_Python-数据类型2</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><p>==容器类型==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4种内置数据结构（容器类型）</span><br><span class="line">列表：list=&gt;[val1,val2,val3,val4]</span><br><span class="line">元组：tuple=&gt;(val1,val2,val3,val4)</span><br><span class="line">字典：dict=&gt;&#123;key1:val1,key2:val2&#125;</span><br><span class="line">集合：set=&gt;&#123;key1,key2,key3,key4&#125;</span><br></pre></td></tr></table></figure><h2 id="一-列表（list）">一. 列表（list）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">列表是处理一组有序项目的数据结构</span><br><span class="line">列表是python中最具灵活性的有序集合对象类型</span><br><span class="line">列表可以包含任何类型的对象：字符串、数字甚至其他列表</span><br><span class="line">列表是可变的数据类型，即这种类型的值是可以被修改的</span><br><span class="line">Example:表示一个购物清单</span><br><span class="line">goods=[&#x27;牛奶&#x27;、&#x27;运动鞋&#x27;、&#x27;咖啡&#x27;、&#x27;手机&#x27;、&#x27;羊肉&#x27;、&#x27;葡萄&#x27;、&#x27;桔子&#x27;]</span><br><span class="line"></span><br><span class="line">列表通过方括号中用逗号分割的项目定义</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(lst)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = <span class="built_in">list</span>()<span class="comment"># 注：工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(lst2)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="comment"># 列表可装入python的任何对象：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst3 = <span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment"># 注：字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst3 </span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="number">2.5</span>,<span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="number">2.5</span>,<span class="literal">True</span>,lst3]<span class="comment"># 注：其他列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">2.5</span>, <span class="literal">True</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br></pre></td></tr></table></figure><h3 id="列表基本操作">列表基本操作</h3><h4 id="索引">索引</h4><p>​通过下标访问列表中的元素，下标从0开始计数，可取出一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst += [<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span><span class="comment"># 注：内存地址不变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span><span class="comment"># 注：改变列表里的元素值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(lst)</span><br><span class="line"><span class="number">140078683813384</span></span><br><span class="line"><span class="comment"># 下标不能越界（Index Error:list index out of range）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">4</span>]<span class="comment"># 注：下标越界 会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h4 id="切片">切片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切片是通过下标访问列表中的元素，切片可以取出一个子列表</span><br><span class="line">起止区间：[ start,end )</span><br><span class="line">step:默认=&gt;1</span><br><span class="line">start:默认=&gt;step为正时，start为0；step为负时,start为-1</span><br><span class="line">end:默认=&gt;step为正时，end为列表结尾；step为负时,end为列表开始</span><br><span class="line">注意：三个值都为选填项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：正切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">4</span>]<span class="comment"># 注：切片，前4个</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>[<span class="number">0</span>:<span class="number">4</span>]<span class="comment"># 注：切片，前4个</span></span><br><span class="line"><span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]<span class="comment"># 注：效果一样</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：负切片，步长为-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:<span class="number">3</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6， 3指向4，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:-<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6，-4指向3，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:-<span class="number">44</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6，-44越界，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>:<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-1指向6,  4指向5，-1从右往左</span></span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">3</span>:<span class="number">4</span>:-<span class="number">1</span>]<span class="comment"># 注：-3指向4， 4指向5，4向左取不到5</span></span><br><span class="line">[]<span class="comment"># 注：为空  起始位置有误时，切出来会是空(不会报错)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">切片对象(slice函数)</span><br><span class="line">slice函数的用途：生成一个slice对象，相当于可以给要切的内容取个名字。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>)<span class="comment"># 注：引用时需要传参进去</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;ee&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[s1]<span class="comment"># 注：切片 前3个</span></span><br><span class="line">[<span class="string">&#x27;xx&#x27;</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="增加">增加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">增加列表元素的方式</span><br><span class="line">append:在末尾，作为整体追加，类型不限</span><br><span class="line">insert:在index位置插入元素</span><br><span class="line">extend:扩展列表</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># append</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="number">123</span>, <span class="number">0.1111</span>, <span class="string">&quot;cali&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">&quot;test&quot;</span>)<span class="comment"># 注：追加字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="number">123</span>, <span class="number">0.1111</span>, <span class="string">&#x27;cali&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append(lst2)<span class="comment"># 注：追加的类型是数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]<span class="comment"># 注：追加的类型是数组</span></span><br><span class="line"><span class="comment"># insert</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.insert(<span class="number">1</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment"># 注：在第2个元素前插入数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment"># extend</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(<span class="built_in">str</span>)<span class="comment"># 注：扩展字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extend与+</span><br><span class="line">注意：只限可转为list的类型(str,list,tuple)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(a2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + [<span class="string">&quot;5&quot;</span>]<span class="comment"># 注：+ 法只能list 和 list 相加</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]<span class="comment"># 注：+ 法 运行结束后 数组a没有变化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a + [<span class="string">&quot;5&quot;</span>]<span class="comment"># 注：赋值给数组b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b<span class="comment"># 注：可以通过 赋值给数组b的方法来保存 变化</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273972677768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += [<span class="string">&quot;6&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273972677768</span><span class="comment"># 注：a += [&quot;6&quot;] 内存地址不变   对象不变，内容改变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a + [<span class="string">&quot;7&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140273837551816</span><span class="comment"># 注：a = a + [&quot;7&quot;]内存地址改变</span></span><br></pre></td></tr></table></figure><h4 id="删除">删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除列表元素的方式</span><br><span class="line">pop：删除元素，默认最后一个（指定index删除）</span><br><span class="line">remove：删除指定的元素（要删除的数据不存在时，会出错）</span><br><span class="line">del：根据下标删除</span><br><span class="line">del是python的一个关键字，用于删除变量(的引用)</span><br><span class="line">clear：清空列表</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()<span class="comment"># 注：默认删除最后1个</span></span><br><span class="line"><span class="string">&#x27;7&#x27;</span><span class="comment"># 注：返回值，删除的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">2</span>)<span class="comment"># 注：指定索引2 删除第3个元素</span></span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;xx&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">&quot;xx&quot;</span>)<span class="comment"># 注：删除指定元素，只删除第1个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">&quot;zz&quot;</span>)<span class="comment"># 注：要删除的数据不存在时，会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;zz&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">3</span>]<span class="comment"># 注：删除索引3  第4个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>:<span class="number">2</span>]<span class="comment"># 注：切片删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c<span class="comment"># 注：del删除变量的引用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;c&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="string">&#x27;yy&#x27;</span>, <span class="string">&#x27;zz&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]<span class="comment"># 注：clear清空</span></span><br></pre></td></tr></table></figure><h4 id="修改">修改</h4><p>修改元素主要是利用下标和切片来修改或增加、删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 示例</span><br><span class="line">&gt;&gt;&gt; a = [1,2,3,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a[2] = &quot;x&quot;# 注：修改元素</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; a[1:1]# 注：[1,1)</span><br><span class="line">[]# 注：为空</span><br><span class="line">&gt;&gt;&gt; a[1:1] = &quot;abc&quot;# 注：在起始位置 索引为1 处之前 增加列表 str类型转换为列表</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 2, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">&gt;&gt;&gt; b[2:2] = [&quot;x&quot;,&quot;y&quot;]# 注：索引为2处之前  增加列表</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[2:4] = [&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]# 注：索引2、3 的值 替换</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[1:5] = &quot;12&quot;# 注：切出来后，再转换为列表。str类型转换为列表</span><br><span class="line">&gt;&gt;&gt; b# 注：索引1、2、3、4 的值 替换 为 ‘1’‘2’</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; b[5:-3]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; b[3:-3]# 注：获取不到</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; b[3:-3] = &quot;xy&quot;# 注：这个位置开始(start位置开始)，替换成其他的list</span><br><span class="line">&gt;&gt;&gt; b# 注：看 找出的元素是否为空</span><br><span class="line">[&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; c = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;1&quot;]</span><br><span class="line">&gt;&gt;&gt; c[1:4] = &quot;hello&quot;# 注：找出b c d  把bcd 替换成h e l l o</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br><span class="line">&gt;&gt;&gt; c = [&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br><span class="line">&gt;&gt;&gt; c[5:3]# 注：获取不到</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; c[5:3] = [&quot;x&quot;,&quot;y&quot;]# 注：c[5:3]为空，在 o (下标5)处插入x y</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&#x27;a&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;o&#x27;, &#x27;1&#x27;]</span><br></pre></td></tr></table></figure><h4 id="反转">反转</h4><p>​反转列表-reverse 或 切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 1.负切片 实现反转，输出的值反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]<span class="comment"># 注：负切片</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身的值 没有反转</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 2.reverse 字符串的反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身的值 反转</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="排序">排序</h4><p>​列表排序-sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]<span class="comment"># 注：排序后  a本身的值发生改变</span></span><br><span class="line"><span class="comment"># 反向排序</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse=<span class="literal">True</span>)<span class="comment"># 注：反向排序，升序变成降序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]<span class="comment"># 注：从大到小排序</span></span><br><span class="line"><span class="comment"># 不支持int和str混合 的排序：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&lt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="comment"># 按 编码排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="统计">统计</h4><p>​len、count、index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># len 总长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment"># count统计元素出现的次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;序&#x27;</span>, <span class="string">&#x27;排&#x27;</span>, <span class="string">&#x27;文&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># index返回元素所在的索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;z&quot;</span>)<span class="comment"># 注：index通过元素找索引，如果没有会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="string">&#x27;z&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><h4 id="遍历">遍历</h4><p>​遍历：依次取出对象中的每一项数据</p><p>​list是一个可迭代对象（iterable），可以直接用for遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.for i in a:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;item is ---&gt;<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">item <span class="keyword">is</span> ---&gt;x</span><br><span class="line">item <span class="keyword">is</span> ---&gt;y</span><br><span class="line">item <span class="keyword">is</span> ---&gt;x</span><br><span class="line">item <span class="keyword">is</span> ---&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.enumerate()函数  </span></span><br><span class="line"><span class="comment"># 特点：会返回元组，元组里包含每一个下标和值</span></span><br><span class="line"><span class="comment"># 注：用1个i去遍历，获取的是元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;item is ---&gt;<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">2</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">item <span class="keyword">is</span> ---&gt;(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 用2个临时变量，获取enumerate(a)元组的返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>--&gt;<span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span>--&gt;x</span><br><span class="line"><span class="number">1</span>--&gt;y</span><br><span class="line"><span class="number">2</span>--&gt;x</span><br><span class="line"><span class="number">3</span>--&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="判断成员关系">判断成员关系</h4><p>​判断列表中是否有某个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s, <span class="string">&#x27;在&#x27;</span> <span class="keyword">if</span> s <span class="keyword">in</span> lst <span class="keyword">else</span> <span class="string">&#x27;不在&#x27;</span>,<span class="string">&#x27;列表里&#x27;</span>)</span><br><span class="line">a 在 列表里</span><br></pre></td></tr></table></figure><h4 id="类型转换">类型转换</h4><p>​字符串(str)转列表(list)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;abc 123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="二-元组（tuple）">二. 元组（tuple）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元组是处理一组有序项目的数据结构</span><br><span class="line">元组和字符串一样是不可变的,即你不能修改元组</span><br><span class="line">元组可以包含任何类型的对象：字符串、数字甚至其他列表</span><br><span class="line">适应场景：性别选择，数据库的查询结果</span><br><span class="line">Example:表示一个购物清单</span><br><span class="line">goods=(&#x27;牛奶&#x27;、&#x27;运动鞋&#x27;、&#x27;咖啡&#x27;、&#x27;手机&#x27;、&#x27;羊肉&#x27;、&#x27;葡萄&#x27;、&#x27;桔子&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 元组通过圆括号中用逗号分割的项目定义</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>)<span class="comment"># 注：括号还可以代表集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="comment"># 元组中只有一个元素的时候，需要在元素后面加个，区分这个括号是表示结合还是表示元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,)<span class="comment"># 注：元组中只有1个元素时，需要加逗号(,)表示元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">tuple</span>()<span class="comment"># 注：定义空元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">()</span><br><span class="line"><span class="comment"># 元组可装入python的任何对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">1.2</span>, <span class="literal">True</span>, &lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;)</span><br></pre></td></tr></table></figure><h3 id="元组基本操作">元组基本操作</h3><h4 id="索引-2">索引</h4><p>​通过下标访问列表中的元素，下标从0开始计数，可取出一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 下标不能越界，越界会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">tuple</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h4 id="切片-2">切片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切片是通过下标访问元组中的元素，切片可以取出一个子元组</span><br><span class="line">起止区间：[start,end)</span><br><span class="line">step:默认=&gt;1</span><br><span class="line">start:默认=&gt;step为正时，start为0；step为负时,start为-1</span><br><span class="line">end:默认=&gt;step为正时，end为列表结尾；step为负时,end为列表开始</span><br><span class="line">注意：三个值都为选填项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="literal">True</span>,<span class="built_in">print</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">1.2</span>)</span><br></pre></td></tr></table></figure><h4 id="不可变性">不可变性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">1.2</span>, <span class="literal">True</span>, &lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">1</span><span class="comment"># 注：报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu1 = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu2 = (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu3 = tu1 + tu2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu3</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="统计-2">统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="遍历-2">遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>)<span class="comment"># 注：返回值 是 元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>---<span class="subst">&#123;j&#125;</span>&quot;</span>)<span class="comment"># 注：用两个参数 来接收 返回值</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span>---<span class="number">1</span></span><br><span class="line"><span class="number">1</span>---<span class="number">2</span></span><br><span class="line"><span class="number">2</span>---<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="成员关系">成员关系</h4><p>​成员关系： in , not in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;a&quot;</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;d&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="三-字典（dict）">三. 字典（dict）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字典是Python中一个键值映射的数据结构</span><br><span class="line">字典是无序的</span><br><span class="line">字典是可变对象</span><br><span class="line">key必须是唯一的,so天生去重</span><br><span class="line">example:</span><br><span class="line">singer=&#123;key1:value,key2:value&#125;</span><br><span class="line">singer=&#123;&quot;李圣杰&quot;:&#x27;痴心绝对&#x27;,&#x27;张韶涵&#x27;:&#x27;阿刁&#x27;,&#x27;汪峰&#x27;:&#x27;普通迪斯高&#x27;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字典的定义</span><br><span class="line">字典的key必须是可hash对象</span><br><span class="line">python中所有字符串、数字、元组、布尔值、None都是可hash对象</span><br><span class="line">字典的value可以是任何值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;<span class="comment"># 注：定义空字典</span></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">dict</span>()<span class="comment"># 注：定义空字典，工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(c)<span class="comment"># 注：列表转换成字典  工厂函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;root&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(e)<span class="comment"># 注：转换的对象要有 键值映射 的格式</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: cannot convert dictionary update sequence element <span class="comment">#0 to a sequence</span></span><br></pre></td></tr></table></figure><h3 id="字典基本操作">字典基本操作</h3><h4 id="取值">取值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dicts[key]=&gt;当key不存在时，会引了KeyError错误</span><br><span class="line">用法2：dicts.get(key,default)=&gt;当key不存在时，返回default值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">4</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>]=<span class="number">3</span><span class="comment"># 注：修改key=”a”的 value 值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;c&#x27;</span>]=<span class="number">4</span><span class="comment"># 注：增加键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;c&#x27;</span>]<span class="comment"># 注：取值</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;d&#x27;</span>]<span class="comment"># 注：key不存在，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="comment"># 推荐使用get</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">&#x27;d&#x27;</span>)<span class="comment"># 注：不报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.get(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line"><span class="literal">None</span><span class="comment"># 注：默认值没有设置</span></span><br></pre></td></tr></table></figure><h4 id="增加-修改">增加/修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：dicts[key]=value</span><br><span class="line">当key不存在时，表示增加一个键值对</span><br><span class="line">当key存在时，表示修改对应的value值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：修改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 示例：新增</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;d&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">False</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-2">删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dicts.pop(key)</span><br><span class="line">用法2：dicts.popitem()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：dicts.pop(key)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;d&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="string">&#x27;a&#x27;</span>)<span class="comment"># 注：删除 key=‘a’ 的元素</span></span><br><span class="line"><span class="number">5</span><span class="comment"># 注：pop有返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.pop(<span class="string">&#x27;b&#x27;</span>)<span class="comment"># 注：获取返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"><span class="comment"># 示例：dicts.popitem()</span></span><br><span class="line"><span class="comment"># python3里面删除的是最后一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>,<span class="string">&quot;z&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="合并">合并</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：dict1.update(dict2)=&gt;将dict2合并到dict1</span><br><span class="line">用法2：dict(dict1,**dict2)=&gt;将dict1与dict2合并生成一个新字典</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：dict1.update(dict2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&quot;q&quot;</span>:<span class="number">2</span>,<span class="string">&quot;w&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(b)<span class="comment"># 注：a自带的属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 示例：dict(dict1, **dict2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&quot;q&quot;</span>:<span class="number">2</span>,<span class="string">&quot;w&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(a,**b)<span class="comment"># 注：工厂函数，返回一个字典  a和b的合并</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a<span class="comment"># 注：a本身没有改变</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>()</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">dict</span>(a,**b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="成员关系-2">成员关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line">item in dicts</span><br><span class="line">item not in dicts</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>,<span class="string">&quot;z&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> a<span class="comment"># 注：in  默认 对比的是key值</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> a.values()<span class="comment"># 注：a.values()对比的是value值</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="遍历-3">遍历</h4><p>​默认遍历的是 key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历key值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">x              <span class="comment"># 注：遍历key值</span></span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历value值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.values():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span>               <span class="comment"># 注：遍历value值</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 既想获得key  也想获得value</span></span><br><span class="line"><span class="comment"># items返回的是元组</span></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> a.items():<span class="comment"># 注：2个参数获取返回值key,value</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;key is <span class="subst">&#123;i&#125;</span>, value is <span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">key <span class="keyword">is</span> x, value <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">key <span class="keyword">is</span> y, value <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">key <span class="keyword">is</span> z, value <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 方式3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">f&quot;key is <span class="subst">&#123;i[<span class="number">0</span>]&#125;</span>, value is <span class="subst">&#123;i[<span class="number">1</span>]&#125;</span>&quot;</span>)<span class="comment"># 注：索引获取参数</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">key <span class="keyword">is</span> x, value <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">key <span class="keyword">is</span> y, value <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">key <span class="keyword">is</span> z, value <span class="keyword">is</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="四-集合（set）">四. 集合（set）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">集合是一个无序的，不重复的数据组合</span><br><span class="line">集合是一个只含有key的字典</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">集合的作用</span><br><span class="line">去重：把一个列表变成集合，就自动去重了</span><br><span class="line">关系测试：测试两组数据之前的交集、差集、并集等关系</span><br><span class="line">example:</span><br><span class="line">singer=&#123;&quot;李圣杰&quot;,&#x27;张韶涵&#x27;,&#x27;汪峰&#x27;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集合的定义</span><br><span class="line">集合通过花括号中，而各个元素用逗号分割</span><br><span class="line">集合元素必须是可hash对象，跟字典一样</span><br><span class="line">set和dict的唯一区别仅在于没有存储对应的value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 定义空集合（2种方式）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment"># 注：第1种方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>()<span class="comment"># 注：第2种方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="集合基本操作">集合基本操作</h3><h4 id="添加">添加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法：s.add(item)=&gt;添加一项</span><br><span class="line">用法：s.update(someitems)=&gt;添加多项</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(<span class="string">&quot;str&quot;</span>)<span class="comment"># 注：str被扩展进来，是一个一个被扩展进来的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(&#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># 注：字典  扩展的是 key值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="移除">移除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用法1：s.remove(item)=&gt;移除一项(item不存在会出错KeyError)</span><br><span class="line">用法2：s.discard(item)=&gt;移除一项(item不存在则什么也不做)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;p&#x27;</span>)<span class="comment"># 注：“p”不存在，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;p&#x27;</span></span><br><span class="line"><span class="comment"># discard</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.discard(<span class="string">&#x27;o&#x27;</span>)<span class="comment"># 注：不存在 不报错  什么也不做</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.discard(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="集合操作">集合操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">并集：t和s的并集,返回一个新的set包含s和t中的每一个元素</span><br><span class="line">交集:t和s的交集,返回一个新的set包含s和t中的公共元素</span><br><span class="line">差集:返回一个新的set包含s中有但是t中没有的元素</span><br><span class="line">对称差集:返回一个新的set包含s和t中不重复的元素（在t或s中，但不会同时出现在二者中）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;h&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.union(s2)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.intersection(s2)</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 - s2</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 注：s1里面有的,s2里面没有的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 - s1</span><br><span class="line">&#123;<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 ^ s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 注：除了交集 的部分</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="数据类型" scheme="https://cpen.top/blog/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>02_Python-CSDN_数据类型1</title>
    <link href="https://cpen.top/blog/posts/4979.html"/>
    <id>https://cpen.top/blog/posts/4979.html</id>
    <published>2022-09-01T07:50:00.000Z</published>
    <updated>2022-09-01T07:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：以前在 <a href="https://blog.csdn.net/cpen_web/category_11089219.html"><code>CSDN 新星计划</code></a> 上写的文章，迁移至此。<span id="more"></span></p><h1 id="02-Python-数据类型1">02_Python-数据类型1</h1><p><a href="https://blog.csdn.net/cpen_web">博客🔗：https://blog.csdn.net/cpen_web</a></p><hr><h2 id="基本类型">基本类型</h2><h3 id="Python数字">Python数字</h3><p>在Python中有3种类型的数——整数、浮点数和复数</p><table><thead><tr><th>数字类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>整数</td><td>-2, 12389 <br/> 999999L, ∞ <br/> 0b1110, 0xabf, 0o126</td><td>python2中区分整型、长整型，长整型的整数可以 无穷大 <br/> python3中统称为整型 <br/> 整型的二进制，十六进制，八进制表示法</td></tr><tr><td>浮点数</td><td>-3.23, -52.3E-4</td><td>在 python 中可以用科学计数法表示浮点数</td></tr><tr><td>复数</td><td>-5+4j,2.3-4.6j</td><td>其中-5,4为实数，j为虚数</td></tr></tbody></table><ol><li><p>==int==</p><p>python3 中只有 int（可存超长数据）</p><table><thead><tr><th>整型进制表示法</th><th></th><th></th></tr></thead><tbody><tr><td>进制</td><td>表示方法</td><td>示例</td></tr><tr><td>二进制</td><td>以0b开头，只能包含0、1，逢2进1</td><td>0b11，0b12（错误的表示）</td></tr><tr><td>八进制</td><td>以0o开头，能包含0-7，逢8进1</td><td>0o11</td></tr><tr><td>十六进制</td><td>以0x开头，能包含0-F，逢16进1</td><td>0x11</td></tr><tr><td>十进制</td><td>直接由数字0-9组成，逢10进1</td><td>11</td></tr></tbody></table><p>整型进制操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进制转换-bin:任意进制转2进制,接收一个int,返回一个str</span><br><span class="line">进制转换-oct:任意进制转8进制,接收一个int,返回一个str</span><br><span class="line">进制转换-hex:任意进制转16进制,接收一个int,返回一个str</span><br><span class="line">进制转换-int:任意进制转10进制,接收一个int/str,返回一个int</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">10</span>)<span class="comment"># 10进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0o71</span>)<span class="comment"># 8进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b111001&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">0x11</span>)<span class="comment"># 16进制转2进制</span></span><br><span class="line"><span class="string">&#x27;0b10001&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="number">10</span><span class="comment"># str 转换成 int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;0o11&quot;</span>,base=<span class="number">8</span>)<span class="comment"># 8进制的字符串，要指定一下</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">0o11</span>)<span class="comment"># 8进制整型 直接转换</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></li><li><p>==float==</p><p>float(浮点型)：浮点数即带有小数点的数字</p><p>​float由整数位，小数点，小数位组成，也可以用科学计数法表示，例如-3.23，-52.3E-4，6.23E12</p><p>​float是不精确的</p><p><strong>decimal模块</strong></p><p>​Decimal类型数据是精确的小数，可以传递给Decimal整型或者字符串参数</p><p>官方文档</p><p>​float<a href="https://docs.python.org/3/library/functions.html#float">https://docs.python.org/3/library/functions.html#float</a></p><p>​decimal<a href="https://docs.python.org/3/library/decimal.html?highlight=decimal">https://docs.python.org/3/library/decimal.html?highlight=decimal</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：浮点型数据float是不精确的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.7000000000000001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = i - <span class="number">0.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i</span><br><span class="line"><span class="number">0.6000000000000001</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：Decimal类型数据是精确的小数，可以传递给Decimal整型或者字符串参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> getcontext, Decimal, Context</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal.from_float(<span class="number">12.222</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;12.2219999999999995310417943983338773250579833984375&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal(<span class="number">0.9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;0.90000000000000002220446049250313080847263336181640625&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec = Decimal(<span class="string">&quot;3.14&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydec</span><br><span class="line">Decimal(<span class="string">&#x27;3.14&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>==complex==</p><p>复数complex：复数就是实数和虚数的统称</p><p>在数学中的表示：复数的基本形式是a+bi,其中a,b是实数,a称为实部,bi称为虚部,i是虚数单位</p><p>complex的组成：复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span> + <span class="number">4j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.real</span><br><span class="line"><span class="number">5.0</span><span class="comment"># 存放的是浮点型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.imag</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Python字符串">Python字符串</h3><p>字符串：字符串是字符的序列</p><p>表示方法：单引号（‘）；双引号（“）；三引号（’''或”””）；原样输出</p><table><thead><tr><th>符号</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>单引(')</td><td>可引用包含双引号的字符串</td><td>‘say“hello”’</td></tr><tr><td>双引号(“)</td><td>可引用包含单引号的字符串</td><td>“What’syourname?”</td></tr><tr><td>三号引(‘’'或”””)</td><td>可引用一个多行的字符串，在三引号中可自由使用单引号和双引号</td><td>‘’‘<br/>这是多行字符<br/>里面可包含单引号’和双引号”<br/>’‘’</td></tr><tr><td>特殊标记®</td><td>不使得转义字符，将字符原样输出</td><td>r”hello\tworld!”</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>t</span></span><br><span class="line"><span class="string"><span class="meta">... </span>e</span></span><br><span class="line"><span class="string"><span class="meta">... </span>s</span></span><br><span class="line"><span class="string"><span class="meta">... </span>t&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;\nt\ne\ns\nt&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">t</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">t</span><br><span class="line"><span class="comment"># print(a)按照规定的格式打印输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&quot;t1\nt2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">&#x27;t1\nt2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">r&quot;t1\nt2&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">t1\nt2</span><br></pre></td></tr></table></figure><ul><li><p>==转义字符==</p><p>​转义字符是一种特殊的字符常量。转义字符以反斜线&quot;&quot;开头，后跟一个或几个字符。转义字符具有特定的含义，不同于字符原有的意义，故称“转义”字符。</p></li></ul><table><thead><tr><th>转义字符</th><th>描述</th><th>转义字符</th><th>描述</th><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\(在行尾时)</td><td>续行符</td><td>\n</td><td>换行</td><td>\oyy</td><td>八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\\</td><td>反斜杠符号</td><td>\v</td><td>纵向制表符</td><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\’</td><td>单引号</td><td>\t</td><td>横向制表符</td><td>\other</td><td>其它的字符以普通格式输出</td></tr><tr><td>\&quot;</td><td>双引号</td><td>\r</td><td>回车</td><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\a</td><td>响铃</td><td>\f</td><td>换页</td><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td><td></td><td></td><td></td><td></td></tr></tbody></table><ol><li><p>==字符串取值==</p><p>​下标取值法（注意：下标从0开始）</p><p>​切片取值法</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;t&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">2</span>]<span class="comment"># 取下标为0~2的数据。包括0，不包括2</span></span><br><span class="line"><span class="string">&#x27;te&#x27;</span><span class="comment"># 前面包括，后面不包括</span></span><br></pre></td></tr></table></figure><p>字符串的不可变的序列</p><p>一旦创造了一个字符串，就不能再改变它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140585442705648</span></span><br></pre></td></tr></table></figure><p>级连字符串</p><p>如果把两个字符串相邻放着，它们会被python自动级连</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info = <span class="string">&quot;chen&quot;</span><span class="string">&quot;peng&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line"><span class="string">&#x27;chenpeng&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>==字符串常用方法==<ol><li>==字符串常用方法——判断系列（True/False）==</li></ol></li></ol><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>str.isdigit()</td><td>字符串中是否只包含数字</td></tr><tr><td>str.isnumeric()</td><td>字符串中是否只包含数字（包括中文一到九等）</td></tr><tr><td>str.isalnum()</td><td>字符串中是否只包含字母或数字</td></tr><tr><td>str.istitle()</td><td>字符串中是否每个单词首字母大写，其他字母小写</td></tr><tr><td>str.isalpha()</td><td>字符串中是否只包含字母（汉字会算作字母）</td></tr><tr><td>str.isupper()</td><td>字符串中是否全为大写</td></tr><tr><td>str.isidentifier()</td><td>字符串是否为合法标识符</td></tr><tr><td>str.isprintable()</td><td>字符串是否为可打印字符</td></tr><tr><td>str.islower()</td><td>字符串中是否全为小写</td></tr><tr><td>str.isspace()</td><td>字符串中是否只包含空格（tab也算空格）</td></tr><tr><td>str.startswith(prefix[,start[,end]])</td><td>字符串是否以某字符串开始，可以通过start和stop参数设置搜索范围</td></tr><tr><td>str.endswith(suffix[,start[,end]])</td><td>字符串是否以某个字符串结束，可以通过start和stop参数设置搜索范围</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">my_str = <span class="string">&quot;This Is TEST!&quot;</span></span><br><span class="line">my_title = <span class="string">&quot;This is My Title&quot;</span></span><br><span class="line">my_num = <span class="string">&quot;123&quot;</span></span><br><span class="line">my_num2 = <span class="string">&quot;一二三四&quot;</span></span><br><span class="line">my_str2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">my_str3 = <span class="string">&quot;hello123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断系列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num.isdigit())     <span class="comment"># 字符串中是否只包含数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num.isnumeric())   <span class="comment"># 字符串中是否只包含数字（包括中文一到九等）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num2.isdigit())    <span class="comment"># 只能判断阿拉伯数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断数字&quot;</span>, my_num2.isnumeric())  <span class="comment"># 可以判断中文数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字母：&quot;</span>, my_str.isalpha())      <span class="comment"># 有空格/“!”会报错 # 判断字母（汉字会算作字母）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字母数字：&quot;</span>, my_str3.isalnum()) <span class="comment"># 有空格会报错 # 判断字母数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字符串是否以This开始&quot;</span>, my_title.startswith(<span class="string">&quot;This&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断字符串是否以This结束&quot;</span>, my_title.endswith(<span class="string">&quot;This&quot;</span>))</span><br></pre></td></tr></table></figure><p>​</p><p>​2. ==字符串常用方法——查找统计类==</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>len(string)</td><td>统计字符串长度</td></tr><tr><td>str.index(sub[,start[,end]])</td><td>显示substring在字符串中第一次出现的下标位置，没有会报错</td></tr><tr><td>str.find(sub[,start[,end]])</td><td>查找substring,找到返回其起始位置，找不到返回-1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 查找统计类</span></span><br><span class="line">my_str = <span class="string">&quot;This Is TEST!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;长度：&quot;</span>, <span class="built_in">len</span>(my_str))<span class="comment"># 空格、！占长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 第一次出现的位置&quot;</span>, my_str.index(<span class="string">&quot;i&quot;</span>))<span class="comment"># 字符串“i”第一次出现的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 第一次出现的位置&quot;</span>, my_str.find(<span class="string">&quot;i&quot;</span>))<span class="comment"># 字符串“i”第一次出现的位置，找不到返回-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i 出现的次数&quot;</span>, my_str.count(<span class="string">&quot;i&quot;</span>))</span><br></pre></td></tr></table></figure><p>​3. ==字符串常用方法——字符串转换类（返回一个新对象）==</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>str.upper()</td><td>将字符串转换为大写</td></tr><tr><td>str.lower()</td><td>将字符串转换为小写</td></tr><tr><td>str.title()</td><td>将字符串中的单词首字母大写，其他字母小写</td></tr><tr><td>str.split(‘sep’)</td><td>指定’sep’作为分隔符将字符串切割成列表，分隔符可以是任意字符（默认是空格）</td></tr><tr><td>‘str’.join(list)</td><td>将列表用str拼接成一个大字符串</td></tr><tr><td>str.strip([string])</td><td>去除字符串中首尾的字符串，不带参数默认去除空格</td></tr><tr><td>str.zfill(number)</td><td>返回指定长度的字符串，原字符串右对齐，前面填充0</td></tr><tr><td>str.replace(‘old’,‘new’[,count])</td><td>用新的字符替换老字符，还可以指定替换的个数，默认全部替换</td></tr><tr><td>str.capitalize()</td><td>句子首字母大写</td></tr><tr><td>str.center(width[,fillchar])str.ljust(width[,fillchar])str.rjust(width[,fillchar])</td><td>返回一个原字符串居中(靠左/靠右)对齐，width为总长度，两边用一个字符fillchar填充，如果指定的长度小于原字符串的长度则返回原字符串</td></tr><tr><td>str.expandtabs(number)</td><td>将\t转换成number个空格</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 字符串转换类</span></span><br><span class="line">msg = <span class="string">&quot;  hEllo World Chen   &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大写&quot;</span>, msg.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小写&quot;</span>, msg.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标题&quot;</span>, msg.title())</span><br><span class="line"></span><br><span class="line">msg2 = <span class="string">&quot;root:x:0:0:root:/root:/bin/bash&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;切割：&quot;</span>, msg2.split(<span class="string">&quot;:&quot;</span>))</span><br><span class="line">msg3 = msg2.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拼接：&quot;</span>, <span class="string">&quot;#&quot;</span>.join(msg3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除首尾空白&quot;</span>, msg.strip(), <span class="string">&quot;######&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去除root首尾：&quot;</span>, msg2.strip(<span class="string">&quot;root&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串填充：&quot;</span>, msg.zfill(<span class="number">40</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串替换&quot;</span>, msg2.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;%&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;整个字符串首字母大写&quot;</span>, msg.capitalize())</span><br><span class="line">msg4 = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg4.center(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.center(<span class="number">50</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.ljust(<span class="number">50</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg4.rjust(<span class="number">50</span>, <span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li>==字符串拼接==</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 字符串拼接（+）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;I&#x27;</span> + <span class="string">&#x27;Love&#x27;</span> + <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">ILovePython</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串拼接（join）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Love&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(a))</span><br><span class="line">ILovePython</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 与 join的效率问题</span><br><span class="line">一般来说，+ 拼接 效率比 join 拼接低</span><br><span class="line">+拼接，每一次出现都会在内存中开辟1个新的空间，所有效率低，比较耗时</span><br><span class="line">join一次性拼接成1个大的字符串</span><br></pre></td></tr></table></figure><ol start="4"><li>==字符串格式化==</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化（%）</span><br><span class="line">基本格式</span><br><span class="line">%[(name)][flags][width].[precision]typecode</span><br><span class="line">-(name):命名</span><br><span class="line">-flags:+,-,&#x27;&#x27;或0。+表示右对齐；-表示左对齐；&#x27;&#x27;为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐，0表示使用0填充</span><br><span class="line">-width表示显示宽度</span><br><span class="line">-precision表示小数点后精度</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># %格式化 </span></span><br><span class="line">name = <span class="string">&quot;wen&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名： %s, 年龄： %s&quot;</span>%(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名： %s, 年龄： %s&quot;</span>%(age, <span class="string">&quot;wen2&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化(format)</span><br><span class="line">&#123;变量:[填充字符][对齐方式 &lt;^&gt;][宽度][格式]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># format 格式化</span></span><br><span class="line">name = <span class="string">&quot;wen&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; 姓名：&#123;&#125;， 年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; 姓名：&#123;&#125;， 年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(age, name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; 姓名: &#123;1&#125;, 年龄：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; 姓名: &#123;1&#125;, 年龄：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(age, name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format03 --&gt; 姓名：&#123;name1&#125;, 年龄：&#123;age1&#125;&quot;</span>.<span class="built_in">format</span>(name1 = name, age1 = age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;0:*&gt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：0 第1个变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*&gt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：1 第2个变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：：执行 ; * 填充字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format01 --&gt; &#123;1:*^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 注：^ 居中 ; 10 填充宽度10字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>,<span class="number">5.333</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;1:06.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>,<span class="number">5.333</span>))</span><br><span class="line"><span class="comment"># 二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 八进制注：16进制是”&#123;0:x&#125;”.format(10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:o&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 千分位格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;format02 --&gt; &#123;0:,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">123456789</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化-f</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># f标志符  格式化</span></span><br><span class="line">a = <span class="string">&quot;I&quot;</span></span><br><span class="line">b = <span class="string">&quot;Love&quot;</span></span><br><span class="line">c = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#结果 ILovePython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c&#125;&quot;</span>.<span class="built_in">format</span>(a = a, b = b, c = c))<span class="comment"># 注：效果等同</span></span><br><span class="line"><span class="comment">#结果 ILovePython</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c:a^<span class="number">10</span>&#125;</span>&quot;</span>)<span class="comment"># 注：对字符串c的操作：用“a”填充宽度10，居中</span></span><br><span class="line"><span class="comment">#结果 ILoveaaPythonaa</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c:a^10&#125;&quot;</span>.<span class="built_in">format</span>(a = a, b = b, c = c)) <span class="comment"># 注：效果等同</span></span><br><span class="line"><span class="comment">#结果 ILoveaaPythonaa</span></span><br></pre></td></tr></table></figure><h3 id="Python数字-Booleans">Python数字-Booleans</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">布尔值(Booleans)是一个逻辑值</span><br><span class="line">取值范围只有True和False(真和假)</span><br><span class="line">布尔值为假：</span><br><span class="line">&#x27;&#x27;,0,0.0,(),[],&#123;&#125;,None,False</span><br><span class="line">None是一个特殊的常量，表示一种特殊的数据类型（NoneType）</span><br><span class="line">值布尔值为真：</span><br><span class="line">除了为假的，其他的都为真</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* 布尔值可以相互加减</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a == b)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = (a == b) + (a == d)<span class="comment"># 注：c = 0 +1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 布尔值排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[(a==d),(a==b)]  <span class="comment"># 注：(a==d)为真，(a==b)为假</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(lst)</span><br><span class="line">[<span class="literal">False</span>, <span class="literal">True</span>]  <span class="comment"># 注：因为默认情况下 0为假，1为真</span></span><br></pre></td></tr></table></figure><h3 id="Others">Others</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">○常量</span><br><span class="line">常量是指一旦初始化后就不能修改的固定值</span><br><span class="line">注意：在Python中表示一个常量通常用大写（约定俗成，非强制）表示，如：PI=3.1415926</span><br><span class="line">○NoneType</span><br><span class="line">None表示什么也没有</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：以前在 &lt;a href=&quot;https://blog.csdn.net/cpen_web/category_11089219.html&quot;&gt;&lt;code&gt;CSDN 新星计划&lt;/code&gt;&lt;/a&gt; 上写的文章，迁移至此。</summary>
    
    
    
    <category term="Python" scheme="https://cpen.top/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://cpen.top/blog/tags/Python/"/>
    
    <category term="数据类型" scheme="https://cpen.top/blog/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
